[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EcoDrought Capstone",
    "section": "",
    "text": "1 Introduction\nThis book provides a visual story of the USGS Eco-Drought Capstone Project. Our goals are to (1) quantify fine-scale spatial heterogeneity in flow regimes in headwater stream networks, (2) demonstrate the limitations of existing tools that model flow in headwater streams, and (3) assess the subsequent effects of streamflow heterogeneity on fish population dynamics and vulnerability to climatic variation, particularly drought.\nProject team: Jeff Baldock, Jenn Fair, Ben Letcher, Robert Al-Chokhachy, Clint Muhlfeld, and Jason Dunham\n\n\nSession Information\n\n\n\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/Denver\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.1    fastmap_1.2.0     cli_3.6.3        \n [5] tools_4.4.1       htmltools_0.5.8.1 rstudioapi_0.17.1 rmarkdown_2.29   \n [9] knitr_1.48        jsonlite_1.8.9    xfun_0.49         digest_0.6.37    \n[13] rlang_1.1.4       evaluate_1.0.1",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html",
    "href": "Data Availability/CollateData.html",
    "title": "2  Collate Data",
    "section": "",
    "text": "2.1 Gather site information\nPurpose: Collate EcoDrought streamflow and temperature data, povided by EcoD PIs/partners and NWIS\nNotes:\nCode\n# West Brook\nsiteinfo_wb &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Mass/MA_site_info.csv\") %&gt;%\n  mutate(Station_No = factor(Station_No), Site_Name = factor(Site_Name)) %&gt;%\n  rename(site_id = Site_ID, station_no = Station_No, site_name = Site_Name, lat = Latitude_dec_deg, long = Longitude_dec_deg, elev_ft = Elevation_ft, area_sqmi = Drainage_Area_sqmi) %&gt;%\n  mutate(designation = \"little\", basin = \"West Brook\", region = \"Mass\") #%&gt;% select(-c(elev_ft, area_sqmi)) \n\n# Shenandoah\nsiteinfo_shen &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Virg/VA_site_info.csv\") %&gt;%\n  mutate(Station_No = factor(Station_No), Site_Name = factor(Site_Name)) %&gt;%\n  rename(site_id = Site_ID, station_no = Station_No, site_name = Site_Name, lat = Latitude_dec_deg, long = Longitude_dec_deg, elev_ft = Elevation_ft, area_sqmi = Drainage_Area_sqmi) %&gt;%\n  mutate(designation = ifelse(str_detect(site_id, \"10FL\"), \"big\", \"little\"), \n         basin = str_sub(site_name, 1, str_length(site_name)-3), region = \"Shen\") #%&gt;% select(-c(elev_ft, area_sqmi))\n\n# Flathead/Muhlfeld\nsiteinfo_flat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Flathead/Flathead_SiteInfo_UpdateOct25.csv\") %&gt;% \n  select(basin, site_name, site_id, region, designation, lat, long) %&gt;%\n  rename(subbasin = basin) %&gt;%\n  mutate(basin = \"Flathead\", region = \"Flat\") %&gt;%\n  select(site_id, site_name, lat, long, designation, basin, subbasin, region) %&gt;%\n  filter(designation == \"little\")\n  \n# GYA/Al-Chokhachy\nsiteinfo_gya &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/Al-Chokhachy_sites.csv\") %&gt;%\n  mutate(region = ifelse(basin == \"Snake River\", \"Snake\", \"Shields\"), \n         designation = \"little\") %&gt;%\n  select(site_id, site_name, latitude, longitude, designation, basin, region) %&gt;% \n  rename(lat = latitude, long = longitude)\n  \n\n# NWIS Medium/Big/Super G\nsites &lt;- c(\"01169900\", # South River at Conway, Massachusetts\n           \"13011500\", # Pacific Creek, Snake River, Wyoming\n           \"06195600\", # Shields River at Livingston, Montana\n           \"12355500\", # North Fork Flathead River, Montana\n           \"10396000\", # Donner Blitzen River near Frenchglen, Oregon\n           # Medium G\n           \"12355347\", # Big Creek (Flathead)\n           \"12355342\", # Hallowat Creek (Flathead)\n           \"06192980\", # Shields Rivera above Smith Creek (GYA)\n           \"06192900\", # Dugout Creek Mouth (GYA)\n           \"13012475\", # South Fork Spread Creek (GYA)\n           \"13012465\", # Leidy Creek, lower (GYA)\n           \"01171100\", # West Brook (Mass)\n           \"01171000\",  # Avery Brook (Mass)\n           \"424551118503200\", # Fish Creek at DB confluence (Oreg)\n           \"424547118503500\", # DB above Fish Creek (Oreg)\n           \"424325118495900\", # DB near Burnt Car Spring (Oreg)\n           \"424003118453700\", # Little Blitzen River (Oreg)\n           \"423830118453200\", # Indian Creek (Oreg)\n           \"423815118453900\" # DB above Indian Creek (Oreg)\n           )\nsiteinfo_nwis &lt;- tibble(readNWISsite(sites)[,c(2:3,7,8,20,30)]) # get site info\nnames(siteinfo_nwis) &lt;- c(\"station_no\", \"site_name\", \"lat\", \"long\", \"elev_ft\", \"area_sqmi\") # rename columns\nsiteinfo_nwis &lt;- siteinfo_nwis %&gt;% mutate(site_name = c(\"South River Conway NWIS\", \n                                                        \"Avery Broook NWIS\", \n                                                        \"West Brook NWIS\", \n                                                        \"Dugout Creek NWIS\", \n                                                        \"Shields River ab Smith NWIS\", \n                                                        \"Shields River nr Livingston NWIS\", \n                                                        \"Donner Blitzen River nr Frenchglen NWIS\", \n                                                        \"Hallowat Creek NWIS\", \n                                                        \"Big Creek NWIS\", \n                                                        \"North Fork Flathead River NWIS\", \n                                                        \"Pacific Creek at Moran NWIS\", \n                                                        \"Leidy Creek Mouth NWIS\", \n                                                        \"SF Spread Creek Lower NWIS\",\n                                                        \"Donner Blitzen ab Indian NWIS\",\n                                                        \"Indian Creek NWIS\",\n                                                        \"Little Blizten River NWIS\",\n                                                        \"Donner Blitzen nr Burnt Car NWIS\",\n                                                        \"Donner Blitzen ab Fish NWIS\",\n                                                        \"Fish Creek\"),\n                                          site_id = c(\"SRC\", \"AVB\", \"WBR\", \"DUG\", \"SRS\", \"SRL\", \"DBF\", \"HAL\", \"BIG\", \"NFF\", \"PCM\", \"LEI\", \"SFS\", \"DBI\", \"IND\", \"LBL\", \"DBB\", \"DBA\", \"FSH\"),\n                                          designation = c(\"big\", \"medium\", \"medium\", \"medium\", \"medium\", \"big\", \"big\", \"medium\", \"medium\", \"big\", \"big\", \"medium\", \"medium\", \"medium\", \"medium\", \"medium\", \"medium\", \"medium\", \"medium\"),\n                                          basin = c(\"West Brook\", \"West Brook\", \"West Brook\", \"Shields River\", \"Shields River\", \"Shields River\", \"Donner Blitzen\", \"Flathead\", \"Flathead\", \"Flathead\", \"Snake River\", \"Snake River\", \"Snake River\", \"Donner Blitzen\", \"Donner Blitzen\", \"Donner Blitzen\", \"Donner Blitzen\", \"Donner Blitzen\", \"Donner Blitzen\"),\n                                          region = c(\"Mass\", \"Mass\", \"Mass\", \"Shields\", \"Shields\", \"Shields\", \"Oreg\", \"Flat\", \"Flat\", \"Flat\", \"Snake\", \"Snake\", \"Snake\",\"Oreg\", \"Oreg\", \"Oreg\", \"Oreg\", \"Oreg\", \"Oreg\")) %&gt;% \n  select(site_id, site_name, lat, long, station_no, designation, basin, region, elev_ft, area_sqmi)\n#mapview(st_as_sf(siteinfo_nwis, coords = c(\"long\", \"lat\"), crs = 4326))\n\n\n# bind together, fill in ragged subbasin\nsiteinfo &lt;- bind_rows(siteinfo_wb, siteinfo_shen, siteinfo_flat, siteinfo_gya, siteinfo_nwis)\nsiteinfo$subbasin[siteinfo$site_name == \"Hallowat Creek NWIS\"] &lt;- \"Big Creek\"\nsiteinfo$subbasin[siteinfo$site_name == \"Big Creek NWIS\"] &lt;- \"Big Creek\"\nsiteinfo &lt;- siteinfo %&gt;% mutate(subbasin = ifelse(is.na(subbasin), basin, subbasin))\n\n\n# fix Shields River Valley Ranch site locations\nsiteinfo$lat[siteinfo$site_id == \"SH07\"] &lt;- siteinfo$lat[siteinfo$site_id == \"SRS\"]\nsiteinfo$long[siteinfo$site_id == \"SH07\"] &lt;- siteinfo$long[siteinfo$site_id == \"SRS\"]\n\n\n# add elevation and area variables (from watershed delineation)\nareafiles &lt;- list.files(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Area and Elevation\")\narealist &lt;- list()\nfor (i in 1:length(areafiles)) { arealist[[i]] &lt;- read_csv(paste(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Area and Elevation/\", areafiles[i], sep = \"\"))}\nareaelev &lt;- do.call(rbind, arealist)\n# how well do provided and delineation area/elevation match?\n# siteinfo %&gt;% left_join(areaelev, by = \"site_id\") %&gt;% ggplot() + geom_point(aes(x = area_sqmi.x, y = area_sqmi.y)) + geom_abline(intercept = 0, slope = 1) + facet_wrap(~basin, scales = \"free\")\n# test %&gt;% ggplot() + geom_point(aes(x = elev_ft.x, y = elev_ft.y)) + geom_abline(intercept = 0, slope = 1) + facet_wrap(~basin, scales = \"free\")\n# add delineated variables\nsiteinfo &lt;- siteinfo %&gt;% select(-c(area_sqmi, elev_ft)) %&gt;% left_join(areaelev)\n# fix NF Flathead (no dem from Canada)\nsiteinfo$area_sqmi[siteinfo$site_id == \"NFF\"] &lt;- 1556\nWrite and re-load site information\nCode\nwrite_csv(siteinfo, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nView unique basin names\nCode\nunique(siteinfo$basin)\n\n\n[1] \"West Brook\"     \"Paine Run\"      \"Piney River\"    \"Staunton River\"\n[5] \"Flathead\"       \"Duck Creek\"     \"Shields River\"  \"Snake River\"   \n[9] \"Donner Blitzen\"\nView unique site names\nCode\nunique(siteinfo$site_name)\n\n\n  [1] \"Avery Brook\"                            \n  [2] \"Jimmy Brook\"                            \n  [3] \"Mitchell Brook\"                         \n  [4] \"Obear Brook Lower\"                      \n  [5] \"Sanderson Brook\"                        \n  [6] \"West Brook Lower\"                       \n  [7] \"West Brook Upper\"                       \n  [8] \"West Brook Reservoir\"                   \n  [9] \"West Whately Brook\"                     \n [10] \"West Brook 0\"                           \n [11] \"Paine Run 01\"                           \n [12] \"Paine Run 02\"                           \n [13] \"Paine Run 03\"                           \n [14] \"Paine Run 04\"                           \n [15] \"Paine Run 05\"                           \n [16] \"Paine Run 06\"                           \n [17] \"Paine Run 07\"                           \n [18] \"Paine Run 08\"                           \n [19] \"Paine Run 09\"                           \n [20] \"Paine Run 10\"                           \n [21] \"Piney River 01\"                         \n [22] \"Piney River 02\"                         \n [23] \"Piney River 03\"                         \n [24] \"Piney River 04\"                         \n [25] \"Piney River 05\"                         \n [26] \"Piney River 06\"                         \n [27] \"Piney River 08\"                         \n [28] \"Piney River 09\"                         \n [29] \"Piney River 10\"                         \n [30] \"Staunton River 01\"                      \n [31] \"Staunton River 02\"                      \n [32] \"Staunton River 03\"                      \n [33] \"Staunton River 04\"                      \n [34] \"Staunton River 05\"                      \n [35] \"Staunton River 06\"                      \n [36] \"Staunton River 07\"                      \n [37] \"Staunton River 08\"                      \n [38] \"Staunton River 09\"                      \n [39] \"Staunton River 10\"                      \n [40] \"BigCreekLower\"                          \n [41] \"BigCreekMiddle\"                         \n [42] \"BigCreekUpper\"                          \n [43] \"CoalCreekHeadwaters\"                    \n [44] \"CoalCreekLower\"                         \n [45] \"CoalCreekMiddle\"                        \n [46] \"CycloneCreekLower\"                      \n [47] \"CycloneCreekMiddle\"                     \n [48] \"CycloneCreekUpper\"                      \n [49] \"HallowattCreekLower\"                    \n [50] \"LangfordCreekLower\"                     \n [51] \"LangfordCreekUpper\"                     \n [52] \"McGeeCreekLower\"                        \n [53] \"McGeeCreekTrib\"                         \n [54] \"McGeeCreekUpper\"                        \n [55] \"MeadowCreek\"                            \n [56] \"NicolaCreek\"                            \n [57] \"CoalCreekNorth\"                         \n [58] \"SkookoleelCreek\"                        \n [59] \"WernerCreek\"                            \n [60] \"WoundedBuckCreek\"                       \n [61] \"EF Duck Creek be HF\"                    \n [62] \"EF Duck Creek ab HF\"                    \n [63] \"Henrys Fork\"                            \n [64] \"Brackett Creek\"                         \n [65] \"Buck Creek\"                             \n [66] \"Crandall Creek\"                         \n [67] \"Deep Creek\"                             \n [68] \"Dugout Creek\"                           \n [69] \"Lodgepole Creek\"                        \n [70] \"Shields River Valley Ranch\"             \n [71] \"Shields River ab Dugout\"                \n [72] \"Grizzly Creek\"                          \n [73] \"Grouse Creek\"                           \n [74] \"Leidy Creek Lower\"                      \n [75] \"Leidy Creek Upper\"                      \n [76] \"Leidy Creek Mouth\"                      \n [77] \"NF Spread Creek Lower\"                  \n [78] \"NF Spread Creek Upper\"                  \n [79] \"Rock Creek\"                             \n [80] \"SF Spread Creek Lower\"                  \n [81] \"SF Spread Creek Upper\"                  \n [82] \"Spread Creek Dam\"                       \n [83] \"South River Conway NWIS\"                \n [84] \"Avery Broook NWIS\"                      \n [85] \"West Brook NWIS\"                        \n [86] \"Dugout Creek NWIS\"                      \n [87] \"Shields River ab Smith NWIS\"            \n [88] \"Shields River nr Livingston NWIS\"       \n [89] \"Donner Blitzen River nr Frenchglen NWIS\"\n [90] \"Hallowat Creek NWIS\"                    \n [91] \"Big Creek NWIS\"                         \n [92] \"North Fork Flathead River NWIS\"         \n [93] \"Pacific Creek at Moran NWIS\"            \n [94] \"Leidy Creek Mouth NWIS\"                 \n [95] \"SF Spread Creek Lower NWIS\"             \n [96] \"Donner Blitzen ab Indian NWIS\"          \n [97] \"Indian Creek NWIS\"                      \n [98] \"Little Blizten River NWIS\"              \n [99] \"Donner Blitzen nr Burnt Car NWIS\"       \n[100] \"Donner Blitzen ab Fish NWIS\"            \n[101] \"Fish Creek\"\nMap sites\nCode\n# convert to spatial object and view on map\n#| fig-cap: \"Map of EcoDrought project locations\"\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#load-ecod-data",
    "href": "Data Availability/CollateData.html#load-ecod-data",
    "title": "2  Collate Data",
    "section": "2.2 Load EcoD data",
    "text": "2.2 Load EcoD data\n\n\nCode\n# West Brook\ndat_wb &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Mass/EcoDrought Continuous_MA.csv\") %&gt;%\n  mutate(Station_No = factor(Station_No), Site_Name = factor(Site_Name)) %&gt;%\n  rename(station_no = Station_No, site_name = Site_Name, datetime = DateTime_EST, height = GageHeight_Hobo_ft, flow = Discharge_Hobo_cfs, tempf = WaterTemperature_HOBO_DegF) %&gt;%\n  mutate(tempc = (tempf - 32)*(5/9)) %&gt;% select(station_no, site_name, datetime, height, flow, tempc) %&gt;%\n  left_join(siteinfo %&gt;% select(-station_no))\n\n\n# Shenandoah\ndat_shen &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Virg/EcoDrought_Continuous_VA.csv\") %&gt;%\n  mutate(Station_No = factor(Station_No), Site_ID = factor(Site_ID), Discharge_Hobo_cfs = as.numeric(Discharge_Hobo_cfs)) %&gt;%\n  rename(station_no = Station_No, site_id = Site_ID, datetime = DateTime_EST, height = GageHeight_Hobo_ft, flow = Discharge_Hobo_cfs, tempf = WaterTemperature_HOBO_DegF) %&gt;%\n  mutate(tempc = (tempf - 32)*(5/9)) %&gt;% select(station_no, site_id, datetime, height, flow, tempc) %&gt;%\n  left_join(siteinfo)\n# pull in Big G data separately (UVA long-term gage sites)\ndat_shen_uva_q &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Virg/Shen_BigG_Discharge_hourly_UVA.csv\") %&gt;%\n  rename(flow = cfs)\ndat_shen_uva_t &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Virg/Shen_BigG_TempEtc_hourly_UVA.csv\") %&gt;%\n  select(site_id, datetime, tempc_mean) %&gt;% rename(tempc = tempc_mean)\ndat_shen_uva &lt;- dat_shen_uva_q %&gt;% left_join(dat_shen_uva_t) %&gt;% left_join(siteinfo)\n# bind usgs and uva data\ndat_shen &lt;- bind_rows(dat_shen, dat_shen_uva)\n\n\n# Flathead/Muhlfeld\nflatfiles &lt;- list.files(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Flathead/Export2/EMA/Continuous Data\")\nflatlist &lt;- list()\nfor (i in 1:length(flatfiles)) { \n  #print(flatfiles[i])\n  flatlist[[i]] &lt;- read_csv(paste(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Flathead/Export2/EMA/Continuous Data/\", flatfiles[i], sep = \"\")) %&gt;%\n    mutate(DateTime = mdy_hm(DateTime, tz = \"MST\"),\n           site_name = gsub(\"EMA.csv\", \"\", flatfiles[i]))\n  }\ndat_flat &lt;- bind_rows(flatlist) %&gt;% select(DateTime, GageHeightFT, DischargeCFS, TempF, TempC, site_name, DischargeReliability, TempReliability) %&gt;% \n  rename(datetime = DateTime, height = GageHeightFT, flow = DischargeCFS, tempf = TempF, tempc = TempC) %&gt;%\n  mutate(DischargeReliability = as_factor(DischargeReliability),\n         TempReliability = as_factor(TempReliability)) %&gt;%\n  mutate(tempf = ifelse(is.na(tempf), (tempc * (9/5)) + 32, tempf),\n         tempc = ifelse(is.na(tempc), (tempf - 32) * (5/9), tempc)) %&gt;%\n  left_join(siteinfo) %&gt;% select(-tempf)\n\n\n# Greater Yellowstone/Al-Chokhachy\ngyafiles &lt;- list.files(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/Al-Chokhachy data files\")\ngyalist &lt;- list()\nfor (i in 1:length(gyafiles)) { \n  #print(gyafiles[i])\n  gyalist[[i]] &lt;- read_csv(paste(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/Al-Chokhachy data files/\", gyafiles[i], sep = \"\")) %&gt;%\n    mutate(date = mdy(date), DateTime = ymd_hms(paste(date, time, sep = \" \"), tz = \"MST\"), discharge = as.numeric(discharge)*35.314666212661)\n}\ndat_gya &lt;- bind_rows(gyalist) %&gt;% select(DateTime, depth, discharge, temperature, location) %&gt;% \n  rename(datetime = DateTime, height = depth, flow = discharge, tempc = temperature, site_name = location) %&gt;%\n  filter(site_name != \"EF Henrys\") %&gt;% # drop weird duplicate site/year?\n  mutate(site_name = dplyr::recode(site_name,\n                            \"EF Above Confluence\" = \"EF Duck Creek ab HF\",\n                            \"EF Below Confluence\" = \"EF Duck Creek be HF\",\n                            \"NF Spread Creek\" = \"NF Spread Creek Lower\",\n                            \"Upper NF Spread Creek\" = \"NF Spread Creek Upper\",\n                            \"SF Spread Creek\" = \"SF Spread Creek Lower\",\n                            \"Upper SF Spread Creek\" = \"SF Spread Creek Upper\",\n                            \"Shields River above Dugout Creek\" = \"Shields River ab Dugout\",\n                            \"Upper Leidy Creek\" = \"Leidy Creek Upper\", \n                            \"Leidy Creek\" = \"Leidy Creek Mouth\",\n                            \"Spread Creek\" = \"Spread Creek Dam\",\n                            \"Shields River above Smith Creek\" = \"Shields River Valley Ranch\")) %&gt;%\n  left_join(siteinfo) %&gt;% filter(tempc &lt;= 100)\n\n\nBind EcoD hourly flow/temp data with siteinfo and write to file\n\n\nCode\n# bind together\ndat &lt;- bind_rows(dat_wb, dat_shen, dat_flat, dat_gya)\n# unique(dat$site_name)\nwrite_csv(dat, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_Raw.csv\")\ndat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_Raw.csv\")\n\n\nCheck unique designations\n\n\nCode\nunique(dat$designation)\n\n\n[1] \"little\" \"big\"   \n\n\nCheck unique regions\n\n\nCode\nunique(dat$region)\n\n\n[1] \"Mass\"    \"Shen\"    \"Flat\"    \"Shields\" \"Snake\"  \n\n\nCheck unique basins\n\n\nCode\nunique(dat$basin)\n\n\n[1] \"West Brook\"     \"Paine Run\"      \"Staunton River\" \"Piney River\"   \n[5] \"Flathead\"       \"Shields River\"  \"Duck Creek\"     \"Snake River\"   \n\n\nCheck unique subbasins\n\n\nCode\nunique(dat$subbasin)\n\n\n [1] \"West Brook\"         \"Paine Run\"          \"Staunton River\"    \n [4] \"Piney River\"        \"Big Creek\"          \"Coal Creek\"        \n [7] \"McGee Creek\"        \"Wounded Buck Creek\" \"Shields River\"     \n[10] \"Duck Creek\"         \"Snake River\"",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#load-nwis-data",
    "href": "Data Availability/CollateData.html#load-nwis-data",
    "title": "2  Collate Data",
    "section": "2.3 Load NWIS data",
    "text": "2.3 Load NWIS data\n\n\nCode\n# extract daily mean discharge and temp data from USGS NWIS website\ndat_superg_nwis &lt;- tibble(readNWISdv(siteNumbers = sites, parameterCd = c(\"00010\", \"00060\"), startDate = \"1980-01-01\", endDate = Sys.Date(), statCd = c(\"00003\", \"00001\", \"00002\")))[,-c(1,5,7,9,11)]\nnames(dat_superg_nwis) &lt;- c(\"station_no\", \"date\", \"tempc_max\", \"tempc_min\", \"tempc_mean\", \"flow_mean\")\ndat_superg_nwis &lt;- dat_superg_nwis %&gt;% left_join(siteinfo)\n\n# Manually grab Donner Blitzen above Indian Creek at the original timescale\n# daily mean flow dropped from above query, perhaps b/c in 2020 flow measurements were made every minute\ndbabind &lt;- tibble(readNWISdata(sites = \"423815118453900\", service = \"uv\", startDate = \"1980-01-01\", endDate = Sys.Date()))[,c(2,3,6)] \ndbabind_daily &lt;- dbabind %&gt;% group_by(site_no, date(dateTime)) %&gt;% summarize(nobs = n(), flow_mean = mean(X_00060_00000)) %&gt;% filter(nobs %in% c(96, 1440)) %&gt;% select(c(1,2,4))\nnames(dbabind_daily) &lt;- c(\"station_no\", \"date\", \"flow_mean\") \ndbabind_daily &lt;- dat_superg_nwis %&gt;% filter(station_no == \"423815118453900\") %&gt;% select(-flow_mean) %&gt;% left_join(dbabind_daily)\n\n# bind DBabInd to reset of data\ndat_superg_nwis &lt;- rbind(dat_superg_nwis %&gt;% filter(station_no != \"423815118453900\"), dbabind_daily)\n\n\n\n\nCode\ndat_superg_nwis %&gt;% filter(designation == \"big\") %&gt;% ggplot() + geom_line(aes(x = date, y = log(flow_mean))) + facet_wrap(~site_name)\n\n\n\n\n\n(log) Stream flow (cfs) for Big G NWIS gages\n\n\n\n\n\n\nCode\ndat_superg_nwis %&gt;% filter(designation == \"medium\") %&gt;% ggplot() + geom_line(aes(x = date, y = log(flow_mean))) + facet_wrap(~site_name)\n\n\n\n\n\n(log) Stream flow (cfs) for Medium G NWIS gages",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#bind-data-and-calc.-daily-means",
    "href": "Data Availability/CollateData.html#bind-data-and-calc.-daily-means",
    "title": "2  Collate Data",
    "section": "2.4 Bind data and calc. daily means",
    "text": "2.4 Bind data and calc. daily means\n\n\nCode\n# daily flow/temp summaries\ndat_daily &lt;- dat %&gt;% mutate(date = as_date(datetime)) %&gt;% \n  group_by(station_no, site_name, site_id, basin, subbasin, region, lat, long, elev_ft, area_sqmi, designation, date) %&gt;% \n  summarize(disch_reli = max(DischargeReliability),\n            temp_reli = max(TempReliability),\n            flow_mean = mean(flow), flow_min = min(flow), flow_max = max(flow),\n            tempc_mean = mean(tempc), tempc_min = min(tempc), tempc_max = max(tempc)) %&gt;%\n  arrange(region, basin, site_name, date) %&gt;%\n  ungroup()\n\n# cbind EcoD and NWIS datasets\ndat_daily &lt;- bind_rows(dat_daily %&gt;% select(-flow_min, -flow_max, -tempc_min, -tempc_max), \n                       dat_superg_nwis %&gt;% select(-tempc_max, -tempc_min),\n                       dat_superg_nwis %&gt;% filter(site_id == \"SRL\") %&gt;% mutate(subbasin = \"Duck Creek\") %&gt;% select(-tempc_max, -tempc_min))\n\n# add missing dates\ndat_daily &lt;- fill_missing_dates(dat_daily, dates = date, groups = site_name)\n\n\nView daily mean time series data, for exampple, site_name = CoalCreekLower. Notice the many shorts gaps in the daily data.\n\n\nCode\nlibrary(dygraphs)\ndat_daily %&gt;% filter(site_name == \"CoalCreekLower\") %&gt;% select(date, flow_mean) %&gt;% dygraph() %&gt;% dyRangeSelector() %&gt;% dyAxis(\"y\", label = \"Mean daily flow (cfs)\") %&gt;% dyOptions(fillGraph = TRUE, drawGrid = FALSE, axisLineWidth = 1.5)",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#interpolate-missing-data",
    "href": "Data Availability/CollateData.html#interpolate-missing-data",
    "title": "2  Collate Data",
    "section": "2.5 Interpolate missing data",
    "text": "2.5 Interpolate missing data\nSmall periods of missing data (&lt;24 hours) become a problem when aggregating at the daily and weekly time scales. *Note that currently this discovers and fills missing data at the daily time scale, but should be changed to interpolate at the original timescale of the raw data (e.g., hourly).\n\n\nCode\n# explore data gaps\nmysites &lt;- unique(dat_daily$site_name)\nmynas &lt;- list()\nfor (i in 1:length(mysites)) {\n  mydisch &lt;- unlist(dat_daily$flow_mean[dat_daily$site_name == mysites[i]])\n  runsna &lt;- rle(is.na(mydisch))\n  mynas[[i]] &lt;- tibble(site_name = mysites[i], run = runsna$lengths[runsna$values == TRUE])\n}\nmynas &lt;- do.call(rbind, mynas)\n# mynas %&gt;% filter(run &lt; 100) %&gt;% ggplot() + geom_histogram(aes(x = run)) + facet_wrap_paginate(~site_name, nrow = 4, ncol = 4, page = 1)\n# mynas %&gt;% filter(run &lt; 100) %&gt;% ggplot() + geom_histogram(aes(x = run)) + facet_wrap_paginate(~site_name, nrow = 4, ncol = 4, page = 2)\n# mynas %&gt;% filter(run &lt; 100) %&gt;% ggplot() + geom_histogram(aes(x = run)) + facet_wrap_paginate(~site_name, nrow = 4, ncol = 4, page = 3)\n# mynas %&gt;% filter(run &lt; 100) %&gt;% ggplot() + geom_histogram(aes(x = run)) + facet_wrap_paginate(~site_name, nrow = 4, ncol = 4, page = 4)\n\n\nMost gaps are relatively short\n\n\nCode\nmynas %&gt;% ggplot() + geom_histogram(aes(x = run)) + xlab(\"Days\") + ylab(\"Frequency\")\n\n\n\n\n\nDistributiion of lengths of missing data (days)\n\n\n\n\nZoomed in…\n\n\nCode\nmynas %&gt;% filter(run &lt; 30) %&gt;% ggplot() + geom_histogram(aes(x = run))  + xlab(\"Days\") + ylab(\"Frequency\")\n\n\n\n\n\nDistributiion of lengths of missing data (days)\n\n\n\n\nConsidering just the short gaps, which are likely a function of logger malfunction or Aquarius export issues, which sites are problematic? Answer: Flathead\n\n\nCode\nmynas %&gt;% filter(run &lt; 30) %&gt;% ggplot() + geom_bar(aes(site_name))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\n\nFrequency of short (&lt;40 days) data gaps by site\n\n\n\n\nFill short gaps (&lt;=14 days…2x smoothing period) using time series interpolation\n\n\nCode\n# fill short gaps (&lt;=14 days...2x smoothing period) using time series interpolation\ndatalist &lt;- list()\nfor (i in 1:length(mysites)) { datalist[[i]] &lt;- dat_daily %&gt;% filter(site_name == mysites[i]) %&gt;% mutate(flow_mean_filled = fillMissing(flow_mean, max.fill = 14, span = 100)) }\n# bind and check 1:1\ndat_daily_fill &lt;- do.call(rbind, datalist)\n# dat_daily_fill %&gt;% ggplot() + geom_point(aes(x = flow_mean, y = flow_mean_filled)) + facet_wrap(~site_name, scales = \"free\")\n\n\nExplore interpolated/filled time series relative to original (daily) data Again, CoalCreekLower as an example. Would like to replace with shiny/interactive app\n\n\nCode\nlibrary(dygraphs)\ndat_daily_fill %&gt;% filter(site_name == \"CoalCreekLower\") %&gt;% select(date, flow_mean, flow_mean_filled) %&gt;% dygraph() %&gt;% dyRangeSelector() %&gt;% dySeries(\"flow_mean\", strokeWidth = 5, color = \"black\") %&gt;% dySeries(\"flow_mean_filled\", strokeWidth = 1, color = \"red\") %&gt;% dyAxis(\"y\", label = \"Mean daily flow (cfs)\") %&gt;% dyOptions(fillGraph = TRUE, drawGrid = FALSE, axisLineWidth = 1.5)",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#calculate-yield",
    "href": "Data Availability/CollateData.html#calculate-yield",
    "title": "2  Collate Data",
    "section": "2.6 Calculate yield",
    "text": "2.6 Calculate yield\n\n\nCode\n# convert cfs and basin area to metric\ndat_daily_fill &lt;- dat_daily_fill %&gt;% mutate(flow_mean_cms = flow_mean*0.02831683199881, \n                                            flow_mean_filled_cms = flow_mean_filled*0.02831683199881, \n                                            area_sqkm = area_sqmi*2.58999)\n\n# sites\nsites &lt;- unique(dat_daily_fill$site_name)\n\n# site-specific basin area in square km\nbasinarea &lt;- dat_daily_fill %&gt;% filter(!is.na(site_id)) %&gt;% group_by(site_name) %&gt;% summarize(area_sqkm = unique(area_sqkm))\n\n# calculate yield\nyield_list &lt;- list()\nfor (i in 1:length(sites)) {\n  d &lt;- dat_daily_fill %&gt;% filter(site_name == sites[i])\n  ba &lt;- unlist(basinarea %&gt;% filter(site_name == sites[i]) %&gt;% select(area_sqkm))\n  yield_list[[i]] &lt;-  add_daily_yield(data = d, values = flow_mean_cms, basin_area = as.numeric(ba)) %&gt;% left_join(add_daily_yield(data = d, values = flow_mean_filled_cms, basin_area = as.numeric(ba)) %&gt;% rename(Yield_filled_mm = Yield_mm))\n}\ndat_daily_fill_wyield &lt;- do.call(rbind, yield_list)",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#calculate-7-day-means",
    "href": "Data Availability/CollateData.html#calculate-7-day-means",
    "title": "2  Collate Data",
    "section": "2.7 Calculate 7-day means",
    "text": "2.7 Calculate 7-day means\n\n\nCode\ndat_daily_fill_wyield &lt;- dat_daily_fill_wyield %&gt;%\n  group_by(site_name) %&gt;%\n  mutate(flow_mean_7 = rollapply(flow_mean, FUN = mean, width = 7, align = \"center\", fill = NA),\n         flow_mean_filled_7 = rollapply(flow_mean_filled, FUN = mean, width = 7, align = \"center\", fill = NA),\n         tempc_mean_7 = rollapply(tempc_mean, FUN = mean, width = 7, align = \"center\", fill = NA),\n         Yield_mm_7 = rollapply(Yield_mm, FUN = mean, width = 7, align = \"center\", fill = NA),\n         Yield_filled_mm_7 = rollapply(Yield_filled_mm, FUN = mean, width = 7, align = \"center\", fill = NA)) %&gt;%\n  ungroup() %&gt;% filter(!is.na(site_id))\n\n# # view flow\n# dat_daily_fill_wyield %&gt;% filter(site_name == \"Avery Brook\") %&gt;% select(date, flow_mean_filled, flow_mean_filled_7) %&gt;% dygraph() %&gt;% dyRangeSelector() %&gt;% \n#   dySeries(\"flow_mean_filled\", strokeWidth = 5, color = \"black\") %&gt;% dySeries(\"flow_mean_filled_7\", strokeWidth = 1, color = \"red\")\n# \n# # view yield\n# dat_daily_fill_wyield %&gt;% filter(site_name == \"Avery Brook\") %&gt;% select(date, Yield_filled_mm, Yield_filled_mm_7) %&gt;% dygraph() %&gt;% dyRangeSelector() %&gt;% \n#   dySeries(\"Yield_filled_mm\", strokeWidth = 5, color = \"black\") %&gt;% dySeries(\"Yield_filled_mm_7\", strokeWidth = 1, color = \"red\")\n\n# unique(dat_daily_fill_wyield$basin)\n# unique(dat_daily_fill_wyield$subbasin)\n# unique(dat_daily_fill_wyield$region)\n# unique(dat_daily_fill_wyield$disch_reli)\n# unique(dat_daily_fill_wyield$temp_reli)\n\n\nView little and medium g time series data (7-day mean yield), by sub-basin. Use the handles below the x-axis to adjust the time frame.\n\n\nCode\nmysubbasins &lt;- unique(dat_daily_fill_wyield$subbasin)[-c(4,7,13)]\nmyplots &lt;- list()\nfor (i in 1:length(mysubbasins)) {\n  myplots[[i]] &lt;- dat_daily_fill_wyield %&gt;% filter(designation %in% c(\"little\", \"medium\"), subbasin == mysubbasins[i]) %&gt;% mutate(logYield = log(Yield_filled_mm_7)) %&gt;% select(date, site_name, logYield) %&gt;% spread(key = site_name, value = logYield) %&gt;% dygraph() %&gt;% dyRangeSelector() %&gt;% dyAxis(\"y\", label = \"ln(Yield, mm)\")\n}\n\n\n\nBig CreekCoal CreekMcGee CreekWest BrookPaine RunStaunton RiverDuck CreekShields RiverSnake RiverDonner Blitzen",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#write-out-and-read-data",
    "href": "Data Availability/CollateData.html#write-out-and-read-data",
    "title": "2  Collate Data",
    "section": "2.8 Write out and read data",
    "text": "2.8 Write out and read data\n\n\nCode\n# write out\nwrite_csv(dat_daily_fill_wyield, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\")\ndat_daily &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\")",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#view-data-availability",
    "href": "Data Availability/CollateData.html#view-data-availability",
    "title": "2  Collate Data",
    "section": "2.9 View data availability",
    "text": "2.9 View data availability\n\n\nCode\n# summarize data availability\ndat_summ &lt;- dat_daily %&gt;% filter(site_id != \"MRN\") %&gt;%\n  group_by(basin, date, designation) %&gt;% summarize(numflow = sum(!is.na(flow_mean)), numtemp = sum(!is.na(tempc_mean))) %&gt;% \n  gather(type, avail, numflow:numtemp) %&gt;% mutate(type2 = as.factor(paste(designation, type, sep = \"_\"))) %&gt;% \n  mutate(type3 = as.numeric(type2), avail = na_if(avail, 0)) %&gt;% ungroup() %&gt;% filter(!is.na(avail))\n# levels(dat_summ$type2)\n# unique(dat_summ$basin)\n\n\n\n\nCode\n# plot all years\n#| fig-cap: \"Data availability by basin, all years\"\nmyplot &lt;- dat_summ %&gt;% ggplot(aes(x = date, y = type3)) + \n  geom_errorbarh(aes(xmax = date, xmin = date, color = avail), size = 0.001) +\n  scale_color_continuous(trans = \"reverse\", na.value = \"grey60\") +\n  scale_y_discrete(limits = c(\"Big G flow\", \"Big G temp\", \"Medium g flow\", \"Medium g temp\", \"Little g flow\", \"Little g temp\")) + \n  labs(colour = \"Number \\nof sites\") + ylab(\"\") + xlab(\"Date\") + \n  facet_wrap(~ basin, nrow = 4,\n             labeller = as_labeller(c(`West Brook` = \"West Brook: G = South River Conway (NWIS)\", \n                                      `Staunton River` = \"Staunton River: G = Staunton River 10 (UVA)\",\n                                      `Paine Run` = \"Paine Run: G = Paine Run 10 (UVA)\",\n                                      `Piney River` = \"Piney River: G = Piney River 10 (UVA)\",\n                                      `Snake River` = \"Snake River: G = Pacific Creek Moran (NWIS)\",\n                                      `Shields River` = \"Shields River: G = Shields River Livingston (NWIS)\",\n                                      `Flathead` = \"NF Flathead River: G = NF Flathead (NWIS)\",\n                                      `Donner Blitzen` = \"Donner Blitzen River: G = DB Frenchglen (NWIS)\",\n                                      `Duck Creek` = \"Duck Creek: G = Shields River Livingston (NWIS)\")))\nmyplot\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Data Availability/DataAvailability_byBasin.jpg\", height = 6, width = 12, units = \"in\", res = 500)\n# myplot\n# dev.off()\n\n\n\n\nCode\n# plot recent years\n#| fig-cap: \"Data availability by basin, recent years\"\n# jpeg(\"./Data Availability/DataAvailability_byBasin_recent.jpg\", height = 6, width = 12, units = \"in\", res = 500)\nmyplot &lt;- dat_summ %&gt;% filter(date &gt;= \"2018-10-01\") %&gt;% ggplot(aes(x = date, y = type3)) + \n  geom_errorbarh(aes(xmax = date, xmin = date, color = avail), size = 0.001) +\n  scale_color_continuous(trans = \"reverse\", na.value = \"grey60\") +\n  scale_y_discrete(limits = c(\"Big G flow\", \"Big G temp\", \"Medium g flow\", \"Medium g temp\", \"Little g flow\", \"Little g temp\")) + \n  labs(colour = \"Number \\nof sites\") + ylab(\"\") + xlab(\"Date\") + \n  facet_wrap(~ basin, nrow = 4,\n             labeller = as_labeller(c(`West Brook` = \"West Brook: G = South River Conway (NWIS)\", \n                                      `Staunton River` = \"Staunton River: G = Staunton River 10 (UVA)\",\n                                      `Paine Run` = \"Paine Run: G = Paine Run 10 (UVA)\",\n                                      `Piney River` = \"Piney River: G = Piney River 10 (UVA)\",\n                                      `Snake River` = \"Snake River: G = Pacific Creek Moran (NWIS)\",\n                                      `Shields River` = \"Shields River: G = Shields River Livingston (NWIS)\",\n                                      `Flathead` = \"NF Flathead River: G = NF Flathead (NWIS)\",\n                                      `Donner Blitzen` = \"Donner Blitzen River: G = DB Frenchglen (NWIS)\",\n                                      `Duck Creek` = \"Duck Creek: G = Shields River Livingston (NWIS)\")))\nmyplot",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Data Availability/CollateData.html#compare-co-located-gages",
    "href": "Data Availability/CollateData.html#compare-co-located-gages",
    "title": "2  Collate Data",
    "section": "2.10 Compare co-located gages",
    "text": "2.10 Compare co-located gages\n\n2.10.1 Compare synchronous gages\nCompare streamflow data from co-located EcoDrought and NWIS gages with overlapping periods of record\n\n\nCode\n# WEST BROOK\np1 &lt;- dat_daily %&gt;% filter(site_name == \"West Brook 0\") %&gt;% select(date, flow_mean_7) %&gt;% rename(little = flow_mean_7) %&gt;% \n  left_join(dat_daily %&gt;% filter(site_name == \"West Brook NWIS\") %&gt;% select(date, flow_mean_7) %&gt;% rename(medium = flow_mean_7)) %&gt;%\n  ggplot() + geom_point(aes(x = log(medium), y = log(little))) + geom_abline(intercept = 0, slope = 1, color = \"red\")\n\np2 &lt;- dat_daily %&gt;% filter(site_name == \"Avery Brook\") %&gt;% select(date, flow_mean_7) %&gt;% rename(little = flow_mean_7) %&gt;% \n  left_join(dat_daily %&gt;% filter(site_name == \"Avery Broook NWIS\") %&gt;% select(date, flow_mean_7) %&gt;% rename(medium = flow_mean_7)) %&gt;%\n  ggplot() + geom_point(aes(x = log(medium), y = log(little))) + geom_abline(intercept = 0, slope = 1, color = \"red\")\n\n# FLATHEAD\np3 &lt;- dat_daily %&gt;% filter(site_name == \"BigCreekMiddle\") %&gt;% select(date, flow_mean_7) %&gt;% rename(little = flow_mean_7) %&gt;% \n  left_join(dat_daily %&gt;% filter(site_name == \"Big Creek NWIS\") %&gt;% select(date, flow_mean_7) %&gt;% rename(medium = flow_mean_7)) %&gt;%\n  ggplot() + geom_point(aes(x = log(medium), y = log(little))) + geom_abline(intercept = 0, slope = 1, color = \"red\")\n\n# jpeg(\"./Data Availability/LittleMedium_Co-Located_Gages.jpg\", height = 6, width = 6, units = \"in\", res = 500)\nggarrange(p1, p2, p3, ncol = 2, nrow = 2, labels = c(\"West Brook 0\", \"Avery Brook\", \"Big Creek (Flathead)\"))\n\n\n\n\n\nStreamflow measured at little g gages (EcoDrought) as a function of streamflow measured at medium g gages (NWIS), on a log-scale. Red line denotes 1:1\n\n\n\n\nCode\n# dev.off()\n\n\n\n\n2.10.2 Compare asynchronous gages\nFor Spread Creek and Shields River, compare data from co-located EcoDrought and NWIS gages, with NON-overlapping periods of record. Note that streamflow from NWIS gages is about ~1 order of magnitude greater than what is measured at EcoD gages.\n\nLeidy CreekSF Spread Creek LowerDugout CreekSheilds Valley Ranch",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Collate Data</span>"
    ]
  },
  {
    "objectID": "Explore Data/ExploreData.html",
    "href": "Explore Data/ExploreData.html",
    "title": "3  Explore Long-Term Data",
    "section": "",
    "text": "3.1 Site info and daily data\nPurpose: Explore (long-term) data and (recent) climatic context of EcoD years\nCode\n# site information and locations\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\n\n\n\n\n\n\nCode\n# flow (and temp) data\ndat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\")",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Explore Long-Term Data</span>"
    ]
  },
  {
    "objectID": "Explore Data/ExploreData.html#daymet-air-temp-and-precip",
    "href": "Explore Data/ExploreData.html#daymet-air-temp-and-precip",
    "title": "3  Explore Long-Term Data",
    "section": "3.2 Daymet air temp and precip",
    "text": "3.2 Daymet air temp and precip\n\n\nCode\nmycols &lt;- brewer.pal(6, \"Dark2\")\nsiteinfo_big &lt;- siteinfo %&gt;% filter(designation == \"big\")\n\n# download point location Daymet data\nclimlist &lt;- vector(\"list\", length = dim(siteinfo_big)[1])\nfor (i in 1:dim(siteinfo_big)[1]) {\n  clim &lt;- download_daymet(site = siteinfo_big$site_name[i], lat = siteinfo_big$lat[i], lon = siteinfo_big$long[i], start = 1980, end = 2023, internal = T)\n  climlist[[i]] &lt;- tibble(clim$data) %&gt;% \n    mutate(air_temp_mean = (tmax..deg.c. + tmin..deg.c.)/2, \n           date = as.Date(paste(year, yday, sep = \"-\"), \"%Y-%j\"),\n           site_name = siteinfo_big$site_name[i]) %&gt;%\n    select(12,2,11,10,4,6) %&gt;% rename(precip_mmday = 5, swe_kgm2 = 6)\n  #print(i)\n}\n\n# combine and calculate 7-day moving averages\nclimdf &lt;- do.call(rbind, climlist) %&gt;% left_join(siteinfo_big) %&gt;% mutate(year = year(date)) %&gt;% \n  group_by(station_no, site_name, site_id, basin, region, lat, long, elev_ft, area_sqmi, designation) %&gt;%\n  mutate(air_mean_7 = rollapply(air_temp_mean, FUN = mean, width = 7, align = \"center\", fill = NA),\n         precip_mean_7 = rollapply(precip_mmday, FUN = mean, width = 7, align = \"center\", fill = NA),\n         swe_mean_7 = rollapply(swe_kgm2, FUN = mean, width = 7, align = \"center\", fill = NA)) %&gt;%\n  ungroup() \n\n# trim to Big G sites\nclimdf_big &lt;- climdf %&gt;% filter(designation == \"big\")\n\n\nView long-term trends in mean annual air temperature, by basin\n\n\nCode\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_Daymet_AirTemp_AnnualTrend_BigG.jpg\", height = 8, width = 8, units = \"in\", res = 500)\nclimdf_big_summ &lt;- climdf_big %&gt;% group_by(site_name, year) %&gt;% summarize(anntemp = mean(air_temp_mean)) %&gt;% ungroup()\nclimdf_big_summ %&gt;% \n  ggplot(aes(x = year, y = anntemp)) + geom_point() + facet_wrap(~site_name) + \n  geom_smooth(method = \"lm\", se = TRUE) + xlab(\"Year\") + ylab(\"Mean annual air temperature (deg C)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()\n\n\nView long-term trends in total annual precipitation, by basin\n\n\nCode\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_Daymet_AirTemp_AnnualTrend_BigG.jpg\", height = 8, width = 8, units = \"in\", res = 500)\nclimdf_big_summ &lt;- climdf_big %&gt;% group_by(site_name, year) %&gt;% summarize(annprec = sum(precip_mmday)) %&gt;% ungroup()\nclimdf_big_summ %&gt;% \n  ggplot(aes(x = year, y = annprec)) + geom_point() + facet_wrap(~site_name) + \n  geom_smooth(method = \"lm\", se = TRUE) + xlab(\"Year\") + ylab(\"Total annual precipitaion (mm)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()\n\n\nView annual air temperature time series\n\n\nCode\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_Daymet_AirTemp_Regime_BigG.jpg\", height = 8, width = 8, units = \"in\", res = 500)\nggplot() + \n  geom_line(data = climdf_big, aes(x = yday, y = air_mean_7, group = year, color = year), size = 0.2) +\n  facet_wrap(~ site_name) + xlab(\"Day of year\") + ylab(\"7-day mean air temperature (deg C)\") + \n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()\n\n\nView annual air temperature time series, highlight recent years\n\n\nCode\nclimdf_big_recent &lt;- climdf_big %&gt;% filter(year %in% c(2018:2023))\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_Daymet_AirTemp_Regime_BigG_Recent.jpg\", height = 8, width = 8, units = \"in\", res = 500)\nggplot() + \n  geom_line(data = climdf_big, aes(x = yday, y = air_mean_7, group = year), color = \"grey70\", size = 0.25) +\n  geom_line(data = climdf_big_recent, aes(x = yday, y = air_mean_7, group = as.factor(year), color = as.factor(year))) +\n  scale_colour_manual(values = mycols) + facet_wrap(~ site_name) +\n  xlab(\"Day of year\") + ylab(\"7-day mean air temperature\") + \n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Explore Long-Term Data</span>"
    ]
  },
  {
    "objectID": "Explore Data/ExploreData.html#big-g-temp-flow-and-yield",
    "href": "Explore Data/ExploreData.html#big-g-temp-flow-and-yield",
    "title": "3  Explore Long-Term Data",
    "section": "3.3 Big G temp, flow, and yield",
    "text": "3.3 Big G temp, flow, and yield\n\n\nCode\ndat_daily_G &lt;- dat %&gt;% filter(designation == \"big\", site_name != \"West Brook 0\") %&gt;% mutate(yday = yday(date), year = year(date))\ndat_daily_G_recent &lt;- dat_daily_G %&gt;% filter(year %in% c(2018:2023))\nyear_range &lt;- dat_daily_G %&gt;% group_by(site_name) %&gt;% summarize(minyear = min(year), maxyear = max(year)) %&gt;% mutate(yearrange = paste(minyear, maxyear, sep = \"-\"))\nmycols &lt;- brewer.pal(6, \"Dark2\")\ndat_daily_G %&gt;% group_by(site_name) %&gt;% summarize(mindate = min(date), maxdate = max(date)) %&gt;% kable(caption = \"Date range of Big G streamflow data\")\n\n\n\nDate range of Big G streamflow data\n\n\nsite_name\nmindate\nmaxdate\n\n\n\n\nDonner Blitzen River nr Frenchglen NWIS\n1980-01-01\n2024-11-17\n\n\nNorth Fork Flathead River NWIS\n1980-01-01\n2024-11-17\n\n\nPacific Creek at Moran NWIS\n1980-01-01\n2024-11-17\n\n\nPaine Run 10\n1992-10-01\n2023-12-31\n\n\nPiney River 10\n1992-10-01\n2023-12-31\n\n\nShields River nr Livingston NWIS\n1980-01-01\n2024-11-17\n\n\nSouth River Conway NWIS\n1980-01-01\n2024-11-17\n\n\nStaunton River 10\n1992-09-02\n2023-12-31\n\n\n\n\n\nIn-situ stream temperature\n\n\nCode\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_StreamTemp_BigG_Recent.jpg\", height = 8, width = 9, units = \"in\", res = 500)\nggplot() + \n  geom_line(data = dat_daily_G, aes(x = yday, y = tempc_mean_7, group = year), color = \"grey70\", size = 0.25) +\n  geom_line(data = dat_daily_G_recent, aes(x = yday, y = tempc_mean_7, group = as.factor(year), color = as.factor(year))) +\n  scale_colour_manual(values = mycols) + facet_wrap(~ site_name, nrow = 3) + xlab(\"Day of calendar year\") + ylab(\"7-day mean temperature (deg C)\") + ylim(0,22) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.9,0.05), legend.justification = c(1,0)) + labs(color = \"Year\")\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()\n\n\nIn-situ streamflow\n\n\nCode\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_StreamFlow_BigG_Recent.jpg\", height = 8, width = 9, units = \"in\", res = 500)\nggplot() + \n  geom_line(data = dat_daily_G, aes(x = yday, y = log(flow_mean_7), group = year), color = \"grey70\", size = 0.25) +\n  geom_line(data = dat_daily_G_recent, aes(x = yday, y = log(flow_mean_7), group = as.factor(year), color = as.factor(year))) +\n  scale_colour_manual(values = mycols) + \n  geom_text(data = year_range, aes(x = -Inf, y = -Inf, label = yearrange), hjust = -0.1, vjust = -1) +\n  facet_wrap(~ site_name, nrow = 3, scales = \"free_y\") + \n  xlab(\"Day of calendar year\") + ylab(\"ln 7-day mean streamflow (cfs)\") + labs(color = \"Year\") + theme_bw() + \n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.9,0.05), legend.justification = c(1,0))\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()\n\n\nStreamflow in Yield. Note same y-axis limits\n\n\nCode\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_Yield_BigG_Recent.jpg\", height = 8, width = 9, units = \"in\", res = 500)\nggplot() + \n  geom_line(data = dat_daily_G, aes(x = yday, y = log(Yield_filled_mm_7), group = year), color = \"grey70\", size = 0.25) +\n  geom_line(data = dat_daily_G_recent, aes(x = yday, y = log(Yield_filled_mm_7), group = as.factor(year), color = as.factor(year))) +\n  scale_colour_manual(values = mycols) + \n  geom_text(data = year_range, aes(x = -Inf, y = -Inf, label = yearrange), hjust = -0.1, vjust = -1) +\n  facet_wrap(~ site_name, nrow = 3) + \n  xlab(\"Day of year\") + ylab(\"ln 7-day mean yield\") + labs(color = \"Year\") + theme_bw() + ylim(-5,3.5) +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.9,0.05), legend.justification = c(1,0))\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Explore Long-Term Data</span>"
    ]
  },
  {
    "objectID": "Explore Data/ExploreData.html#exceedance-probability",
    "href": "Explore Data/ExploreData.html#exceedance-probability",
    "title": "3  Explore Long-Term Data",
    "section": "3.4 Exceedance probability",
    "text": "3.4 Exceedance probability\n\n\nCode\nexceedance &lt;- dat_daily_G %&gt;% filter(!is.na(Yield_filled_mm)) %&gt;% \n  mutate(Yield_filled_mm_log = log(Yield_filled_mm)) %&gt;%\n  group_by(station_no, site_name, site_id, basin, region, lat, long, elev_ft, area_sqmi, designation, year) %&gt;% \n  arrange(desc(Yield_filled_mm_log), .by_group = TRUE) %&gt;% \n  mutate(exceedance = 100/length(Yield_filled_mm_log)*1:length(Yield_filled_mm_log)) %&gt;%\n  ungroup()\nexceedance_recent &lt;- exceedance %&gt;% filter(year %in% c(2018:2023))\n\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_Yield_Recent_Exceedance.jpg\", height = 8, width = 9, units = \"in\", res = 500)\nggplot() + \n  geom_line(data = exceedance, aes(x = exceedance, y = Yield_filled_mm_log, group = year), color = \"grey70\", size = 0.25) +\n  geom_line(data = exceedance_recent, aes(x = exceedance, y = Yield_filled_mm_log, group = as.factor(year), color = as.factor(year))) +\n  scale_colour_manual(values = mycols) + \n  geom_text(data = year_range, aes(x = -Inf, y = -Inf, label = yearrange), hjust = -0.1, vjust = -1) +\n  facet_wrap(~ site_name, nrow = 3) + \n  xlab(\"Exceedance probability\") + ylab(\"ln daily mean yield (mm)\") + labs(color = \"Year\") + theme_bw() + ylim(-5,5) +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.9,0.05), legend.justification = c(1,0))\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Explore Long-Term Data</span>"
    ]
  },
  {
    "objectID": "Explore Data/ExploreData.html#dsci",
    "href": "Explore Data/ExploreData.html#dsci",
    "title": "3  Explore Long-Term Data",
    "section": "3.5 DSCI",
    "text": "3.5 DSCI\nView time series of drought severity and coverage index (DSCI), summarized over HUC08 basins. Accessed https://droughtmonitor.unl.edu/DmData/TimeSeries.aspx\n\n\nCode\n# get huc 8 codes\nhuctib &lt;- tibble(site_name = siteinfo$site_name, basin = siteinfo$basin, huc08 = NA)\nfor (i in 1:dim(siteinfo)[1]) {\n  huctib$huc08[i] &lt;- unlist(tibble(get_huc(siteinfo_sp[i,], type = \"huc08\"))[,11])\n  #print(i)\n}\nhuctib &lt;- huctib %&gt;% group_by(basin) %&gt;% summarize(huc08 = unique(huc08)) #%&gt;% filter(basin != \"Piney River\")\n# unique(huctib$huc08)\n\n# bring in drought indices\ndsci &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/dm_export_19800101_20241004.csv\") %&gt;%\n rename(huc08 = HUCID, name = Name, date = MapDate, dsci = DSCI) %&gt;% mutate(date = ymd(date)) %&gt;% left_join(huctib)\n\n# print table\ndsci %&gt;% group_by(basin) %&gt;% summarize(dsci_name = unique(name), huc08 = unique(huc08)) %&gt;% kable(caption = \"HUC08 basin codes for primary EcoDrought basins\")\n\n\n\nHUC08 basin codes for primary EcoDrought basins\n\n\nbasin\ndsci_name\nhuc08\n\n\n\n\nDonner Blitzen\nDonner und Blitzen\n17120003\n\n\nFlathead\nNorth Fork Flathead\n17010206\n\n\nPaine Run\nSouth Fork Shenandoah\n02070005\n\n\nPiney River\nRapidan-Upper Rappahannock\n02080103\n\n\nShields River\nShields\n10070003\n\n\nSnake River\nSnake Headwaters\n17040101\n\n\nStaunton River\nRapidan-Upper Rappahannock\n02080103\n\n\nWest Brook\nMiddle Connecticut\n01080201\n\n\n\n\n\n\n\nCode\n# calculate monthly means\ndsci_monthly &lt;- dsci %&gt;% \n  mutate(monthyear = as_date(paste(format_ISO8601(date, precision = \"ym\"), \"-01\", sep = \"\"))) %&gt;% \n  mutate(year = year(monthyear), month = month(monthyear)) %&gt;%\n  group_by(huc08, basin, year, month, monthyear) %&gt;% \n  summarize(dsci_monthly_1 = mean(dsci)) %&gt;% \n  ungroup() %&gt;%\n  group_by(huc08, basin) %&gt;%\n  mutate(dsci_monthly_2 = rollapply(dsci_monthly_1, FUN = mean, width = 2, align = \"right\", fill = NA),\n         dsci_monthly_3 = rollapply(dsci_monthly_1, FUN = mean, width = 3, align = \"right\", fill = NA),\n         dsci_monthly_4 = rollapply(dsci_monthly_1, FUN = mean, width = 4, align = \"right\", fill = NA),\n         dsci_monthly_5 = rollapply(dsci_monthly_1, FUN = mean, width = 5, align = \"right\", fill = NA),\n         dsci_monthly_6 = rollapply(dsci_monthly_1, FUN = mean, width = 6, align = \"right\", fill = NA),\n         dsci_monthly_7 = rollapply(dsci_monthly_1, FUN = mean, width = 7, align = \"right\", fill = NA),\n         dsci_monthly_8 = rollapply(dsci_monthly_1, FUN = mean, width = 8, align = \"right\", fill = NA),\n         dsci_monthly_9 = rollapply(dsci_monthly_1, FUN = mean, width = 9, align = \"right\", fill = NA),\n         dsci_monthly_10 = rollapply(dsci_monthly_1, FUN = mean, width = 10, align = \"right\", fill = NA),\n         dsci_monthly_11 = rollapply(dsci_monthly_1, FUN = mean, width = 11, align = \"right\", fill = NA),\n         dsci_monthly_12 = rollapply(dsci_monthly_1, FUN = mean, width = 12, align = \"right\", fill = NA),\n         dsci_monthly_13 = rollapply(dsci_monthly_1, FUN = mean, width = 13, align = \"right\", fill = NA),\n         dsci_monthly_14 = rollapply(dsci_monthly_1, FUN = mean, width = 14, align = \"right\", fill = NA),\n         dsci_monthly_15 = rollapply(dsci_monthly_1, FUN = mean, width = 15, align = \"right\", fill = NA),\n         dsci_monthly_16 = rollapply(dsci_monthly_1, FUN = mean, width = 16, align = \"right\", fill = NA),\n         dsci_monthly_17 = rollapply(dsci_monthly_1, FUN = mean, width = 17, align = \"right\", fill = NA),\n         dsci_monthly_18 = rollapply(dsci_monthly_1, FUN = mean, width = 18, align = \"right\", fill = NA),\n         dsci_monthly_19 = rollapply(dsci_monthly_1, FUN = mean, width = 19, align = \"right\", fill = NA),\n         dsci_monthly_20 = rollapply(dsci_monthly_1, FUN = mean, width = 20, align = \"right\", fill = NA),\n         dsci_monthly_21 = rollapply(dsci_monthly_1, FUN = mean, width = 21, align = \"right\", fill = NA),\n         dsci_monthly_22 = rollapply(dsci_monthly_1, FUN = mean, width = 22, align = \"right\", fill = NA),\n         dsci_monthly_23 = rollapply(dsci_monthly_1, FUN = mean, width = 23, align = \"right\", fill = NA),\n         dsci_monthly_24 = rollapply(dsci_monthly_1, FUN = mean, width = 24, align = \"right\", fill = NA),) %&gt;%\n  ungroup()\n\n# plot time series\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_DSCI_1-6-12.jpg\", height = 8, width = 9, units = \"in\", res = 500)\ndsci_monthly %&gt;% ggplot() + \n  geom_line(aes(x = monthyear, y = dsci_monthly_1), color = \"grey50\") + \n  geom_line(aes(x = monthyear, y = dsci_monthly_6), color = mycols[1]) + \n  geom_line(aes(x = monthyear, y = dsci_monthly_12), color = mycols[2]) + \n  facet_wrap(~ basin) + \n  xlab(\"\") + ylab(\"Drought severity and coverage index (DSCI): 1-, 6-, and 12-month\") + theme_bw() + \n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Explore Long-Term Data</span>"
    ]
  },
  {
    "objectID": "Explore Data/ExploreData.html#spi",
    "href": "Explore Data/ExploreData.html#spi",
    "title": "3  Explore Long-Term Data",
    "section": "3.6 SPI",
    "text": "3.6 SPI\nCalculate standardized precipiation index (SPI) for EcoDrought basins at multiple time scales (1-24 months). View time series data.\n\n\nCode\n# combine and calculate monthly totals\nclimdf_monthly &lt;- do.call(rbind, climlist) %&gt;% left_join(siteinfo_big) %&gt;% mutate(year = year(date), month = month(date)) %&gt;%\n  group_by(station_no, site_name, site_id, basin, region, lat, long, elev_ft, area_sqmi, designation, year, month) %&gt;%\n  summarize(precip_mmmonth = sum(precip_mmday)) %&gt;%\n  ungroup() %&gt;%\n  mutate(date = date(paste(year, month, \"01\", sep = \"-\")))\n\n# calculate SPI at various time scales\nspi_list &lt;- list()\nfor (i in 1:dim(siteinfo_big)[1]) {\n  d &lt;- climdf_monthly %&gt;% filter(site_name == siteinfo_big$site_name[i])\n  for (j in 1:24) {\n    myspi &lt;- spi(unlist(d %&gt;% select(precip_mmmonth)), scale = j)\n    myspi &lt;- myspi$fitted\n    myspi[is.infinite(myspi)] &lt;- NA\n    d[,paste(\"spi\", j, sep = \"_\")] &lt;- myspi\n  }\n  spi_list[[i]] &lt;- d\n  #print(i)\n}\n\n\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 1. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 2. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 3. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 4. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 5. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 6. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 7. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 8. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 9. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 10. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 11. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 12. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 13. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 14. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 15. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 16. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 17. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 18. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 19. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 20. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 21. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 22. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 23. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n[1] \"Calculating the Standardized Precipitation Evapotranspiration Index (SPEI) at a time scale of 24. Using kernel type 'rectangular', with 0 shift. Fitting the data to a Gamma distribution. Using the ub-pwm parameter fitting method. Checking for missing values (`NA`): all the data must be complete. Using the whole time series as reference period. Input type is vector. No time information provided, assuming a monthly time series.\"\n\n\nCode\nspi_monthly &lt;- do.call(rbind, spi_list)\n# view(spi_monthly)\n\n# spi_monthly %&gt;% filter(site_id == \"SRL\") %&gt;% ggplot() + geom_line(aes(x = date, y = spi_1))\n# spi_monthly %&gt;% filter(site_id == \"SRL\") %&gt;% ggplot() + geom_line(aes(x = date, y = spi_3))\n# spi_monthly %&gt;% filter(site_id == \"SRL\") %&gt;% ggplot() + geom_line(aes(x = date, y = spi_6))\n# spi_monthly %&gt;% filter(site_id == \"SRL\") %&gt;% ggplot() + geom_line(aes(x = date, y = spi_12))\n# spi_monthly %&gt;% filter(site_id == \"SRL\") %&gt;% ggplot() + geom_line(aes(x = date, y = spi_24))\n\n\n\n\nCode\n# jpeg(\"./Explore Data/Long Term Plots/ClimaticContext_SPI_1-6-12.jpg\", height = 8, width = 9, units = \"in\", res = 500)\nspi_monthly %&gt;% ggplot() + \n  geom_line(aes(x = date, y = spi_1), color = \"grey50\") + \n  geom_line(aes(x = date, y = spi_6), color = mycols[1]) + \n  geom_line(aes(x = date, y = spi_12), color = mycols[2]) +\n  geom_line(aes(x = date, y = spi_24), color = mycols[3]) +\n  facet_wrap(~ basin) + \n  xlab(\"\") + ylab(\"Standardized precipitation index (SPI): 1-, 6-, 12-, and 24-month\") + theme_bw() + \n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\n# dev.off()",
    "crumbs": [
      "Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Explore Long-Term Data</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgStoryPlots.html",
    "href": "Big G Little g/GgStoryPlots.html",
    "title": "4  G-g Story Plots",
    "section": "",
    "text": "4.1 Site info and daily data\nPurpose: build visual story plots for each basin and climate year\nNotes:\nView map of sites\nCode\n# site information and locations\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\nLoad and view data structure\nCode\n# flow/yield (and temp) data \ndat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\") %&gt;% filter(!site_name %in% c(\"Wounded Buck Creek\"))\n\n# add water/climate year variables\ndat &lt;- add_date_variables(dat, dates = date, water_year_start = 4)\n\n# calculate completeness by site and water year\ncomplete &lt;- dat %&gt;% group_by(site_name, designation, WaterYear) %&gt;% summarize(completeness = sum(!is.na(Yield_filled_mm_7))/365)\ndat &lt;- dat %&gt;% left_join(complete)\nstr(dat)\n\n\ntibble [231,881 × 33] (S3: tbl_df/tbl/data.frame)\n $ station_no          : chr [1:231881] NA NA NA NA ...\n $ site_name           : chr [1:231881] \"BigCreekLower\" \"BigCreekLower\" \"BigCreekLower\" \"BigCreekLower\" ...\n $ site_id             : chr [1:231881] \"BIG_001\" \"BIG_001\" \"BIG_001\" \"BIG_001\" ...\n $ basin               : chr [1:231881] \"Flathead\" \"Flathead\" \"Flathead\" \"Flathead\" ...\n $ subbasin            : chr [1:231881] \"Big Creek\" \"Big Creek\" \"Big Creek\" \"Big Creek\" ...\n $ region              : chr [1:231881] \"Flat\" \"Flat\" \"Flat\" \"Flat\" ...\n $ lat                 : num [1:231881] 48.6 48.6 48.6 48.6 48.6 ...\n $ long                : num [1:231881] -114 -114 -114 -114 -114 ...\n $ elev_ft             : num [1:231881] 3429 3429 3429 3429 3429 ...\n $ area_sqmi           : num [1:231881] 81.2 81.2 81.2 81.2 81.2 ...\n $ designation         : chr [1:231881] \"little\" \"little\" \"little\" \"little\" ...\n $ date                : Date[1:231881], format: \"2017-07-28\" \"2017-07-29\" ...\n $ disch_reli          : num [1:231881] 1 1 1 1 1 1 1 1 1 1 ...\n $ temp_reli           : num [1:231881] NA NA NA NA NA NA NA NA NA NA ...\n $ flow_mean           : num [1:231881] 81.4 76.5 77.6 92.1 98.1 ...\n $ tempc_mean          : num [1:231881] NA NA NA NA NA NA NA NA NA NA ...\n $ flow_mean_filled    : num [1:231881] 81.4 76.5 77.6 92.1 98.1 ...\n $ flow_mean_cms       : num [1:231881] 2.3 2.17 2.2 2.61 2.78 ...\n $ flow_mean_filled_cms: num [1:231881] 2.3 2.17 2.2 2.61 2.78 ...\n $ area_sqkm           : num [1:231881] 210 210 210 210 210 ...\n $ Yield_mm            : num [1:231881] 0.946 0.89 0.902 1.071 1.141 ...\n $ Yield_filled_mm     : num [1:231881] 0.946 0.89 0.902 1.071 1.141 ...\n $ flow_mean_7         : num [1:231881] NA NA NA 91.3 94.4 ...\n $ flow_mean_filled_7  : num [1:231881] NA NA NA 91.3 94.4 ...\n $ tempc_mean_7        : num [1:231881] NA NA NA NA NA NA NA NA NA NA ...\n $ Yield_mm_7          : num [1:231881] NA NA NA 1.06 1.1 ...\n $ Yield_filled_mm_7   : num [1:231881] NA NA NA 1.06 1.1 ...\n $ CalendarYear        : num [1:231881] 2017 2017 2017 2017 2017 ...\n $ Month               : num [1:231881] 7 7 7 7 8 8 8 8 8 8 ...\n $ MonthName           : Factor w/ 12 levels \"Apr\",\"May\",\"Jun\",..: 4 4 4 4 5 5 5 5 5 5 ...\n $ WaterYear           : num [1:231881] 2018 2018 2018 2018 2018 ...\n $ DayofYear           : num [1:231881] 119 120 121 122 123 124 125 126 127 128 ...\n $ completeness        : num [1:231881] 0.268 0.268 0.268 0.268 0.268 ...\nView little and medium g time series data (yield), by basin and site\nCode\nmysubbasins &lt;- unique(dat$subbasin)[-c(4,7,13)]\nmyplots &lt;- list()\nfor (i in 1:length(mysubbasins)) {\n  myplots[[i]] &lt;- dat %&gt;% filter(designation %in% c(\"little\", \"medium\"), subbasin == mysubbasins[i]) %&gt;% ggplot() + geom_line(aes(x = date, y = log(Yield_filled_mm_7))) + facet_wrap(~site_name)\n}\nView little and medium g time series data (yield), by basin. Use the handles below the x-axis to change the time frame.\nCode\nmysubbasins &lt;- unique(dat$subbasin)[-c(4,7,13)]\nmyplots &lt;- list()\nfor (i in 1:length(mysubbasins)) {\n  myplots[[i]] &lt;- dat %&gt;% filter(designation %in% c(\"little\", \"medium\"), subbasin == mysubbasins[i]) %&gt;% mutate(logYield = log(Yield_filled_mm_7)) %&gt;% select(date, site_name, logYield) %&gt;% spread(key = site_name, value = logYield) %&gt;% dygraph() %&gt;% dyRangeSelector() %&gt;% dyAxis(\"y\", label = \"ln(Yield, mm)\")\n}",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>G-g Story Plots</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgStoryPlots.html#site-info-and-daily-data",
    "href": "Big G Little g/GgStoryPlots.html#site-info-and-daily-data",
    "title": "4  G-g Story Plots",
    "section": "",
    "text": "Big CreekCoal CreekMcGee CreekWest BrookPaine RunStaunton RiverDuck CreekShields RiverSnake RiverDonner Blitzen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBig CreekCoal CreekMcGee CreekWest BrookPaine RunStaunton RiverDuck CreekShields RiverSnake RiverDonner Blitzen",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>G-g Story Plots</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgStoryPlots.html#create-plotting-functions",
    "href": "Big G Little g/GgStoryPlots.html#create-plotting-functions",
    "title": "4  G-g Story Plots",
    "section": "4.2 Create plotting functions",
    "text": "4.2 Create plotting functions\nWrite functions to generate residual time series/scatter plot\n\n\nCode\nresidualplots &lt;- function(mybasin, CY, little, big) {\n  # essential elements\n  dat_basin &lt;- dat %&gt;% filter(basin == mybasin)\n  \n  # create residual data frame\n  delta_dat &lt;- dat_basin %&gt;% select(site_name, site_id, basin, region, designation, date, WaterYear, Yield_mm_mean_7) %&gt;% filter(site_name %in% little, WaterYear == CY) %&gt;% \n    left_join(dat_basin %&gt;% select(basin, site_name, date, WaterYear, Yield_mm_mean_7) %&gt;% filter(site_name == big, WaterYear == CY) %&gt;% rename(bigyield = Yield_mm_mean_7) %&gt;% select(-site_name)) %&gt;% \n    mutate(delta_yield = log(Yield_mm_mean_7) - log(bigyield), site_name = factor(site_name, levels = little)) %&gt;% \n    group_by(site_name) %&gt;% mutate(cum_resid = cumsum(coalesce(delta_yield, 0)) + delta_yield*0) \n  \n  # base plot\n  p1 &lt;- delta_dat %&gt;% \n    filter(WaterYear == CY) %&gt;%\n    group_by(site_name) %&gt;%\n    mutate(month = month(date), doy = 1:n()) %&gt;% \n    ungroup() %&gt;%\n    ggplot(aes(x = log(bigyield), y = log(Yield_mm_mean_7), color = doy)) +\n    geom_abline(intercept = 0, slope = 1, linetype = \"dashed\") +\n    geom_point(aes(group = doy)) +\n    geom_path() +\n    scale_color_gradient2(midpoint = 182, low = \"orange\", mid = \"purple3\", high = \"orange\") +\n    facet_wrap(~site_name) +\n    xlab(\"Big G ln(Yield)\") + ylab(\"Little G ln(Yield)\") + labs(color = \"Days from April 1\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) \n  \n  # animated \n  # p1_anim &lt;- p1 + transition_reveal(along = doy)\n  \n  # write out - static\n  jpeg(paste(\"Big G Little g/Compare Time Series/BigGLittleG_ScatterByTime\", mybasin, \"_\", CY, \".jpg\", sep = \"\"), height = 10, width = 12, units = \"in\", res = 500)\n  print(p1)\n  dev.off()\n  \n  # write out - animated\n  # animate(p1_anim, renderer = gifski_renderer(), height = 10, width = 12, units = \"in\", res = 500)\n  # anim_save(paste(\"Big G Little g/Compare Time Series/BigGLittleG_ScatterByTime_Animated_\", mybasin, \"_\", CY, \".gif\", sep = \"\"))\n  \n  # residual time series\n  jpeg(paste(\"Big G Little g/Compare Time Series/BigGLittleG_YieldResiduals_TimeSeries_\", mybasin, \"_\", CY, \".jpg\", sep = \"\"), height = 4, width = 6, units = \"in\", res = 500)\n  print(ggplot(data = delta_dat) + \n    geom_line(aes(x = date, y = delta_yield, group = site_name, color = site_name)) + \n    geom_hline(aes(yintercept = 0), linetype = \"dashed\") +\n    xlab(\"\") + ylab(\"ln(Yield) residuals (difference from Big G)\") + labs(color = \"Little g\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))\n  dev.off()\n  \n  \n  # plot little g cumulative residuals - difference from Big G by site\n  jpeg(paste(\"Big G Little g/Compare Time Series/BigGLittleG_YieldResiduals_Cumulative_TimeSeries_\", mybasin, \"_\", CY, \".jpg\", sep = \"\"), height = 4, width = 6, units = \"in\", res = 500)\n  print(delta_dat %&gt;% \n    ggplot() + \n    geom_line(aes(x = date, y = cum_resid, group = site_name, color = site_name)) + \n    geom_hline(aes(yintercept = 0), linetype = \"dashed\") +\n    xlab(\"\") + ylab(\"ln(Yield) cumulative residuals \") + labs(color = \"Little g\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))\n  dev.off()\n}\n\n\nWrite function to generate flow story plot\n\n\nCode\nbigplotfun &lt;- function(mybasin, mysubbasin, CY, little, big, super, supergyears, mymap, evalyears) {\n  #### essential elements\n  dat_basin &lt;- dat %&gt;% filter(basin == mybasin)\n  months &lt;- c(\"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\")\n  fudge &lt;- 0.01 # add small value to deal with 0 flow on log scale\n\n  # clean data...drop all dates that have missing data at any site\n  dat_basin_cy_clean &lt;- dat %&gt;% \n    filter(site_name %in% c(little, big), WaterYear == CY) %&gt;% \n    select(date, site_name, Yield_filled_mm_7) %&gt;%\n    spread(key = site_name, value = Yield_filled_mm_7) %&gt;% \n    drop_na() %&gt;%\n    gather(key = site_name, value = Yield_filled_mm_7, 2:ncol(.))\n  dat_basin_cy_clean &lt;- fill_missing_dates(dat_basin_cy_clean, dates = \"date\", groups = \"site_name\", pad_ends = FALSE)\n  \n  # get among-year yield min/max for y-axis limits\n  dat_basin_sub &lt;- dat %&gt;% \n    filter(site_name %in% c(little, big), WaterYear %in% evalyears) %&gt;% \n    select(date, WaterYear, site_name, Yield_filled_mm_7) %&gt;%\n    spread(key = site_name, value = Yield_filled_mm_7) %&gt;% \n    drop_na() %&gt;%\n    gather(key = site_name, value = Yield_filled_mm_7, 3:ncol(.)) %&gt;%\n    filter(!is.na(Yield_filled_mm_7)) %&gt;% \n    mutate(Yield_filled_mm_7_log = log(Yield_filled_mm_7+fudge)) \n  yield_lim &lt;- range(dat_basin_sub$Yield_filled_mm_7_log)\n  \n  \n  # clean months\n  cleanmonths &lt;- unlist(dat_basin_cy_clean %&gt;% filter(site_name == little[1]) %&gt;% drop_na() %&gt;% left_join(dat_basin %&gt;% select(date, site_name, MonthName, Month)) %&gt;% group_by(MonthName) %&gt;% summarize(ndays = n()) %&gt;% filter(ndays &gt;= 20) %&gt;% select(MonthName))\n  \n  #### MAP\n  p1 &lt;- mymap\n  # print(\"p1\")\n  \n  #### HYDROGRAPHS IN YIELD\n  p2 &lt;- ggplot() + \n    geom_line(data = dat_basin_cy_clean %&gt;% filter(site_name %in% little) %&gt;% mutate(site_name = factor(site_name, levels = little)), aes(x = date, y = log(Yield_filled_mm_7+fudge), group = site_name, color = site_name)) +\n    geom_line(data = dat_basin_cy_clean %&gt;% filter(site_name == big), aes(x = date, y = log(Yield_filled_mm_7+fudge)), color = \"black\", size = 1.25) +\n    xlab(\"Date\") + ylab(\"ln(Yield, mm)\") + theme_bw() + ylim(yield_lim) + \n    scale_x_date(limits = as.Date(c(paste(CY-1, '-04-01', sep = \"\"), paste(CY, '-04-01', sep = \"\")))) +\n    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\")\n  # print(\"p2\")\n  \n  \n  #### TOTAL ANNUAL YIELD\n  # get total yield per year and convert to percentiles\n  yeartotals &lt;- dat_basin %&gt;% \n    filter(site_name == super, WaterYear %in% supergyears) %&gt;% \n    group_by(WaterYear) %&gt;% \n    summarize(totalyield = sum(Yield_filled_mm, na.rm = TRUE)) %&gt;%\n    filter(!is.na(totalyield)) %&gt;%\n    mutate(percentile = percent_rank(totalyield))\n  p3 &lt;- ggplot() + \n    geom_line(data = yeartotals, aes(x = WaterYear, y = totalyield), color = \"grey40\") + \n    geom_point(data = yeartotals %&gt;% filter(WaterYear == CY), aes(x = WaterYear, y = totalyield)) +\n    xlab(\"Climate year\") + ylab(\"Total annual yield (mm)\") + theme_bw() + \n    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # print(\"p3\")\n  \n  \n  #### EXCEEDANCE PROBABILITY - SUPER G PERIOD OF RECORD\n  exceedance &lt;- dat_basin %&gt;% \n    filter(site_name %in% c(little, big, super)) %&gt;%\n    filter(!is.na(Yield_filled_mm_7)) %&gt;% \n    mutate(Yield_filled_mm_7_log = log(Yield_filled_mm_7)) %&gt;%\n    group_by(site_name, WaterYear) %&gt;% \n    arrange(desc(Yield_filled_mm_7_log), .by_group = TRUE) %&gt;% \n    mutate(exceedance = 100/length(Yield_filled_mm_7_log)*1:length(Yield_filled_mm_7_log)) %&gt;%\n    ungroup()\n  p4 &lt;- ggplot() + \n    geom_line(data = exceedance %&gt;% filter(site_name == super, WaterYear %in% supergyears), aes(x = exceedance, y = Yield_filled_mm_7_log, group = WaterYear, color = WaterYear), size = 0.25) +\n    geom_line(data = exceedance %&gt;% filter(site_name == super, WaterYear == CY), aes(x = exceedance, y = Yield_filled_mm_7_log), color = \"black\", size = 1.25) +\n    geom_text(aes(x = 50, y = Inf, label = paste(\"Super G: \", super, \" (\", min(supergyears), \"-\", max(supergyears), \")\", \"\\nCurrent year: \", CY, \" (\", round(yeartotals$percentile[yeartotals$WaterYear == CY]*100), \"th perc.)\", sep = \"\")), vjust = 1.2) +\n    scale_color_continuous(trans = \"reverse\") +\n    xlab(\"Exceedance probability\") + ylab(\"ln(Yield, mm)\") + labs(color = \"Climate year\") + theme_bw() + \n    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.15,0.23), \n          legend.text = element_text(size = 9), legend.title = element_text(size = 9), legend.key.height = unit(0.4, \"cm\"))\n  # print(\"p4\")\n  \n  \n  #### CUMULATIVE YIELD RESIDUALS\n  # get range of residuals among years\n  dat_basin_res &lt;- dat_basin_sub %&gt;% \n    filter(site_name %in% little, WaterYear %in% evalyears) %&gt;% select(site_name, date, WaterYear, Yield_filled_mm_7) %&gt;%\n    left_join(dat %&gt;% filter(site_name == big) %&gt;% rename(bigyield = Yield_filled_mm_7) %&gt;% select(date, WaterYear, bigyield)) %&gt;% \n    mutate(delta_yield = log(Yield_filled_mm_7+fudge) - log(bigyield+fudge), site_name = factor(site_name, levels = little)) %&gt;% \n    group_by(site_name, WaterYear) %&gt;% mutate(cum_resid = cumsum(coalesce(delta_yield, 0)) + delta_yield*0) \n  res_lim &lt;- range(dat_basin_res$cum_resid, na.rm = TRUE)\n  p5 &lt;- dat_basin_cy_clean %&gt;% filter(site_name %in% little) %&gt;% \n    left_join(dat_basin_cy_clean %&gt;% filter(site_name == big) %&gt;% rename(bigyield = Yield_filled_mm_7) %&gt;% select(-site_name)) %&gt;% \n    mutate(delta_yield = log(Yield_filled_mm_7+fudge) - log(bigyield+fudge), site_name = factor(site_name, levels = little)) %&gt;% \n    group_by(site_name) %&gt;% mutate(cum_resid = cumsum(coalesce(delta_yield, 0)) + delta_yield*0) %&gt;%\n    ggplot() + \n    geom_line(aes(x = date, y = cum_resid, group = site_name, color = site_name)) + \n    geom_hline(aes(yintercept = 0), linetype = \"dashed\") +\n    xlab(\"Date\") + ylab(\"ln(Yield) cumulative residuals \") + ylim(res_lim) +\n    scale_x_date(limits = as.Date(c(paste(CY-1, '-04-01', sep = \"\"), paste(CY, '-04-01', sep = \"\")))) +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\")\n  # print(\"p5\")\n\n  \n  #### EXCEEDANCE PROBABILITY - BIG G/LITTLE G CURRENT YEAR\n  exceedance &lt;- dat_basin_cy_clean %&gt;% \n    filter(site_name %in% c(little, big)) %&gt;%\n    filter(!is.na(Yield_filled_mm_7)) %&gt;% \n    mutate(Yield_filled_mm_7_log = log(Yield_filled_mm_7+fudge)) %&gt;%\n    group_by(site_name) %&gt;% \n    arrange(desc(Yield_filled_mm_7_log), .by_group = TRUE) %&gt;% \n    mutate(exceedance = 100/length(Yield_filled_mm_7_log)*1:length(Yield_filled_mm_7_log)) %&gt;%\n    ungroup()\n  p6 &lt;- ggplot() + \n    geom_line(data = exceedance %&gt;% filter(site_name %in% little) %&gt;% mutate(site_name = factor(site_name, levels = little)), aes(x = exceedance, y = Yield_filled_mm_7_log, group = site_name, color = site_name)) +\n    geom_line(data = exceedance %&gt;% filter(site_name == big), aes(x = exceedance, y = Yield_filled_mm_7_log), color = \"black\", size = 1.25) +\n    xlab(\"Exceedance probability\") + ylab(\"ln(Yield, mm)\") + labs(color = \"Little g\") + theme_bw() + ylim(yield_lim) + \n    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\")\n  # print(\"p6\")\n  \n  \n  #### EXCEEDANCE PROBABILITY MONTHLY\n  exceedance_monthly &lt;- dat_basin_cy_clean %&gt;% \n    filter(site_name %in% c(little, big)) %&gt;%\n    filter(!is.na(Yield_filled_mm_7)) %&gt;% \n    left_join(dat_basin %&gt;% select(date, site_name, MonthName, Month)) %&gt;%\n    mutate(Yield_filled_mm_7_log = log(Yield_filled_mm_7+fudge),\n           site_name = factor(site_name, levels = c(little, big)),\n           MonthName = factor(MonthName, levels = months)) %&gt;%\n    group_by(site_name, Month) %&gt;% \n    arrange(desc(Yield_filled_mm_7_log), .by_group = TRUE) %&gt;% \n    mutate(exceedance = 100/length(Yield_filled_mm_7_log)*1:length(Yield_filled_mm_7_log)) %&gt;%\n    ungroup()\n  exceedance_monthly2 &lt;- exceedance_monthly %&gt;% mutate(Yield_filled_mm_7_log = ifelse(MonthName %in% cleanmonths, Yield_filled_mm_7_log, NA))\n  p7 &lt;- ggplot() + \n    geom_line(data = exceedance_monthly2 %&gt;% filter(site_name %in% little), aes(x = exceedance, y = Yield_filled_mm_7_log, group = site_name, color = site_name)) +\n    geom_line(data = exceedance_monthly2 %&gt;% filter(site_name == big), aes(x = exceedance, y = Yield_filled_mm_7_log), color = \"black\", size = 1.25) +\n    facet_wrap(~ factor(MonthName), nrow = 2) + \n    xlab(\"Exceedance probability\") + ylab(\"ln(Yield, mm)\") + labs(color = \"Little g\") + theme_bw() +  ylim(yield_lim) + \n    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\")\n  # print(\"p7\")\n  \n  \n  #### ANNUAL BIG-LITTLE DIFFERENCE\n  mypvals &lt;- tibble(type =  rep(NA, times = length(little)), \n                    month = rep(NA, times = length(little)),\n                    site_name = rep(NA, times = length(little)), \n                    stat = rep(NA, times = length(little)),\n                    pval = rep(NA, times = length(little)))\n  for (i in 1:length(little)) {\n    mytest &lt;- ks.test(exceedance$Yield_filled_mm_7_log[exceedance$site_name == big],\n                      exceedance$Yield_filled_mm_7_log[exceedance$site_name == little[i]], exact = TRUE)\n    mypvals$type &lt;- \"annual\"\n    mypvals$month &lt;- 0\n    mypvals$site_name[i] &lt;- little[i]\n    mypvals$stat[i] &lt;- mytest$statistic\n    mypvals$pval[i] &lt;- mytest$p.value\n  }\n  p8 &lt;- mypvals %&gt;% \n    mutate(site_name = factor(site_name, levels = little)) %&gt;% \n    ggplot() + \n    geom_boxplot(aes(x = month, y = pval, group = month), fill = \"grey90\", outlier.shape = NA) +\n    geom_point(aes(x = jitter(month, factor = 10), y = pval, color = site_name), size = 2) +\n    ylim(0,1) + geom_hline(yintercept = 0.05, linetype = \"dashed\") +\n    xlab(\"\") + ylab(\"Kolmogorov-Smirnov test p-value\") + scale_x_continuous(labels = \"Annual\", breaks = 0) +\n    theme_bw() + theme(axis.title.x = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\")\n  # print(\"p8\")\n  \n  \n  #### MONTHLY BIG-LITTLE DIFFERENCE\n  mypvals_monthly_list &lt;- list()\n  for (i in 1:length(little)) {\n    mypvals_monthly &lt;- tibble(type =  rep(NA, times = 12), \n                              month = rep(NA, times = 12),\n                              site_name = rep(NA, times = 12), \n                              stat = rep(NA, times = 12),\n                              pval = rep(NA, times = 12))\n    for (j in 1:12) {\n      big_exc &lt;- exceedance_monthly$Yield_filled_mm_7_log[exceedance_monthly$site_name == big & exceedance_monthly$MonthName == months[j]]\n      lit_exc &lt;- exceedance_monthly$Yield_filled_mm_7_log[exceedance_monthly$site_name == little[i] & exceedance_monthly$MonthName == months[j]]\n      if(length(lit_exc) &lt; 20) {\n        mypvals_monthly$site_name[j] &lt;- little[i]\n        mypvals_monthly$type &lt;- \"monthly\"\n        mypvals_monthly$month[j] &lt;- months[j]\n        mypvals_monthly$stat[j] &lt;- NA\n        mypvals_monthly$pval[j] &lt;- NA\n      } else {\n        mytest &lt;- ks.test(big_exc, lit_exc, exact = TRUE)\n        mypvals_monthly$site_name[j] &lt;- little[i]\n        mypvals_monthly$type &lt;- \"monthly\"\n        mypvals_monthly$month[j] &lt;- months[j]\n        mypvals_monthly$stat[j] &lt;- mytest$statistic\n        mypvals_monthly$pval[j] &lt;- mytest$p.value\n      }\n    }\n    mypvals_monthly_list[[i]] &lt;- mypvals_monthly\n  }\n  mypvals_monthly &lt;- do.call(rbind, mypvals_monthly_list) %&gt;% \n    mutate(site_name = factor(site_name, levels = little),\n           month = factor(month, levels = months), \n           month_num = as.numeric(month)) \n  # compute the loess\n  # dum &lt;- rbind(mypvals_monthly %&gt;% mutate(month_num = month_num-12),\n  #              mypvals_monthly,\n  #              mypvals_monthly %&gt;% mutate(month_num = month_num+12)) \n  # mylo &lt;- loess(pval ~ month_num, dum, span = 0.25)\n  # plot(pval ~ month_num, dum)\n  # j &lt;- order(dum$month_num)[(dim(mypvals_monthly)[1]+1):(dim(mypvals_monthly)[1]+dim(mypvals_monthly)[1])]\n  # lines(dum$month_num[j], mylo$fitted[j], col = \"red\")\n  # the plot\n  p9 &lt;- mypvals_monthly %&gt;% \n    ggplot() + \n    geom_boxplot(aes(x = month, y = pval, group = month), fill = \"grey90\", outlier.shape = NA) +\n    # geom_line(aes(x = dum$month_num[j], y = mylo$fitted[j]), linewidth = 1.25) +\n    geom_smooth(aes(x = month_num, y = pval), linewidth = 1.25, color = \"black\", se = FALSE) +\n    geom_point(aes(x = jitter(month_num), y = pval, color = site_name), size = 2) +\n    ylim(0,1) + geom_hline(yintercept = (0.05), linetype = \"dashed\") +\n    xlab(\"\") + ylab(\"\") + \n    labs(color = \"\") + theme_bw() + \n    theme(axis.title.x = element_blank(), axis.text.y = element_blank(), panel.grid.minor = element_blank())\n  # print(\"p9\")\n  \n  \n  #### BIG PLOT\n  bigp &lt;- ggarrange(ggarrange(mymap, ggarrange(NA, p2, nrow = 2, heights = c(0.2,1))),\n                    ggarrange(p3, p4), \n                    ggarrange(p5, p6),\n                    p7, \n                    ggarrange(p8, p9, widths = c(0.13, 0.85)), nrow = 5, heights = c(1.2,0.9,0.9,1.2,0.9))\n  # print(\"big plot!\")\n  # write out\n  # jpeg(paste(\"Big G Little g/Compare Distributions/BigGLittleG_BigPlot_\", mybasin, \"_\", mysubbasin, \"_\", CY, \".jpg\", sep = \"\"), height = 18, width = 10, units = \"in\", res = 500)\n  # annotate_figure(bigp, fig.lab = \"The West Brook, CY 2021\", fig.lab.pos = \"top.right\", fig.lab.size = 24)\n  print(annotate_figure(bigp, top = text_grob(paste(mybasin, \", CY \", CY, sep = \"\"), x = 0.75, y = -0.5, just = \"centre\", size = 24)))\n  # dev.off()\n}",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>G-g Story Plots</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgStoryPlots.html#create-map-objects",
    "href": "Big G Little g/GgStoryPlots.html#create-map-objects",
    "title": "4  G-g Story Plots",
    "section": "4.3 Create map objects",
    "text": "4.3 Create map objects\n\nWest BrookStaunton RiverPaine RunBig CreekSpread CreekShields RiverDonner-Blitzen",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>G-g Story Plots</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgStoryPlots.html#flow-story-plots",
    "href": "Big G Little g/GgStoryPlots.html#flow-story-plots",
    "title": "4  G-g Story Plots",
    "section": "4.4 Flow story plots",
    "text": "4.4 Flow story plots\nGenerate streamflow story plots by basin and climate year\n\n4.4.1 West Brook\n\n20212022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.2 Staunton River\n\n202120222023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.3 Paine Run\n\n20212022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.4 Big Creek, Flathead\n\n201920202021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.5 Spread Creek, Snake\n\n20222023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.6 Shields River\n\n20202023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.7 Donner-Blitzen\n\n2020202120222023",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>G-g Story Plots</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffKS.html",
    "href": "Big G Little g/GgDiffKS.html",
    "title": "5  G-g Difference (KS)",
    "section": "",
    "text": "5.1 Site info and daily data\nPurpose: Explore effects of monthly/annual water availability on Big-little difference using non-parametric Kolmogorov-Smirnov tests\nCode\n# site information and locations\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\n\n\n\n\n\n\nCode\n# flow/yield (and temp) data \ndat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\") %&gt;%\n  filter(!site_name %in% c(\"WoundedBuckCreek\", \"Brackett Creek\"))\n\n# add water/climate year variables\ndat &lt;- add_date_variables(dat, dates = date, water_year_start = 4)",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>G-g Difference (KS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffKS.html#separate-and-join-g-g",
    "href": "Big G Little g/GgDiffKS.html#separate-and-join-g-g",
    "title": "5  G-g Difference (KS)",
    "section": "5.2 Separate and join G-g",
    "text": "5.2 Separate and join G-g\n\n\nCode\n# pull out big G data\ndat_big &lt;- dat %&gt;% filter(site_name %in% c(\"West Brook NWIS\", \"Paine Run 10\", \"Piney River 10\", \"Staunton River 10\", \"Spread Creek Dam\", \"BigCreekLower\", \"Shields River ab Smith NWIS\", \"Donner Blitzen River nr Frenchglen NWIS\")) \n\n# pull out little G data, assign big G site name\ndat_little &lt;- dat %&gt;% \n  filter(designation %in% c(\"little\", \"medium\"), !subbasin %in% c(\"Coal Creek\", \"McGee Creek\", \"Duck Creek\", \"Flathead\"),\n         !site_name %in% c(\"West Brook NWIS\", \"West Brook 0\", \"Paine Run 10\", \"Piney River 10\", \"Staunton River 10\", \"Spread Creek Dam\", \"Shields River ab Smith NWIS\", \"BigCreekLower\")) %&gt;%\n  mutate(site_name_big = ifelse(subbasin == \"Big Creek\", \"BigCreekLower\",\n                                ifelse(subbasin == \"West Brook\", \"West Brook NWIS\", \n                                       ifelse(subbasin == \"Paine Run\", \"Paine Run 10\", \n                                              ifelse(subbasin == \"Piney River\", \"Piney River 10\",\n                                                     ifelse(subbasin == \"Staunton River\", \"Staunton River 10\",\n                                                            ifelse(subbasin == \"Shields River\", \"Shields River ab Smith NWIS\",\n                                                                   ifelse(subbasin == \"Snake River\", \"Spread Creek Dam\", \"Donner Blitzen River nr Frenchglen NWIS\"))))))))\n\n# Join big-little discharge data\ndat_Gg &lt;- dat_little %&gt;%\n  select(site_name, site_name_big, basin, subbasin, date, Month, MonthName, WaterYear, Yield_filled_mm_7) %&gt;% rename(yield_little = Yield_filled_mm_7) %&gt;%\n  left_join(dat_big %&gt;% select(site_name, date, Yield_filled_mm_7) %&gt;% rename(site_name_big = site_name, yield_big = Yield_filled_mm_7)) %&gt;%\n  drop_na() %&gt;% mutate(MonthName = as.character(MonthName))\n\n# table\ndat_Gg %&gt;% group_by(subbasin) %&gt;% summarize(site_name_big = unique(site_name_big)) %&gt;% kable(caption = \"Big G gage names for each focal sub-basin.\")\n\n\n\nBig G gage names for each focal sub-basin.\n\n\nsubbasin\nsite_name_big\n\n\n\n\nBig Creek\nBigCreekLower\n\n\nDonner Blitzen\nDonner Blitzen River nr Frenchglen NWIS\n\n\nPaine Run\nPaine Run 10\n\n\nShields River\nShields River ab Smith NWIS\n\n\nSnake River\nSpread Creek Dam\n\n\nStaunton River\nStaunton River 10\n\n\nWest Brook\nWest Brook NWIS\n\n\n\n\n\nView unique little g site names\n\n\nCode\nsort(unique(dat_Gg$site_name))\n\n\n [1] \"Avery Brook\"                      \"Avery Broook NWIS\"               \n [3] \"Big Creek NWIS\"                   \"BigCreekMiddle\"                  \n [5] \"BigCreekUpper\"                    \"Buck Creek\"                      \n [7] \"Crandall Creek\"                   \"Deep Creek\"                      \n [9] \"Donner Blitzen ab Fish NWIS\"      \"Donner Blitzen ab Indian NWIS\"   \n[11] \"Donner Blitzen nr Burnt Car NWIS\" \"Dugout Creek\"                    \n[13] \"Dugout Creek NWIS\"                \"Fish Creek\"                      \n[15] \"Grizzly Creek\"                    \"Grouse Creek\"                    \n[17] \"Hallowat Creek NWIS\"              \"HallowattCreekLower\"             \n[19] \"Jimmy Brook\"                      \"LangfordCreekLower\"              \n[21] \"LangfordCreekUpper\"               \"Leidy Creek Mouth\"               \n[23] \"Leidy Creek Mouth NWIS\"           \"Leidy Creek Upper\"               \n[25] \"Lodgepole Creek\"                  \"Mitchell Brook\"                  \n[27] \"NF Spread Creek Lower\"            \"NF Spread Creek Upper\"           \n[29] \"NicolaCreek\"                      \"Obear Brook Lower\"               \n[31] \"Paine Run 01\"                     \"Paine Run 02\"                    \n[33] \"Paine Run 06\"                     \"Paine Run 07\"                    \n[35] \"Paine Run 08\"                     \"Rock Creek\"                      \n[37] \"Sanderson Brook\"                  \"SF Spread Creek Lower\"           \n[39] \"SF Spread Creek Lower NWIS\"       \"SF Spread Creek Upper\"           \n[41] \"Shields River ab Dugout\"          \"SkookoleelCreek\"                 \n[43] \"Staunton River 02\"                \"Staunton River 03\"               \n[45] \"Staunton River 06\"                \"Staunton River 07\"               \n[47] \"Staunton River 09\"                \"WernerCreek\"                     \n[49] \"West Brook Lower\"                 \"West Brook Reservoir\"            \n[51] \"West Brook Upper\"                 \"West Whately Brook\"",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>G-g Difference (KS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffKS.html#compute-gg-difference",
    "href": "Big G Little g/GgDiffKS.html#compute-gg-difference",
    "title": "5  G-g Difference (KS)",
    "section": "5.3 Compute Gg Difference",
    "text": "5.3 Compute Gg Difference\n\n\nCode\nmysites &lt;- unique(dat_Gg$site_name)\nkscompare_list &lt;- list()\nfor (i in 1:length(mysites)) {\n  d &lt;- dat_Gg %&gt;% filter(site_name == mysites[i])\n  yrs &lt;- unique(d$WaterYear)\n  kscompare_list_yr &lt;- list()\n  for(j in 1:length(yrs)) {\n    dy &lt;- d %&gt;% filter(WaterYear == yrs[j])\n    mypvals_monthly &lt;- tibble(site_name = rep(NA, times = 12), \n                              site_name_big = rep(NA, times = 12), \n                              WaterYear = rep(NA, times = 12),\n                              Month = rep(NA, times = 12),\n                              MonthName = rep(NA, times = 12),\n                              days = rep(NA, times = 12),\n                              stat = rep(NA, times = 12),\n                              pval = rep(NA, times = 12))\n    for(k in 1:12) {\n      dym &lt;- dy %&gt;% filter(Month == k)\n      if(dim(dym)[1] &lt; 25) next\n      mytest &lt;- ks.test(dym$yield_little, dym$yield_big, exact = TRUE)\n      mypvals_monthly$site_name[k] &lt;- mysites[i]\n      mypvals_monthly$site_name_big[k] &lt;- unique(dym$site_name_big)\n      mypvals_monthly$WaterYear[k] &lt;- yrs[j]\n      mypvals_monthly$Month[k] &lt;- k\n      mypvals_monthly$MonthName[k] &lt;- unique(dym$MonthName)\n      mypvals_monthly$days[k] &lt;- dim(dym)[1]\n      mypvals_monthly$stat[k] &lt;- mytest$statistic\n      mypvals_monthly$pval[k] &lt;- mytest$p.value\n      }\n    kscompare_list_yr[[j]] &lt;- mypvals_monthly\n    }\n  kscompare_list[[i]] &lt;- do.call(rbind, kscompare_list_yr)\n}\nkscompare &lt;- do.call(rbind, kscompare_list) %&gt;% drop_na()\n\n\nView relationship between KS test statistic and p-value\n\n\nCode\nplot(pval ~ stat, kscompare, xlab = \"KS test statistic\", ylab = \"p-value\")\n\n\n\n\n\n\n\n\n\nView distribution of KS test statistics and p-values\n\n\nCode\nhist(kscompare$stat)\n\n\n\n\n\n\n\n\n\nCode\nhist(kscompare$pval)",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>G-g Difference (KS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffKS.html#calculate-total-yield",
    "href": "Big G Little g/GgDiffKS.html#calculate-total-yield",
    "title": "5  G-g Difference (KS)",
    "section": "5.4 Calculate total yield",
    "text": "5.4 Calculate total yield\n\n\nCode\n# Get total annual and monthly Big G yield and join to KS diffs\n\n# get total annual yield by big G site\ntotyield_annual &lt;- dat_big %&gt;% \n  group_by(site_name, WaterYear, basin, subbasin) %&gt;% \n  summarize(days = n(), yield_annual = sum(Yield_filled_mm, na.rm = TRUE)) %&gt;%\n  filter(!is.na(yield_annual), days &gt;= 360) %&gt;%\n  ungroup() %&gt;%\n  rename(site_name_big = site_name) %&gt;%\n  select(site_name_big, WaterYear, yield_annual) %&gt;%\n  ungroup()\n\n# get total monthly yield by big G site\ntotyield_monthly &lt;- dat_big %&gt;% \n  group_by(site_name, WaterYear, basin, subbasin, Month) %&gt;% \n  summarize(days = n(), yield_monthly = sum(Yield_filled_mm, na.rm = TRUE)) %&gt;%\n  filter(!is.na(yield_monthly), days &gt;= 28) %&gt;%\n  ungroup() %&gt;%\n  rename(site_name_big = site_name) %&gt;%\n  select(site_name_big, WaterYear, Month, yield_monthly) %&gt;%\n  ungroup()",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>G-g Difference (KS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffKS.html#explore-gg-diff-by-water-availability",
    "href": "Big G Little g/GgDiffKS.html#explore-gg-diff-by-water-availability",
    "title": "5  G-g Difference (KS)",
    "section": "5.5 Explore Gg diff by water availability",
    "text": "5.5 Explore Gg diff by water availability\nHypothesis: during wetter periods (months/years) flow regimes become more similar among locations within stream networks (i.e., positive relationship between monthly/annual total yield and KS-test p-value)\nHow might this vary among basins that differ in primary water source (rain vs. snow) and among sites within basins (due to surface vs. subsurface controls on flow)?\n\n\nCode\n# join KS comparison df with annual/monthly water availability\nkscompare &lt;- kscompare %&gt;% left_join(totyield_annual) %&gt;% left_join(totyield_monthly) %&gt;%\n  mutate(MonthName = factor(MonthName, levels = c(\"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\"))) %&gt;%\n  left_join(siteinfo %&gt;% select(site_name, basin))\n\n\n\n5.5.1 Global relationship\nPlot relationship between log(monthly total yield) and log(KS p-value) for all basins, sites, and months combined\n\n\nCode\nkscompare %&gt;% ggplot(aes(x = log(yield_monthly), y = log(pval))) + \n  geom_point(aes(group = MonthName, color = MonthName)) + \n  geom_smooth(method = \"lm\") + geom_abline(slope = 0, intercept = log(0.05), linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n5.5.2 Basin-level effects\n\n\nCode\n# Plot all sites, facet by basin\nkscompare %&gt;% ggplot(aes(x = log(yield_monthly), y = log(pval))) + \n  geom_point(aes(group = MonthName, color = MonthName)) + facet_wrap(~ basin) + \n  geom_smooth(method = \"lm\") + geom_abline(slope = 0, intercept = log(0.05), linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n5.5.3 Basin and site effects\n\n\nCode\nmybasins &lt;- unique(kscompare$basin)\nmyplots &lt;- list()\nfor (i in 1:length(mybasins)) {\n  myplots[[i]] &lt;- kscompare %&gt;% \n    filter(basin == mybasins[i]) %&gt;%\n    ggplot(aes(x = log(yield_monthly), y = log(pval))) + \n    geom_point(aes(group = MonthName, color = MonthName)) + \n    facet_wrap(~ site_name) + \n    geom_smooth(method = \"lm\") + \n    geom_abline(slope = 0, intercept = log(0.05), linetype = \"dashed\")\n}\n\n\n\nBig CreekWest BrookPaine RunStaunton RiverShields RiverSnake RiverDonner Blitzen",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>G-g Difference (KS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffJAGS.html",
    "href": "Big G Little g/GgDiffJAGS.html",
    "title": "6  G-g Difference (JAGS)",
    "section": "",
    "text": "6.1 Data\nPurpose: Model effects of monthly/annual water availability on Big-little difference using JAGS",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>G-g Difference (JAGS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffJAGS.html#data",
    "href": "Big G Little g/GgDiffJAGS.html#data",
    "title": "6  G-g Difference (JAGS)",
    "section": "",
    "text": "6.1.1 Site info and daily data\n\n\nCode\n# site information and locations\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\n\n\n\n\n\n\nCode\n# flow/yield (and temp) data \ndat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\") %&gt;%\n  filter(!site_name %in% c(\"WoundedBuckCreek\", \"Brackett Creek\"))\n\n# add water/climate year variables\ndat &lt;- add_date_variables(dat, dates = date, water_year_start = 4)\n\n\n\n\n6.1.2 Separate and join G-g\n\n\nCode\n# pull out big G data\ndat_big &lt;- dat %&gt;% filter(site_name %in% c(\"West Brook NWIS\", \"Paine Run 10\", \"Piney River 10\", \"Staunton River 10\", \"Spread Creek Dam\", \"BigCreekLower\", \"Shields River ab Smith NWIS\", \"Donner Blitzen River nr Frenchglen NWIS\")) \n\n# pull out little G data, assign big G site name\ndat_little &lt;- dat %&gt;% \n  filter(designation %in% c(\"little\", \"medium\"), !subbasin %in% c(\"Coal Creek\", \"McGee Creek\", \"Duck Creek\", \"Flathead\"),\n         !site_name %in% c(\"West Brook NWIS\", \"West Brook 0\", \"Paine Run 10\", \"Piney River 10\", \"Staunton River 10\", \"Spread Creek Dam\", \"Shields River ab Smith NWIS\", \"BigCreekLower\")) %&gt;%\n  mutate(site_name_big = ifelse(subbasin == \"Big Creek\", \"BigCreekLower\",\n                                ifelse(subbasin == \"West Brook\", \"West Brook NWIS\", \n                                       ifelse(subbasin == \"Paine Run\", \"Paine Run 10\", \n                                              ifelse(subbasin == \"Piney River\", \"Piney River 10\",\n                                                     ifelse(subbasin == \"Staunton River\", \"Staunton River 10\",\n                                                            ifelse(subbasin == \"Shields River\", \"Shields River ab Smith NWIS\",\n                                                                   ifelse(subbasin == \"Snake River\", \"Spread Creek Dam\", \"Donner Blitzen River nr Frenchglen NWIS\"))))))))\n\n# Join big-little discharge data\ndat_Gg &lt;- dat_little %&gt;%\n  select(site_name, site_name_big, basin, subbasin, date, Month, MonthName, WaterYear, Yield_filled_mm_7) %&gt;% rename(yield_little = Yield_filled_mm_7) %&gt;%\n  left_join(dat_big %&gt;% select(site_name, date, Yield_filled_mm_7) %&gt;% rename(site_name_big = site_name, yield_big = Yield_filled_mm_7)) %&gt;%\n  drop_na() %&gt;% mutate(MonthName = as.character(MonthName))\n\n# table\ndat_Gg %&gt;% group_by(subbasin) %&gt;% summarise(site_name_big = unique(site_name_big)) %&gt;% kable(caption = \"Big G gage names for each focal sub-basin.\")\n\n\n\nBig G gage names for each focal sub-basin.\n\n\nsubbasin\nsite_name_big\n\n\n\n\nBig Creek\nBigCreekLower\n\n\nDonner Blitzen\nDonner Blitzen River nr Frenchglen NWIS\n\n\nPaine Run\nPaine Run 10\n\n\nShields River\nShields River ab Smith NWIS\n\n\nSnake River\nSpread Creek Dam\n\n\nStaunton River\nStaunton River 10\n\n\nWest Brook\nWest Brook NWIS\n\n\n\n\n\n\n\n6.1.3 Calculate total yield\n\n\nCode\n# Get total annual and monthly Big G yield and join to KS diffs\n\n# get total annual yield by big G site\ntotyield_annual &lt;- dat_big %&gt;% \n  group_by(site_name, WaterYear, basin, subbasin) %&gt;% \n  summarise(days = n(), yield_annual = sum(Yield_filled_mm, na.rm = TRUE)) %&gt;%\n  filter(!is.na(yield_annual), days &gt;= 360) %&gt;%\n  ungroup() %&gt;%\n  rename(site_name_big = site_name) %&gt;%\n  select(site_name_big, WaterYear, yield_annual) %&gt;%\n  ungroup()\n\n# get total monthly yield by big G site\ntotyield_monthly &lt;- dat_big %&gt;% \n  group_by(site_name, WaterYear, basin, subbasin, Month) %&gt;% \n  summarise(days = n(), yield_monthly = sum(Yield_filled_mm, na.rm = TRUE)) %&gt;%\n  filter(!is.na(yield_monthly), days &gt;= 28) %&gt;%\n  ungroup() %&gt;%\n  rename(site_name_big = site_name) %&gt;%\n  select(site_name_big, WaterYear, Month, yield_monthly) %&gt;%\n  ungroup()\n\n\n\n\n6.1.4 Final dataset\nJoin and filter G-g data to relevant basin(s) and years: currently, West Brook CY 2021 only!\n\n\nCode\n# wide format to enable direct difference calculation (Attempt 1)\ndat_Gg2 &lt;- dat_Gg %&gt;% left_join(totyield_annual) %&gt;% left_join(totyield_monthly) %&gt;% \n  filter(basin == \"West Brook\", site_name != \"Avery Broook NWIS\", WaterYear == 2021) %&gt;% \n  mutate(site_name_cd = as.numeric(as.factor(site_name)),\n         z_log_yield_monthly = as.numeric(scale(log(yield_monthly), center = TRUE, scale = TRUE)),\n         month_radian = as_radians((Month/12)*360))\n\n# long format for more standard intercept model (Attempt 2)\ndat_Gg3 &lt;- dat_Gg2 %&gt;% select(site_name, site_name_cd, Month, month_radian, WaterYear, yield_little, yield_big, z_log_yield_monthly) %&gt;%\n  gather(key = \"ind\", value = \"yield\", yield_little, yield_big) %&gt;% mutate(indnum = as.numeric(as.factor(ind))-1)\nhead(dat_Gg3)\n\n\n# A tibble: 6 × 9\n  site_name  site_name_cd Month month_radian WaterYear z_log_yield_monthly ind  \n  &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt;               &lt;dbl&gt; &lt;chr&gt;\n1 Avery Bro…            1     4         2.09      2021                1.20 yiel…\n2 Avery Bro…            1     4         2.09      2021                1.20 yiel…\n3 Avery Bro…            1     4         2.09      2021                1.20 yiel…\n4 Avery Bro…            1     4         2.09      2021                1.20 yiel…\n5 Avery Bro…            1     4         2.09      2021                1.20 yiel…\n6 Avery Bro…            1     4         2.09      2021                1.20 yiel…\n# ℹ 2 more variables: yield &lt;dbl&gt;, indnum &lt;dbl&gt;\n\n\nExplore G-g data\n\n\nCode\ndat_Gg2 %&gt;% group_by(WaterYear, Month) %&gt;% summarise(z_log_yield_monthly = unique(z_log_yield_monthly)) %&gt;% \n  ggplot(aes(x = Month, y = z_log_yield_monthly)) + geom_point() + geom_smooth()\n\n\n\n\n\nStandardized (log) total monthly yield at Big G during CY 2021\n\n\n\n\n\n\nCode\ndat_Gg3 %&gt;% ggplot() + geom_boxplot(aes(x = as.factor(Month), y = log(yield), fill = ind)) + facet_wrap(~site_name)\n\n\n\n\n\nDistribution of (log) yield at G-g over time, by site\n\n\n\n\n\n\nCode\ndat_Gg2 %&gt;% \n  group_by(site_name, Month) %&gt;% \n  summarise(yield_little = mean(log(yield_little), na.rm = TRUE), \n            yield_big = mean(log(yield_big), na.rm = TRUE),\n            z_log_yield_monthly = unique(z_log_yield_monthly)) %&gt;%\n  mutate(Qd = yield_little - yield_big) %&gt;% \n  ggplot(aes(x = Month, y = Qd)) + geom_point() + geom_smooth() + ylab(\"mean[log(g) - log(G)]\") + \n  facet_wrap(~site_name) + geom_abline(intercept = 0, slope = 0, linetype = \"dashed\")\n\n\n\n\n\nG-g difference in (log) monthly mean yield over time\n\n\n\n\n\n\nCode\ndat_Gg2 %&gt;% \n  group_by(site_name, Month) %&gt;% \n  summarise(yield_little = mean(log(yield_little), na.rm = TRUE), \n            yield_big = mean(log(yield_big), na.rm = TRUE),\n            z_log_yield_monthly = unique(z_log_yield_monthly)) %&gt;%\n  mutate(Qd = yield_little - yield_big) %&gt;% \n  ggplot(aes(x = z_log_yield_monthly, y = Qd)) + geom_point() + geom_smooth(method = \"lm\") + \n  ylab(\"mean[log(g) - log(G)]\") + facet_wrap(~site_name) + geom_abline(intercept = 0, slope = 0, linetype = \"dashed\")\n\n\n\n\n\nG-g difference in (log) monthly mean yield as a function of (log) total monthly yield at G",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>G-g Difference (JAGS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffJAGS.html#declare-the-jags-model",
    "href": "Big G Little g/GgDiffJAGS.html#declare-the-jags-model",
    "title": "6  G-g Difference (JAGS)",
    "section": "6.2 Declare the JAGS model",
    "text": "6.2 Declare the JAGS model\nFirst attempt tries to model the difference as a derived parameter (like the growth model), but this maintains the temporal structure of the data, and we are primarily interested in the difference in the distributions\n\n\nCode\ncat(\"model {\n\n##--- LIKELIHOOD ---------------------------------------------------##\n\nfor (i in 1:nObs) {\n  Qg[i] ~ dnorm(mu[i], pow(sigma, -2))\n  mu[i] &lt;- QG[i] - Qd[i]\n  Qd[i] &lt;- alpha[sites[i]] + beta[sites[i]] * yield[i]\n  \n  # Log-likelihood\n  loglik[i] &lt;- logdensity.norm(Qg[i], mu[i], pow(sigma, -2))\n  }\n\n\n##--- PRIORS --------------------------------------------------------##\n\n# Process error is shared among sites\nsigma ~ dunif(0.001, 100)\n\n# Site-specific parameters\nfor (k in 1:nSites) {\n  alpha[k] ~ dnorm(alpha.mu, pow(sigma.alpha, -2))\n  beta[k] ~ dnorm(beta.mu, pow(sigma.beta, -2))\n  }\n\n# Global parameters\nalpha.mu ~ dnorm(0, pow(10, -2))\nbeta.mu ~ dnorm(0, pow(10, -2))\n\n# Site-level variation in alpha and beta\nsigma.alpha ~ dunif(0.001, 100)\nsigma.beta ~ dunif(0.001, 100)\n\n}\", file = \"./Big G Little g/JAGS Models/GgMod.txt\")\n\n\nSecond attempt is a more standard intercept model.\n\n“alpha” is the mean monthly yield at Big-G, which is shared among sites\n“beta1” is a Little-g offset to the intercept, which describes the site-level mean G-g difference\n“beta2” describes the effect of water availability (log total monthly yield at Big G) on the site-level mean G-g difference.\n\nNote that this is only “turned on” for little-g (ind[i] = 1)\n\nShould add covariates on sigma to deal with unequal variance among groups\n\n\n\nCode\ncat(\"model {\n\n##--- LIKELIHOOD ---------------------------------------------------##\n\nfor (i in 1:nObs) {\n  Q[i] ~ dnorm(mu[i], pow(sigma, -2))\n  mu[i] &lt;- alpha[months[i]] + beta1[sites[i]] * ind[i] + beta2[sites[i]] * ind[i] * yieldtot[i]\n  \n  # Log-likelihood\n  loglik[i] &lt;- logdensity.norm(Q[i], mu[i], pow(sigma, -2))\n  }\n\n\n##--- PRIORS --------------------------------------------------------##\n\n# Process error is shared among sites\nsigma ~ dunif(0.001, 100)\n\n# Site-specific parameters\nfor (j in 1:nSites) {\n  beta1[j] ~ dnorm(0, pow(10, -2))\n  beta2[j] ~ dnorm(0, pow(10, -2))\n  }\n\nfor(k in 1:nMonths) {\n  alpha[k] ~ dnorm(0, pow(10, -2))\n  }\n\n}\", file = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Big G Little g/JAGS Models/GgMod.txt\")",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>G-g Difference (JAGS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffJAGS.html#fit-the-jags-model",
    "href": "Big G Little g/GgDiffJAGS.html#fit-the-jags-model",
    "title": "6  G-g Difference (JAGS)",
    "section": "6.3 Fit the JAGS model",
    "text": "6.3 Fit the JAGS model\n\n\nCode\n# gather data for JAGS\n# jags.data &lt;- list(\"nObs\" = dim(dat_Gg2)[1], \"nSites\" = length(unique(dat_Gg2$site_name_cd)), \"sites\" = dat_Gg2$site_name_cd, \n#                   \"Qg\" = dat_Gg2$yield_little, \"QG\" = dat_Gg2$yield_big, \"yield\" = dat_Gg2$z_yield_monthly)\njags.data &lt;- list(\"nObs\" = dim(dat_Gg3)[1], \"nSites\" = length(unique(dat_Gg3$site_name_cd)), \"nMonths\" = length(unique(dat_Gg3$Month)), \n                  \"sites\" = dat_Gg3$site_name_cd, \"months\" = dat_Gg3$Month,\n                  \"Q\" = log(dat_Gg3$yield+0.01), \"ind\" = dat_Gg3$indnum, \"yieldtot\" = dat_Gg3$z_log_yield_monthly)\n\n# parameters to monitor\n# jags.params &lt;- c(\"alpha\", \"alpha.mu\", \"sigma.alpha\", \"beta\", \"beta.mu\", \"sigma.beta\", \"sigma\", \"loglik\")\njags.params &lt;- c(\"alpha\", \"beta1\", \"beta2\", \"sigma\", \"loglik\")\n\n# run in jags\nmod_0 &lt;- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params,\n                       model.file = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Big G Little g/JAGS Models/GgMod.txt\",\n                       n.chains = 6, n.thin = 20, n.burnin = 1000, n.iter = 5000, DIC = TRUE)\n# saveRDS(mod_0, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Big G Little g/JAGS Models/GgMod.RDS\")\n\n\nAny problematic R-hat values?\n\n\nCode\nmod_0$BUGSoutput$summary[,8][mod_0$BUGSoutput$summary[,8] &gt; 1.01]\n\n\nloglik[2211] \n    1.011407 \n\n\n\n6.3.1 View traceplots\n\n\nCode\nMCMCtrace(mod_0, ind = TRUE, params = c(\"alpha\", \"beta1\", \"beta2\", \"sigma\"), pdf = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.3.2 Get MCMC samples and summary\n\n\nCode\ntop_mod &lt;- mod_0\n# generate MCMC samples and store as an array\nmodelout &lt;- top_mod$BUGSoutput\nMcmcList &lt;- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat &lt;- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]])\nparam.summary &lt;- modelout$summary\nhead(param.summary)\n\n\n               mean         sd       2.5%        25%        50%        75%\nalpha[1]  0.5462529 0.02781862  0.4936378  0.5270035  0.5462240  0.5655740\nalpha[2] -0.1422659 0.02915204 -0.1999043 -0.1625639 -0.1424827 -0.1225840\nalpha[3]  0.4374197 0.02802609  0.3807040  0.4192080  0.4371426  0.4555607\nalpha[4]  1.2530323 0.02901345  1.1953046  1.2329734  1.2536734  1.2737716\nalpha[5]  0.5094628 0.02926410  0.4531626  0.4896552  0.5098029  0.5290679\nalpha[6] -1.5593645 0.02751962 -1.6113834 -1.5774984 -1.5599359 -1.5417936\n               97.5%     Rhat n.eff\nalpha[1]  0.60321864 1.002291   920\nalpha[2] -0.08210678 1.004733   560\nalpha[3]  0.49472750 1.001976  1000\nalpha[4]  1.30751424 1.003528   700\nalpha[5]  0.56547757 1.000548  1200\nalpha[6] -1.50406241 1.000014  1200",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>G-g Difference (JAGS)</span>"
    ]
  },
  {
    "objectID": "Big G Little g/GgDiffJAGS.html#plot-model-output",
    "href": "Big G Little g/GgDiffJAGS.html#plot-model-output",
    "title": "6  G-g Difference (JAGS)",
    "section": "6.4 Plot model output",
    "text": "6.4 Plot model output\n\n\nCode\n# control panel\nnvals &lt;- 100\nnsim &lt;- 50\nnsites &lt;- length(unique(dat_Gg3$site_name_cd))\nx_seq &lt;- seq(from = min(dat_Gg2$z_log_yield_monthly), to = max(dat_Gg2$z_log_yield_monthly), length.out = nvals)\n\n# predict from model\npred_arr &lt;- array(NA, dim = c(nsim, nvals, nsites))\nfor (k in 1:nsites) {\n  for (j in 1:nsim) {\n    pred_arr[j,,k] &lt;- Mcmcdat[j,paste(\"beta1[\", k, \"]\", sep = \"\")] + Mcmcdat[j,paste(\"beta2[\", k, \"]\", sep = \"\")] * x_seq\n  }\n}\n# pred_dist_lin &lt;- matrix(NA, nrow = nrow(Mcmcdat), ncol = nrgs)\n# for (i in 1:nrow(pred_dist_lin)) { pred_dist_lin[i,] &lt;- exp(Mcmcdat[i,\"alpha\"] + Mcmcdat[i,\"beta1\"]*pdist) }\n# pred_dist_tran &lt;- matrix(NA, nrow = nrow(Mcmcdat), ncol = nrgs)\n# for (i in 1:nrow(pred_dist_tran)) { pred_dist_tran[i,] &lt;-  pred_dist_lin[i,] / rowSums(pred_dist_lin)[i] }\n# pred_lower &lt;- apply(pred_dist_tran, MARGIN = 2, quantile, prob = 0.025)\n# pred_upper &lt;- apply(pred_dist_tran, MARGIN = 2, quantile, prob = 0.975)\n# pred_median &lt;- apply(pred_dist_tran, MARGIN = 2, quantile, prob = 0.5)\n\n\n\n\nCode\npar(mar = c(5,5,2,12))\nmycols &lt;- brewer.pal(9, \"Set1\")\nplot(seq(from = range(pred_arr)[1], to = range(pred_arr)[2], length.out = nvals) ~ x_seq, type = \"n\", xlab = \"(log) Monthly total yield at Big G (z-score)\", ylab = \"Little g deviation from Big G\")\nfor (k in 1:nsites) {\n  for (j in 1:nsim) {\n    lines(pred_arr[j,,k] ~ x_seq, col = alpha(mycols[k], 0.3))\n  }\n}\nabline(h = 0, lty = 2)\npar(xpd = TRUE)\nlegend(\"right\", inset = c(-0.4,0), legend = unlist(dat_Gg3 %&gt;% group_by(site_name) %&gt;% summarise(stcd = unique(site_name_cd)) %&gt;% select(site_name)), fill = mycols, bty = \"n\")\n\n\n\n\n\nG-g mean difference in (log) yield as a function of (log) total monthly yield at G",
    "crumbs": [
      "Big G-Little g",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>G-g Difference (JAGS)</span>"
    ]
  }
]