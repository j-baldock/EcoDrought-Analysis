model {

##--- LIKELIHOOD ---------------------------------------------------##

for (i in 1:nObs) {

  Qg[i] ~ dnorm(mu[i], pow(sigma[i], -2))
  mu[i] <- alpha[sites[i]] + beta[sites[i]] * QG[i]
  log(sigma[i]) <- sig.alpha[sites[i]] + sig.beta[sites[i]] * QG[i]
  
  # Log-likelihood
  loglik[i] <- logdensity.norm(Qg[i], mu[i], pow(sigma[i], -2))
  
  ## SITE AGNOSTIC
  Qg2[i] ~ dnorm(ag.mu[i], pow(ag.sigma[i], -2))
  ag.mu[i] <- ag.alpha + ag.beta * QG[i]
  log(ag.sigma[i]) <- ag.sig.alpha + ag.sig.beta * QG[i]  
  }


##--- PRIORS --------------------------------------------------------##

# Site-specific parameters
for (j in 1:nSites) {
    alpha[j] <- B[j,1]
    beta[j] <- B[j,2]
    B[j,1:2] ~ dmnorm(B.hat[j,], Tau.B[,])
    B.hat[j,1] <- alpha.mu
    B.hat[j,2] <- beta.mu
    
    sig.alpha[j] ~ dnorm(sig.alpha.mu, pow(sig.alpha.sigma, -2))
    sig.beta[j] ~ dnorm(sig.beta.mu, pow(sig.beta.sigma, -2))
    }
    
# global parameters
alpha.mu ~ dnorm(0, pow(10, -2))
beta.mu ~ dnorm(0, pow(10, -2))
sig.alpha.mu ~ dnorm(0, pow(10, -2))
sig.beta.mu ~ dnorm(0, pow(10, -2))

# variance-covariance matrix components
Tau.B[1:2,1:2] <- inverse(Sigma.B[,])
Sigma.B[1,1] <- pow(alpha.sigma, 2)
Sigma.B[2,2] <- pow(beta.sigma, 2)
Sigma.B[1,2] <- rho * alpha.sigma * beta.sigma
Sigma.B[2,1] <- Sigma.B[1,2]

alpha.sigma ~ dunif(0.001, 100)
beta.sigma ~ dunif(0.001, 100)
rho ~ dunif(-1,1)

# among-site variation in sigma parameters
sig.alpha.sigma ~ dunif(0.001, 100)
sig.beta.sigma ~ dunif(0.001, 100)


## SITE AGNOSTIC
ag.alpha ~ dnorm(0, pow(10, -2))
ag.beta ~ dnorm(0, pow(10, -2))
ag.sig.alpha ~ dnorm(0, pow(10, -2))
ag.sig.beta ~ dnorm(0, pow(10, -2))


##--- DERIVED VALUES ------------------------------------------------##

# expected deviation from Big G
for (j in 1:nSites) { 
  for (i in 1:nDiff) {
    predlg[j,i] <- alpha[j] + beta[j] * QGvec[i]
    diff[j,i] <- (alpha[j] + beta[j] * QGvec[i]) - QGvec[i]
  }}


# variance decomposition and standardization
for (i in 1:nDiff) {

  # observed population variance, conditional on x
  VpObs[i] <- ((beta.mu^2) * varx) + ((alpha.sigma^2) + ((QGvec[i]^2) * (beta.sigma^2)) + (2 * QGvec[i] * (rho * alpha.sigma * beta.sigma))) + ((exp(sig.alpha.mu + sig.beta.mu * QGvec[i]))^2)
  
  # expected population variance, no within or among-site diversity
  VpScen1[i] <- ((beta.mu^2) * varx) + ((exp(sig.alpha.mu))^2)
  
  # expected population variance, no within-site diversity
  VpScen2[i] <- ((beta.mu^2) * varx) + ((alpha.sigma^2) + ((QGvec[i]^2) * (beta.sigma^2)) + (2 * QGvec[i] * (rho * alpha.sigma * beta.sigma))) + ((exp(sig.alpha.mu))^2)
  
  # expected population variance, no among-size diversity
  VpScen3[i] <- ((beta.mu^2) * varx) + ((exp(sig.alpha.mu + sig.beta.mu * QGvec[i]))^2)
  
  # portfolio strength: how much more diversity in streamflow do we observe at the little g gages than expected under alternative (null) hypotheses?
  port1[i] <- VpObs[i] / VpScen1[i]
  port2[i] <- VpObs[i] / VpScen2[i]
  port3[i] <- VpObs[i] / VpScen3[i]
  
  # variance in raw response values, agnostic to site (i.e., variance in the sample)
  VarAg[i] <- (exp(ag.sig.alpha + ag.sig.beta * QGvec[i]))^2
}


# attenuation strength: how much more diversity in streamflow (among little g gages) do we observe at low vs. high flows?
attenObs <- VpObs[1] / VpObs[nDiff]
atten1 <- VpScen1[1] / VpScen1[nDiff]
atten2 <- VpScen2[1] / VpScen2[nDiff]
atten3 <- VpScen3[1] / VpScen3[nDiff]

}