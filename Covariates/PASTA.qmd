---
title: "PASTA"
---

Purpose: use paired air-stream temperature signal analysis to estimate daily groundwater contributions to streamflow

```{r setup, include = FALSE}
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE, cache.lazy = FALSE)
```

```{r echo=FALSE}
library(tidyverse)
library(dygraphs)
library(minpack.lm)
library(broom.mixed)
library(sf)
library(mapview)
library(knitr)
library(fasstr)
library(zoo)
library(mblm)
library(DT)
```


## Data

### Site information
```{r}
siteinfo <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv")
siteinfo_sp <- st_as_sf(siteinfo, coords = c("long", "lat"), crs = 4326)
mapview(siteinfo_sp, zcol = "designation")
```


Define G-g clusters/sub-basins
```{r}
siteinfo2 <- siteinfo %>% 
  filter(!site_name %in% c("WoundedBuckCreek", "Brackett Creek", "South River Conway NWIS", 
                           "Shields River nr Livingston NWIS", "North Fork Flathead River NWIS", 
                           "Pacific Creek at Moran NWIS")) %>%
  mutate(designation = ifelse(site_name %in% c("Donner Blitzen River nr Frenchglen NWIS", 
                                               "BigCreekLower", "CoalCreekLower", "McGeeCreekLower", 
                                               "West Brook NWIS", "West Brook 0", 
                                               "Paine Run 10", "Staunton River 10", "Piney River 10", 
                                               "Shields River Valley Ranch", "Shields River ab Smith NWIS", 
                                               "EF Duck Creek be HF",
                                               "Spread Creek Dam"), "big", "little"))

datatable(siteinfo2 %>% 
            arrange(region, basin, subbasin, designation) %>% 
            mutate(lat = round(lat, digits = 2), 
                   long = round(long, digits = 2), 
                   area_sqmi = round(area_sqmi, digits = 2), 
                   elev_ft = round(elev_ft, digits = 0)),
          caption = "EcoDrought monitoring locations and metadata.")
```


### Stream temp
```{r}
dat <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_Raw_ECODandNWIS.csv") %>% 
  filter(site_name %in% siteinfo2$site_name) %>% 
  mutate(datetime = floor_date(datetime, unit = "hour")) %>%
  group_by(region, basin, subbasin, site_name, datetime) %>% 
  summarise(tempc = mean(tempc), TempReliability = min(TempReliability), 
            flow = mean(flow), DischargeReliability = min(DischargeReliability)) %>%
  ungroup() %>%
  mutate(flow = ifelse(DischargeReliability == 0, NA, flow)) %>% 
  group_by(region, basin, subbasin, site_name) %>%
  mutate(z_flow = scale(log(flow+0.0001))) %>%
  ungroup()
tz(dat$datetime)
dat
```

### Air temp

Apply air temperature data from a single site within/near each sub-basin to all water temperature/flow sites within the same sub-basin. This implicitly assumes that air temperature is homogeneous within each sub-basin, which is an oversimplification, but necessary as we only have air temperature observations at a single site within most sub-basins.

Importantly, SNOTEL data appears to be a reasonable surrogate for in-situ air temperature, at least as shown for the Shields River, Snake River/Spread Creek, and Duck Creek. To maintain consistency across basins (at least in western US) and years where in-situ data is missing, use SNOTEL air temperature data for all western US basins. Note that Duck Creek gets Shields River SNOTEL data, as this was the nearest SNOTEL site, and showed strong concordance with in-situ data. Additionally, using SNOTEL data as a surrogate for in-situ air temperature data may not be as robust in the Donner-Blitzen, where the SNOTEL site is at a considerably higher elevation than the stream monitoring locations. 
```{r echo=FALSE}
tibble(subbasin = c("West Brook", 
                    "Paine Run", 
                    "Staunton River", 
                    "Piney River",
                    "Big Creek",
                    "Coal Creek",
                    "McGee Creek",
                    "Shields River",
                    "Duck Creek",
                    "Snake River",
                    "Donner Blitzen"),
       temp_site = c("West Brook Central", 
                     "Paine Run 10", 
                     "Staunton River 10", 
                     "Piney River 10",
                     "SNOTEL Emery Creek",
                     "SNOTEL Emery Creek",
                     "SNOTEL Emery Creek",
                     "SNOTEL Porcupine",
                     "SNOTEL Porcupine",
                     "SNOTEL Base Camp",
                     "SNOTEL Silvies")) %>% kable()
```

Load air temperature data
```{r}
# West Brook
airtemp_wb <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw Data/Mass/WestBrookCentral_AirTemp_31December2019_to_7July2024.csv")
tz(airtemp_wb$datetime_est) <- "EST"
airtemp_wb$datetime <- with_tz(airtemp_wb$datetime_est, "UTC")
airtemp_wb <- airtemp_wb %>% 
  select(datetime, tempc_air) %>% 
  mutate(datetime = floor_date(datetime, unit = "hour")) %>%
  group_by(datetime) %>% 
  summarise(tempc_air = mean(tempc_air)) %>%
  ungroup() %>%
  mutate(basin = "West Brook", subbasin = "West Brook", source = "SOConte") %>% 
  select(basin, subbasin, source, datetime, tempc_air)


# Shenandoah
airtemp_shen <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Virg/Shen_BigG_TempEtc_hourly_UVA.csv") %>%
  rename(tempc_air = airtempc_mean) %>%
  select(site_id, datetime, tempc_air) %>%
  left_join(siteinfo %>% select(site_id, site_name, region, basin, subbasin))
tz(airtemp_shen$datetime) <- "EST"
airtemp_shen$datetime <- with_tz(airtemp_shen$datetime, "UTC")
airtemp_shen <- airtemp_shen %>% 
  mutate(datetime = floor_date(datetime, unit = "hour")) %>%
  group_by(region, basin, subbasin, site_name, datetime) %>% 
  summarise(tempc_air = mean(tempc_air)) %>%
  ungroup() %>%
  select(basin, subbasin, datetime, tempc_air) %>%
  mutate(source = "UVA")


# Flathead
airtemp_flat <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Flathead/SNOTEL_469_EmeryCk_4340fasl_AirTemp.csv") %>%
  mutate(datetime = mdy_hm(datetime),
         tempc_air = (tempf - 32) * (5/9),
         basin = "Flathead",
         source = "SNOTEL")
tz(airtemp_flat$datetime) <- "PST" # ALL SNOTEL DATE/TIMES ARE IN PST
airtemp_flat$datetime <- with_tz(airtemp_flat$datetime, "UTC")
airtemp_flat <- airtemp_flat %>% 
  mutate(datetime = floor_date(datetime, unit = "hour")) %>%
  group_by(basin, source, datetime) %>% 
  summarise(tempc_air = mean(tempc_air)) %>%
  ungroup()
airtemp_flat <- bind_rows(airtemp_flat %>% mutate(subbasin = "Big Creek"),
                          airtemp_flat %>% mutate(subbasin = "Coal Creek"),
                          airtemp_flat %>% mutate(subbasin = "McGee Creek"))


# Shields
airtemp_shields <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/SNOTEL_700_Porcupine_6480fasl_AirTemp.csv") %>%
  mutate(datetime = mdy_hm(date),
         tempc_air = (tempf - 32) * (5/9),
         basin = "Shields River",
         subbasin = "Shields River",
         source = "SNOTEL")
tz(airtemp_shields$datetime) <- "PST" # ALL SNOTEL DATE/TIMES ARE IN PST
airtemp_shields$datetime <- with_tz(airtemp_shields$datetime, "UTC")
airtemp_shields <- airtemp_shields %>% 
  mutate(datetime = floor_date(datetime, unit = "hour")) %>%
  group_by(basin, subbasin, source, datetime) %>% 
  summarise(tempc_air = mean(tempc_air)) %>%
  ungroup()


# Snake
airtemp_snake <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/SNOTEL_314_BaseCampPacific_7040fasl_AirTemp.csv") %>%
  mutate(datetime = mdy_hm(datetime),
         tempc_air = (tempf - 32) * (5/9),
         basin = "Snake River",
         subbasin = "Snake River",
         source = "SNOTEL")
tz(airtemp_snake$datetime) <- "PST" # ALL SNOTEL DATE/TIMES ARE IN PST
airtemp_snake$datetime <- with_tz(airtemp_snake$datetime, "UTC")
airtemp_snake <- airtemp_snake %>% 
  mutate(datetime = floor_date(datetime, unit = "hour")) %>%
  group_by(basin, subbasin, source, datetime) %>% 
  summarise(tempc_air = mean(tempc_air)) %>%
  ungroup()


# Donner-Blitzen
airtemp_db <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Oreg/SNOTEL_759_Silvies_7000fasl_AirTemp.csv") %>%
  mutate(datetime = mdy_hm(date),
         tempc_air = (tempf - 32) * (5/9),
         basin = "Donner Blitzen",
         subbasin = "Donner Blitzen",
         source = "SNOTEL")
tz(airtemp_db$datetime) <- "PST" # ALL SNOTEL DATE/TIMES ARE IN PST
airtemp_db$datetime <- with_tz(airtemp_db$datetime, "UTC")
airtemp_db <- airtemp_db %>% 
  mutate(datetime = floor_date(datetime, unit = "hour")) %>%
  group_by(basin, subbasin, source, datetime) %>% 
  summarise(tempc_air = mean(tempc_air)) %>%
  ungroup()

# headers
head(airtemp_wb)
head(airtemp_shen)
head(airtemp_flat)
head(airtemp_shields)
head(airtemp_snake)
head(airtemp_db)
```


#### In-situ vs. SNOTEL

Al-Chokhachy has in-situ air temperature for Duck Creek, the Shields River, and Spread Creek. For Shields and Spread, compare in-situ air temperature measurements with SNOTEL data. Can we justify using SNOTEL data for these and other western basins?

Load in-situ data
```{r}
# Duck
airtemp_insitu_duck <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/duck_air_hourly_021625.csv") %>%
  select(date, time, temperature) %>%
  rename("tempc_air" = "temperature") %>%
  mutate(datetime = as_datetime(paste(date, time, sep = " ")),
         basin = "Duck Creek",
         subbasin = "Duck Creek",
         source = "Al-Ch") %>%
  select(basin, subbasin, source, datetime, tempc_air)
tz(airtemp_insitu_duck$datetime) <- "MST"
airtemp_insitu_duck$datetime <- with_tz(airtemp_insitu_duck$datetime, "UTC")

# Shields
airtemp_insitu_shields <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/Shields_air_hourly_021625.csv") %>%
  select(date, time, temperature) %>%
  rename("tempc_air" = "temperature") %>%
  mutate(datetime = as_datetime(paste(date, time, sep = " ")),
         basin = "Shields River",
         subbasin = "Shields River",
         source = "Al-Ch") %>%
  select(basin, subbasin, source, datetime, tempc_air)
tz(airtemp_insitu_shields$datetime) <- "MST"
airtemp_insitu_shields$datetime <- with_tz(airtemp_insitu_shields$datetime, "UTC")

# Spread
airtemp_insitu_spread <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Raw data/Al-Chokhachy/Spread_air_hourly_021625.csv") %>%
  select(date, time, temperature) %>%
  rename("tempc_air" = "temperature") %>%
  mutate(datetime = as_datetime(paste(date, time, sep = " ")),
         basin = "Snake River",
         subbasin = "Snake River",
         source = "Al-Ch") %>%
  select(basin, subbasin, source, datetime, tempc_air)
tz(airtemp_insitu_spread$datetime) <- "MST"
airtemp_insitu_spread$datetime <- with_tz(airtemp_insitu_spread$datetime, "UTC")

airtemp_insitu_duck
airtemp_insitu_shields
airtemp_insitu_spread
```


##### Shields River

How well does in-situ air temp align with SNOTEL air temp?
```{r}
cat_shields <- airtemp_shields %>% select(datetime, tempc_air) %>% left_join(airtemp_insitu_shields %>% select(datetime, tempc_air) %>% mutate(datetime = floor_date(datetime, unit = "hour")) %>% rename("tempc_air_alc" = "tempc_air"))
cat_shields %>% dygraph() %>% dyRangeSelector()
```

```{r fig.width=8, fig.height=8}
cat_shields %>% mutate(doy = yday(datetime), year = year(datetime)) %>% filter(!year %in% c(2014,2015,2024)) %>%
  ggplot(aes(x = tempc_air, y = tempc_air_alc, color = doy)) + 
  geom_point() + geom_abline(intercept = 0, slope = 1, linetype = "dashed") + 
  scale_color_gradient2(midpoint = 182, low = "orange", mid = "purple3", high = "orange") +
  facet_wrap(~year) + xlab("SNOTEL air temp (C)") + ylab("In-situ air temp (C)")
```

*Notes:* 

* There are a few periods where the in-situ data are clearly wrong, e.g., winter 2013 and November 2016. For the latter, logger appears to be sun affected (in-situ far too warm for August). 
* Generally, diel cycles match well. Daily max temps are similar between SNOTEL and in-situ data. However, in-situ daily minimums are far lower than SNOTEL. Could this be located in a cold pit/sink?
* There is a lot of scatter around 1:1 in the scatter plots. Some of this is probably due to slight differences in the time of sensor readings, but most of it is probably due to the issues mentioned above. 


##### Spread Creek 

How well does in-situ air temp align with SNOTEL air temp?
```{r}
cat_spread <- airtemp_snake %>% select(datetime, tempc_air) %>% left_join(airtemp_insitu_spread %>% select(datetime, tempc_air) %>% mutate(datetime = floor_date(datetime, unit = "hour")) %>% rename("tempc_air_alc" = "tempc_air"))
cat_spread %>% dygraph() %>% dyRangeSelector()
```

```{r fig.width=8, fig.height=8}
cat_spread %>% mutate(doy = yday(datetime), year = year(datetime)) %>% filter(!year %in% c(2019,2024)) %>%
  ggplot(aes(x = tempc_air, y = tempc_air_alc, color = doy)) + 
  geom_point() + geom_abline(intercept = 0, slope = 1, linetype = "dashed") + 
  scale_color_gradient2(midpoint = 182, low = "orange", mid = "purple3", high = "orange") +
  facet_wrap(~year) + xlab("SNOTEL air temp (C)") + ylab("In-situ air temp (C)")
```

*Notes:* 

* There is only one apparent period where the in-situ data are clearly wrong: November 2016. In-situ logger appears to be sun affected (in-situ far too warm for August). 
* Generally, diel cycles match well (much better than in Shields). Daily max and min temps are similar between SNOTEL and in-situ data, particularly during summer.
* There is some scatter around 1:1 in the scatter plots. Much of this appears to be due to ~45 min lag between sensor readings, but less of the disagreement being driven by actual disagreement between sensor readings. 


##### Duck Creek 

The closest SNOTEL station is Porcupine in the Shields River basin. How well do these align?
```{r}
cat_duck <- airtemp_shields %>% select(datetime, tempc_air) %>% left_join(airtemp_insitu_duck %>% select(datetime, tempc_air) %>% mutate(datetime = floor_date(datetime, unit = "hour")) %>% rename("tempc_air_alc" = "tempc_air"))
cat_duck %>% dygraph() %>% dyRangeSelector()
```

```{r fig.width=8, fig.height=8}
cat_duck %>% mutate(doy = yday(datetime), year = year(datetime)) %>% filter(!year %in% c(2013,2024)) %>%
  ggplot(aes(x = tempc_air, y = tempc_air_alc, color = doy)) + 
  geom_point() + geom_abline(intercept = 0, slope = 1, linetype = "dashed") + 
  scale_color_gradient2(midpoint = 182, low = "orange", mid = "purple3", high = "orange") +
  facet_wrap(~year) + xlab("SNOTEL air temp (C)") + ylab("In-situ air temp (C)")
```

*Notes:* 

* There is only one apparent period where the in-situ data are clearly wrong: 2020. Date/times are messed up, lack AM/PMs, drives "shotgun" scatter in scatterplot 
* Generally, diel cycles match surprisingly well. Daily max and min temps are similar between SNOTEL and in-situ data, particularly during summer. Although in some years daily variability is greater for in-situ data. 
* There is some scatter around 1:1 in the scatter plots...on par with what we see in the Snake. 



#### Final check

Check time zones (all should be UTC)
```{r}
tz(airtemp_wb$datetime)
tz(airtemp_shen$datetime)
tz(airtemp_flat$datetime)
tz(airtemp_shields$datetime)
tz(airtemp_snake$datetime)
tz(airtemp_db$datetime)
```

Bind basin-specific air temp and show unique subbasins
```{r}
airtemp <- bind_rows(airtemp_wb, airtemp_shen, airtemp_flat, airtemp_shields, airtemp_snake, airtemp_db, airtemp_shields %>% mutate(basin = "Duck Creek", subbasin = "Duck Creek"))
unique(airtemp$subbasin)
str(airtemp)
```


### Join data
```{r}
dat_join <- dat %>% left_join(airtemp)
dat_join
```


### View data

Notes:

* *West Brook*
  + Mitchell, Obear, and WB Lower have erroneous water temp readings after ~Aug. 31, 2021
  + All WB sites have error in F to C conversion (from Aquarius)
  + Mitchell, Obear, WB0, and WB Lower stream temp signals appear to be shifted forward in time considerably!
* *Duck Creek*
  + No air temperature data (yet)
* *Shields River, Spread Creek, and Donner Blitzen:* Should compare SNOTEL air temp data against in-situ/EcoD air temp data, where available

::: panel-tabset
#### West Brook
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "West Brook", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
#### Paine Run
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Paine Run", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
#### Staunton River
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Staunton River", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
#### Big Creek
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Big Creek", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
#### Coal Creek
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Coal Creek", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
#### McGee Creek
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "McGee Creek", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 1)
```
#### Shields River
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Shields River", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
#### Duck Creek
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Duck Creek", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 1)
```
#### Snake River
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Snake River", !is.na(tempc), TempReliability == 1) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
#### Donner Blitzen
```{r echo=FALSE, fig.width=9, fig.height=9}
dat_join %>% filter(subbasin == "Donner Blitzen", !is.na(tempc), TempReliability == 1, year(datetime) >= 2019) %>% 
  ggplot() +
  geom_line(aes(x = datetime, y = tempc_air), color = "darkorange") +
  geom_line(aes(x = datetime, y = tempc), color = "dodgerblue2") +
  ylab("Temperature (deg. C)") +
  facet_wrap(~site_name, ncol = 2)
```
:::


View single site using dyGraphs
```{r}
mysite <- "SF Spread Creek Lower"
dat_join %>% filter(site_name %in% mysite) %>% select(datetime, tempc, tempc_air) %>% dygraph(main = mysite) %>% dyRangeSelector() %>% dyAxis("y", label = "Stream temp. (deg C)") %>% dyAxis("y2", label = "Air temp. (deg C)") %>% dySeries("tempc", axis = "y", label = "Stream") %>% dySeries("tempc_air", axis = "y2", label = "Air")
```


### Format data for PASTA
```{r}
dat2 <- dat_join %>% 
  filter(TempReliability == 1) %>%
  mutate(year = year(datetime),
         yday = yday(datetime),
         hour = hour(datetime)) %>%
  rename(airTemperature = tempc_air,
         waterTemperature = tempc) %>%
  select(subbasin, site_name, datetime, year, yday, hour, airTemperature, waterTemperature, flow, z_flow) %>%
  filter(waterTemperature >= 1, waterTemperature <= 25)
range(dat2$waterTemperature)
dat2
```



## Create functions

### Curve fits

Functions to model air and water temperature time series data using sine wave regression:
```{r}
curve_fit_air <- function(d, minDataLength = 20) {
  # return NAs if not enough data
  if (length(d$airTemperature) < minDataLength) { return(list(model = NA, rSquared = NA)) }
  # convert hours to radians/circular
  d$hour_rad <- d$hour * (2 * pi / 24)
  # starting values
  startAir <- list(A = -1, B = -1, C = mean(d$airTemperature, na.rm = TRUE))
  # run sine wave regression as an NLS model
  modelAir <- tryCatch({
    nlsLM(airTemperature ~ A * sin(hour_rad) + B * cos(hour_rad) + C, data = d, start = startAir)
    }, error = function(e) {
      return(list(model = NA, rSquared = NA))
      })
  # rSquared calculation
  residuals <- residuals(modelAir)
  sst <- sum((d$airTemperature - mean(d$airTemperature))^2)
  ssr <- sum(residuals^2)
  rSquared <- 1 - (ssr / sst)
  # return fitted model object and R2
  return(list(model = modelAir, rSquared = rSquared))
  }

curve_fit_water <- function(d, minDataLength = 20) {
  # return NAs if not enough data
  if (length(d$waterTemperature) < minDataLength) { return(list(model = NA, rSquared = NA)) }
  # convert hours to radians/circular
  d$hour_rad <- d$hour * (2 * pi / 24)
  # starting values
  startWater <- list(A = -1, B = -1, C = mean(d$waterTemperature, na.rm = TRUE))
  # run sine wave regression as an NLS model
  modelWater <- tryCatch({
    nlsLM(waterTemperature ~ A * sin(hour_rad) + B * cos(hour_rad) + C, data = d, start = startWater)
    }, error = function(e) {
      return(list(model = NA, rSquared = NA))
      })
  # rSquared calculation
  residuals <- residuals(modelWater)
  sst <- sum((d$waterTemperature - mean(d$waterTemperature))^2)
  ssr <- sum(residuals^2)
  rSquared <- 1 - (ssr / sst)
  # return fitted model object and R2
  return(list(model = modelWater, rSquared = rSquared))
  }
```

### Extract parameters

Function to extract model parameters from sine wave regression fits:
```{r}
extract_params <- function(model) {
  if (is.null(model)) {
    return(NULL)
  }

  params <- tryCatch({
    broom.mixed::tidy(model)
  }, error = function(e) {
    NULL
  })

  return(params)
}
```

### Get model parameters

Function to fit sine wave regression models to data and grab amplitude, phase, and mean temperature parameters from fitted model objects:
```{r}
getParams <- function(dtHOUR, minDataLength = 20) {
  # Models for air temperature
  modelsAir <- dtHOUR %>%
    group_by(site_name, year, yday) %>%
    nest() %>%
    mutate(dataLength = map_dbl(data, ~length(.x$airTemperature))) |>
    filter(dataLength > minDataLength) |> # filter out daily datasets that are too short
    mutate(
      model0 = map(data, curve_fit_air),
      model = map(model0, 'model'),
      rSquared = map(model0, 'rSquared'),
      params = map(model, extract_params)
    ) %>%
    unnest(c(params, rSquared)) |>
    select(-model0, -model, -data) |>
    mutate(tempVar = "air")

  # Models for water temperature
  modelsWater <- dtHOUR %>%
    group_by(site_name, year, yday) %>%
    nest() %>%
    mutate(dataLength = map_dbl(data, ~length(.x$waterTemperature))) |>
    filter(dataLength > minDataLength) |> # filter out daily datasets that are too short
    mutate(
      model0 = map(data, curve_fit_water),
      model = map(model0, 'model'),
      rSquared = map(model0, 'rSquared'),
      params = map(model, extract_params)
    ) %>%
    unnest(c(params, rSquared)) |>
    select(-model0, -model, -data) |>
    mutate(tempVar = "water")

  # Collect air and water models
  models <- bind_rows(modelsAir, modelsWater) |>
    filter(!is.na(term)) |>
    #group_by(site_name, year, yday, tempVar) |>
    select(-std.error, -statistic, -p.value) |> # need to lose these columns so there are no unique values remaining in non-widened cols
    pivot_wider(names_from = term, values_from = estimate)
  
  # Calculate amplitude and phase for air and water data
  params <- models |>
    group_by(site_name, year, yday, tempVar) |>
    mutate(
      amplitude = sqrt(A^2 + B^2),
      phase = ifelse(A < 0,
        12 + (24 / (2 * pi)) * atan(B / A), #switched order of A and B per Tim's email 5/17/24
        (24 / (2 * pi)) * atan(B / A)),
      mean = C
    ) |>
    left_join(
      dtHOUR |> select(site_name, year, yday) |> distinct(), by = c("site_name", "year", "yday")
    ) |>
    ungroup()
  
  # Return amplitude and phase parameters
  return(params)
}
```

### Get derived parameters

Function to calculate amplitude ratio, phase lag, and mean ratio parameters from sine wave regression models fits to daily paired air-stream temperature data:  
```{r}
getAmpPhase <- function(paramsIn) {
  paramsIn |>
    select(site_name, year, yday, tempVar, amplitude, phase, mean, rSquared) |>
    pivot_wider(
      names_from = tempVar,
      values_from = c(amplitude, phase, mean, rSquared)
    ) |>
    select(
      site_name, year, yday,
      starts_with("amplitude"),
      starts_with("phase"),
      starts_with("mean"),
      starts_with("rSquared")
    ) |>
    mutate(
      amplitudeRatio = amplitude_water / amplitude_air,
      phaseLag = ((phase_air - phase_water + 12) %% 24) - 12,#phase_water - phase_air, # Tim's equation for phase lag
      meanRatio = mean_water / mean_air,
      meanOffset = mean_water - mean_air
    )
}
```

### Predictions

Function to predict air or water temperature from fitted models: 
```{r}
getParamsPred <- function(paramsIn) {

  uniqueValues <- paramsIn |>
    distinct(site_name, year, yday, tempVar)

  preds <- crossing(uniqueValues, hour = 0:23) %>%
    left_join(paramsIn, by = c("site_name", "year", "yday", "tempVar")) %>%
    mutate(
      hour_rad = hour * (2 * pi / 24),
      predTemp = A * sin(hour_rad) + B * cos(hour_rad) + C
    )

    return(preds)
 }
```


## Perform PASTA

### Get model parameters

Perform PASTA and write output to file
```{r eval=FALSE}
pasta <- getParams(dtHOUR = dat2)
write_csv(pasta, "C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_daily_parameters.csv")
```

Read in
```{r}
pasta <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_daily_parameters.csv")
head(pasta)
```


### Get derived parameters
```{r}
pasta_derived <- getAmpPhase(paramsIn = pasta)
pasta_derived <- pasta_derived %>% mutate(date = parse_date_time(x = paste(year, yday), orders = "yj")) %>% relocate(date, .after = site_name)
head(pasta_derived)
write_csv(pasta_derived, "C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_derived_parameters_daily.csv")
```


### Predict temperature

Predict air and stream temperature from fitted sine wave regression models and write predictions to file
```{r eval=FALSE}
preds <- getParamsPred(paramsIn = pasta)
preds <- preds %>% mutate(datetime = parse_date_time(x = paste(year, yday, hour), orders = "yjh")) %>% relocate(datetime, .after = site_name) %>% select(site_name, datetime, tempVar, rSquared, predTemp) %>% pivot_wider(names_from = tempVar, values_from = c(predTemp, rSquared))
write_csv(preds, "C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_predicted_temp.csv")
```

Read in
```{r}
preds <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_predicted_temp.csv")
tz(preds$datetime) <- "UTC"
head(preds)
```


## Explore PASTA output

Add mean daily flow to derived PASTA metrics (z-scored by site)
```{r}
dat3 <- dat2 %>% 
  mutate(date = as_date(datetime)) %>% 
  group_by(site_name, date) %>% 
  summarize(flow = mean(flow, na.rm = TRUE), z_flow = mean(z_flow, na.rm = TRUE))
pasta_derived <- pasta_derived %>% left_join(dat3)
head(pasta_derived)
```

View all sites
```{r}
unique(pasta_derived$site_name)
```


### Single site

*Generate interactive time series plots of PASTA output for a single focal site*

Set focal site
```{r}
focal_site <- "Leidy Creek Mouth NWIS"
focal_site
```

#### Amplitude ratio

Amplitude ratio: amplitude_water - amplitude_air. Generally, lower amplitude ratios (greater decoupling between air and water temperature sinusoids) are indicative of greater fractional groundwater inputs. (In Rey et al. 2024, Ar values tend to be most similar among tributary/mainstem sites during periods of high surface water input. I.e., high flows homogenize spatial variation in groundwater-surface water dynamics).
```{r}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% select(date, amplitudeRatio) %>% dygraph(main = focal_site) %>% dyRangeSelector() %>% dyAxis("y", label = "Amplitude ratio") %>% dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 3) %>% dyHighlight(highlightCircleSize = 5)
```

```{r fig.width=8, fig.height=6}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% ggplot(aes(x = yday, y = amplitudeRatio, color = z_flow)) + geom_point() + ggtitle(focal_site) + geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + facet_wrap(~year)
```

```{r fig.width=7, fig.height=6}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% ggplot(aes(x = z_flow, y = amplitudeRatio, color = as.factor(year))) + geom_point(alpha= 0.3) + ggtitle(focal_site) + geom_smooth(se = FALSE)
```

#### Phase lag

Phase lag: phase_water - phase_air. Phase lags are likely a result of diel groundwater temperature variations that are subsequently transferred to water temperatures signals. Generally, phase lag tends to be inversely related to amplitude ratio and may provide a secondary metric of fractional groundwater contributions.  
```{r}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% select(date, phaseLag) %>% dygraph(main = focal_site) %>% dyRangeSelector() %>% dyAxis("y", label = "Phase lag (hrs)") %>% dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 3) %>% dyLimit(0, color = "red") %>% dyHighlight(highlightCircleSize = 5)
```

```{r fig.width=8, fig.height=6}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% ggplot(aes(x = yday, y = phaseLag, color = z_flow)) + geom_point() + ggtitle(focal_site) + geom_smooth() + facet_wrap(~year)
```

```{r fig.width=7, fig.height=6}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% ggplot(aes(x = z_flow, y = phaseLag, color = as.factor(year))) + geom_point(alpha= 0.3) + ggtitle(focal_site) + geom_smooth(se = FALSE)
```


#### Mean ratio

Mean ratio: mean_water / mean_air. On daily timescales, mean ratio values indicate runoff/quickflow vs. local groundwater influence, with higher, more stable values at sites where hillslope drainage is reduced compared to total channel water volume (e.g., lower in network). I.e., across sites at any given time, low values indicate high fractional groundwater input and high values indicate low groundwater input. Within a site across time, gradual rise/change in Mr may be driven by changes in groundwater temperature over time as terrestrial hillslopes accumulate (spring and early summer) and/or lose (late summer and autumn) heat. Thereby indicating that groundwater flowpaths are shallow enough to be sensitive to seasonal warming/cooling. 

(In Rey et al. 2024, Mr values tend to be most similar among tributary/mainstem sites during periods of high surface water input. I.e., high flows homogenize spatial variation in groundwater-surface water dynamics).

Note this plot is trimmed to values [0,2] as very unreasonable values can result when daily mean air temperature is < 1. 
```{r}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7, rSquared_water >= 0.7, meanRatio >=0, meanRatio <= 2) %>% select(date, meanRatio) %>% dygraph(main = focal_site) %>% dyRangeSelector() %>% dyAxis("y", label = "Mean ratio") %>% dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 3) %>% dyHighlight(highlightCircleSize = 5)
```

```{r fig.width=8, fig.height=6}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7, meanRatio >=0, meanRatio <= 2) %>% ggplot(aes(x = yday, y = meanRatio, color = z_flow)) + geom_point() + ggtitle(focal_site) + geom_smooth() + facet_wrap(~year)
```

```{r fig.width=7, fig.height=6}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7, meanRatio >=0, meanRatio <= 2) %>% ggplot(aes(x = z_flow, y = meanRatio, color = as.factor(year))) + geom_point(alpha= 0.3) + ggtitle(focal_site) + geom_smooth(se = FALSE)
```


#### Pl-Ar correlation

In Rey et al. 2024, phase lag and amplitude ratio are often correlated. 
```{r fig.width=8, fig.height=6}
pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% ggplot(aes(x = amplitudeRatio, y = phaseLag, color = z_flow)) + geom_point() + ggtitle(focal_site) + geom_smooth(method = "lm") + facet_wrap(~year)
```

This simple OLS model shows that phase lag is negatively related to both amplitude ratio and flow. I.e., the intercept of the *Pl ~ Ar* relationship declines with increasing streamflow.
```{r}
summary(lm(phaseLag ~ amplitudeRatio*z_flow, pasta_derived %>% filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7)))
```


#### Model predictions

Plot predicted air and stream temperature (orange and blue lines, respectively) over observed air and stream temperature (orange and blue points, respectively). 
```{r}
dat2 %>% 
  select(site_name, datetime, airTemperature, waterTemperature) %>% 
  filter(site_name == focal_site) %>% 
  left_join(preds) %>% 
  filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
  select(-c(site_name, rSquared_air, rSquared_water)) %>% 
  mutate(datetime = datetime) %>% # need to fudge datetime b/c dyGraphs converts to local time zone
  dygraph(main = focal_site) %>% dyRangeSelector() %>% 
  #dyAxis("y", label = "Water temp.") %>% 
  #dyAxis("y2", label = "Air temp.") %>% 
  dySeries("waterTemperature", axis = "y", label = "Obs. water temp.", drawPoints = TRUE, strokeWidth = 0, pointSize = 3, color = "dodgerblue") %>% 
  dySeries("airTemperature", axis = "y", label = "Obs. air temp.", drawPoints = TRUE, strokeWidth = 0, pointSize = 3, color = "darkorange")  %>% 
  dySeries("predTemp_water", axis = "y", label = "Pred. water temp.", color = "dodgerblue") %>% 
  dySeries("predTemp_air", axis = "y", label = "Pred. air temp.", color = "darkorange")
```


### All sites

Define subbasins
```{r}
mysubbasins <- c("West Brook", "Paine Run", "Staunton River", "Big Creek", "Coal Creek", "McGee Creek", "Shields River", "Snake River", "Donner Blitzen", "Duck Creek")
```

#### Amplitude ratio

##### Temporal patterns
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i]) %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived %>% 
    filter(site_name %in% mysites, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
    mutate(year = factor(year), site_name = factor(site_name, levels = mysites)) %>% 
    ggplot(aes(x = yday, y = amplitudeRatio, color = year)) + 
    geom_point(alpha = 0.2) + 
    geom_smooth(se = FALSE) + #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
    ggtitle(mysubbasins[i]) + ylim(0,1) + 
    facet_wrap(~site_name, ncol = 3)
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=10}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=8}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=8}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=8}
myplots[[10]]
```
:::

##### By Flow
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i]) %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived %>% 
    filter(site_name %in% mysites, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
    mutate(year = factor(year), site_name = factor(site_name, levels = mysites)) %>% 
    ggplot(aes(x = z_flow, y = amplitudeRatio, color = year)) + 
    geom_point(alpha = 0.2) + 
    geom_smooth(se = FALSE) + #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
    ggtitle(mysubbasins[i]) + ylim(0,1) + 
    facet_wrap(~site_name, ncol = 3, scales = "free_x")
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=10}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=8}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=8}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=3}
myplots[[10]]
```
:::


#### Phase lag

##### Temporal patterns
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i]) %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived %>% 
    filter(site_name %in% mysites, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
    mutate(year = factor(year), site_name = factor(site_name, levels = mysites)) %>% 
    ggplot(aes(x = yday, y = phaseLag, color = year)) + 
    geom_point(alpha = 0.2) + 
    geom_smooth(se = FALSE) + #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
    facet_wrap(~site_name, ncol = 3)
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=10}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=8}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=8}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=3}
myplots[[10]]
```
:::

##### By Flow
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i]) %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived %>% 
    filter(site_name %in% mysites, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
    mutate(year = factor(year), site_name = factor(site_name, levels = mysites)) %>% 
    ggplot(aes(x = z_flow, y = phaseLag, color = year)) + 
    geom_point(alpha = 0.2) + 
    geom_smooth(se = FALSE) + #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
    facet_wrap(~site_name, ncol = 3, scales = "free_x")
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=10}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=8}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=8}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=3}
myplots[[10]]
```
:::


#### Mean ratio

##### Temporal patterns
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i]) %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived %>% 
    filter(site_name %in% mysites, rSquared_air >= 0.7 & rSquared_water >= 0.7, meanRatio >=0, meanRatio <= 2) %>% 
    mutate(year = factor(year), site_name = factor(site_name, levels = mysites)) %>% 
    ggplot(aes(x = yday, y = meanRatio, color = year)) + 
    geom_point(alpha = 0.2) + 
    geom_smooth(se = FALSE) + #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    facet_wrap(~site_name, ncol = 3)
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=10}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=8}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=8}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=8}
myplots[[10]]
```
:::


##### By Flow
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i]) %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived %>% 
    filter(site_name %in% mysites, rSquared_air >= 0.7 & rSquared_water >= 0.7, meanRatio >=0, meanRatio <= 2) %>% 
    mutate(year = factor(year), site_name = factor(site_name, levels = mysites)) %>% 
    ggplot(aes(x = z_flow, y = meanRatio, color = year)) + 
    geom_point(alpha = 0.2) + 
    geom_smooth(se = FALSE) + #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    facet_wrap(~site_name, ncol = 3, scales = "free_x")
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=10}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=8}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=8}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=3}
myplots[[10]]
```
:::




#### Pl-Ar Correlation

```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i]) %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived %>% 
    filter(site_name %in% mysites, rSquared_air >= 0.7 & rSquared_water >= 0.7, phaseLag >= -5, phaseLag <= 10, amplitudeRatio >= 0, amplitudeRatio <= 1) %>% 
    mutate(year = factor(year), site_name = factor(site_name, levels = mysites)) %>% 
    ggplot(aes(x = amplitudeRatio, y = phaseLag, color = z_flow)) + 
    geom_point(alpha = 0.5) + 
    #geom_smooth(se = FALSE) + #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    facet_wrap(~site_name, ncol = 3)
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=10}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=8}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=8}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=3}
myplots[[10]]
```
:::



## Summarize output

### Rolling mean

#### Summarize

Summarize PASTA output as 7-day rolling means for use in the Wedge Model and elsewhere, per Rey *et al.* (2024)

Interpolate short gaps and calulate 7-day rolling mean
```{r}
# Drop poor fits then fill missing dates
pasta_derived_filled <- fill_missing_dates(pasta_derived %>% filter(rSquared_air >= 0.7 & rSquared_water >= 0.7), dates = date, groups = site_name) #%>% group_by(site_name) %>% arrange(site_name, date) 

# get rid of crazy mean ratio values
pasta_derived_filled <- pasta_derived_filled %>%
  mutate(meanRatio = ifelse(meanRatio < 0, NA,
                            ifelse(meanRatio > 2, NA, meanRatio)))

# Interpolate short gaps (<=3 days) and calculate 7-day rolling mean as in Rey et al. (2024)
datalist <- list()
mysites <- unique(pasta_derived_filled$site_name)
for (i in 1:length(mysites)) { 
  datalist[[i]] <- pasta_derived_filled %>% 
    filter(site_name == mysites[i]) %>% 
    mutate(amplitudeRatio_fill = na.approx(amplitudeRatio, maxgap = 3, na.rm = FALSE),
           phaseLag_fill = na.approx(phaseLag, maxgap = 3, na.rm = FALSE),
           meanRatio_fill = na.approx(meanRatio, maxgap = 3, na.rm = FALSE)) %>%
    mutate(amplitudeRatio_fill_roll7 = rollapply(amplitudeRatio_fill, FUN = mean, width = 7, align = "center", fill = NA),
           phaseLag_fill_roll7 = rollapply(phaseLag_fill, FUN = mean, width = 7, align = "center", fill = NA),
           meanRatio_fill_roll7 = rollapply(meanRatio_fill, FUN = mean, width = 7, align = "center", fill = NA))
}
pasta_derived_filled <- do.call(rbind, datalist)
```

Write to file
```{r}
write_csv(pasta_derived_filled, "C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_derived_parameters_7daymean.csv")
```

Set focal site
```{r}
focal_site <- "McGeeCreekUpper"
print(focal_site)
```
View focal data
```{r}
pasta_derived_filled %>% 
  filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) 
```

Amplitude Ratio
```{r fig.width=8, fig.height=6}
pasta_derived_filled %>% 
  filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
  ggplot() + 
  geom_point(aes(x = yday, y = amplitudeRatio), color = "black") + ggtitle(focal_site) + 
  geom_point(aes(x = yday, y = amplitudeRatio_fill_roll7), color = "red") + ggtitle(focal_site) + 
  #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
  facet_wrap(~year)
```

Phase Lag
```{r fig.width=8, fig.height=6}
pasta_derived_filled %>% 
  filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
  ggplot() + 
  geom_point(aes(x = yday, y = phaseLag), color = "black") + ggtitle(focal_site) + 
  geom_point(aes(x = yday, y = phaseLag_fill_roll7), color = "red") + ggtitle(focal_site) + 
  #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
  facet_wrap(~year)
```

Mean Ratio
```{r fig.width=8, fig.height=6}
pasta_derived_filled %>% 
  filter(site_name == focal_site, rSquared_air >= 0.7 & rSquared_water >= 0.7) %>% 
  ggplot() + 
  geom_point(aes(x = yday, y = meanRatio), color = "black") + ggtitle(focal_site) + 
  geom_point(aes(x = yday, y = meanRatio_fill_roll7), color = "red") + ggtitle(focal_site) + 
  #geom_smooth(method = "lm", formula = y ~ poly(x, 2)) + 
  facet_wrap(~year)
```


#### Calculate Gg difference

Join big G PASTA derived parameters (7-day rolling means) to little g PASTA derived parameters and calculate difference (little - big).
```{r}
pasta_derived_filled_big <- pasta_derived_filled %>% left_join(siteinfo2 %>% select(site_name, subbasin, designation)) %>% filter(designation == "big") %>% select(-designation)

pasta_derived_filled_little <- pasta_derived_filled %>% left_join(siteinfo2 %>% select(site_name, subbasin, designation)) %>% filter(designation == "little") %>% select(-designation)

pasta_derived_filled_join <- pasta_derived_filled_little %>% 
  select(site_name, subbasin, date, rSquared_air, rSquared_water, amplitudeRatio_fill_roll7, phaseLag_fill_roll7, meanRatio_fill_roll7) %>% 
  rename(site_name_little = site_name, rSquared_air_little = rSquared_air, rSquared_water_little = rSquared_water, amplitudeRatio_fill_roll7_little = amplitudeRatio_fill_roll7, phaseLag_fill_roll7_little = phaseLag_fill_roll7, meanRatio_fill_roll7_little = meanRatio_fill_roll7) %>% 
  left_join(pasta_derived_filled_big %>% 
  select(site_name, subbasin, date, rSquared_air, rSquared_water, amplitudeRatio_fill_roll7, phaseLag_fill_roll7, meanRatio_fill_roll7) %>% 
  rename(site_name_big = site_name, rSquared_air_big = rSquared_air, rSquared_water_big = rSquared_water, amplitudeRatio_fill_roll7_big = amplitudeRatio_fill_roll7, phaseLag_fill_roll7_big = phaseLag_fill_roll7, meanRatio_fill_roll7_big = meanRatio_fill_roll7)) %>% 
  filter(rSquared_air_little >= 0.7, rSquared_water_little >= 0.7, rSquared_air_big >= 0.7, rSquared_water_big >= 0.7) %>%
  mutate(amplitudeRatio_diff = amplitudeRatio_fill_roll7_little - amplitudeRatio_fill_roll7_big,
         phaseLag_diff = phaseLag_fill_roll7_little - phaseLag_fill_roll7_big,
         meanRatio_diff = meanRatio_fill_roll7_little - meanRatio_fill_roll7_big,
         yday = yday(date),
         year = year(date))
```

Write to file
```{r}
write_csv(pasta_derived_filled_join, "C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_derived_parameters_7daymean_gGdiff.csv")
```


##### Amplitude ratio
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i], designation == "little") %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived_filled_join %>% 
    filter(site_name_little %in% mysites) %>% 
    mutate(year = factor(year), site_name = factor(site_name_little, levels = mysites)) %>% 
    ggplot(aes(x = yday, y = amplitudeRatio_diff, color = year)) + 
    geom_point(alpha = 0.5) + 
    geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    facet_wrap(~site_name_little, ncol = 3)
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=8}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=6}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=6}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=4}
myplots[[10]]
```
:::


##### Phase lag
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i], designation == "little") %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived_filled_join %>% 
    filter(site_name_little %in% mysites) %>% 
    mutate(year = factor(year), site_name = factor(site_name_little, levels = mysites)) %>% 
    ggplot(aes(x = yday, y = phaseLag_diff, color = year)) + 
    geom_point(alpha = 0.5) + 
    geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    facet_wrap(~site_name_little, ncol = 3)
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=8}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=6}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=6}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=4}
myplots[[10]]
```
:::


##### Mean ratio
```{r}
myplots <- list()
for (i in 1:length(mysubbasins)) {
  mysites <- unlist(siteinfo2 %>% filter(site_name %in% unique(pasta_derived$site_name)) %>% filter(subbasin == mysubbasins[i], designation == "little") %>% arrange(desc(area_sqmi)) %>% select(site_name))
  myplots[[i]] <- pasta_derived_filled_join %>% 
    filter(site_name_little %in% mysites) %>% 
    mutate(year = factor(year), site_name = factor(site_name_little, levels = mysites)) %>% 
    ggplot(aes(x = yday, y = meanRatio_diff, color = year)) + 
    geom_point(alpha = 0.5) + 
    geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
    ggtitle(mysubbasins[i]) + #ylim(0,1) + 
    facet_wrap(~site_name_little, ncol = 3)
}
```

:::panel-tabset
###### West Brook
```{r fig.width=8, fig.height=8}
myplots[[1]]
```
###### Paine Run
```{r fig.width=8, fig.height=6}
myplots[[2]]
```
###### Staunton River
```{r fig.width=8, fig.height=6}
myplots[[3]]
```
###### Big Creek
```{r fig.width=8, fig.height=8}
myplots[[4]]
```
###### Coal Creek
```{r fig.width=8, fig.height=6}
myplots[[5]]
```
###### McGee Creek
```{r fig.width=8, fig.height=3}
myplots[[6]]
```
###### Shields River
```{r fig.width=8, fig.height=8}
myplots[[7]]
```
###### Snake River
```{r fig.width=8, fig.height=10}
myplots[[8]]
```
###### Donner Blitzen
```{r fig.width=8, fig.height=6}
myplots[[9]]
```
###### Duck Creek
```{r fig.width=8, fig.height=4}
myplots[[10]]
```
:::


### August mean

Summarize gG differenced PASTA output as site-level August means, across all years.
```{r}
pasta_derived_august <- pasta_derived_filled_join %>% 
  mutate(month = month(date)) %>% 
  filter(month == 8, 
         rSquared_air_little >= 0.7, rSquared_water_little >= 0.7, 
         rSquared_air_big >= 0.7, rSquared_water_big >= 0.7) %>% 
  group_by(site_name_little) %>% 
  summarize(amplitudeRatio_little_AugMean = mean(amplitudeRatio_fill_roll7_little, na.rm = TRUE),
            phaseLag_little_AugMean = mean(phaseLag_fill_roll7_little, na.rm = TRUE),
            meanRatio_little_AugMean = mean(meanRatio_fill_roll7_little, na.rm = TRUE),
            amplitudeRatio_big_AugMean = mean(amplitudeRatio_fill_roll7_big, na.rm = TRUE),
            phaseLag_big_AugMean = mean(phaseLag_fill_roll7_big, na.rm = TRUE),
            meanRatio_big_AugMean = mean(meanRatio_fill_roll7_big, na.rm = TRUE),
            amplitudeRatio_diff_AugMean = mean(amplitudeRatio_diff, na.rm = TRUE),
            phaseLag_diff_AugMean = mean(phaseLag_diff, na.rm = TRUE),
            meanRatio_diff_AugMean = mean(meanRatio_diff, na.rm = TRUE))
head(pasta_derived_august)
```


Write to file
```{r}
write_csv(pasta_derived_august, "C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_derived_parameters_AugustDiff.csv")
```



