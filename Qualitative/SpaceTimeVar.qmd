---
title: "Objective 1"
execute:
  cache: false
---

```{r, include = FALSE}
library(tidyverse)
library(mapview)
library(sf)
library(ggpubr)
library(fasstr)
library(dygraphs)
library(htmlwidgets)
library(knitr)
library(RColorBrewer)
library(scales)
library(GGally)
library(DT)
library(TSdist)
library(ggridges)
library(ggh4x)
library(viridis)
library(daymetr)
library(scico)
library(cetcolor)
library(plotly)
library(cowplot)
library(hydroEvents)
library(dtw)
library(nhdplusTools)
library(glue)
library(hydroGOF)
library(rptR)
library(moments)
library(fmsb)
library(terra)
library(ggspatial)
```


**Purpose:** Evaluate the extent and magnitude of spatial and temporal variation in headwater streamflow.

**Approach:**

* Visualize time series data to show difference in streamflow regimes between reference gages (big G/NWIS) and upstream gages (little g's)
* Back up with flow exceedance curves to describe spatial diversity in distribution of flow values, generally 

**Notes:**

* Consider combining subbasins 
  - Flathead = Coal, Big, and McGee Creeks
  - Yellowstone = Shields River and Duck Creek
  - Shenandoah??? Hard b/c Staunton, Paine, and Piney all use different big G's
* Might be helpful to plot panels of static time series plot on the same x-axis/time scale 
* Not sure how necessary ridgeline plots are under the current framework/objectives, although they do highlight differences in variability between big and littls g's
* Exceedance curves need updating/doing, perhaps facet by year and restrict to summer/low flow season only (July, August, September). 


## Data

Site information
```{r}
siteinfo <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv")
siteinfo_sp <- st_as_sf(siteinfo, coords = c("long", "lat"), crs = 4326)
```

Little g's
```{r}
dat_clean <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv")
```

Big G's
```{r}
dat_clean_big <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv")
```

Climate
```{r}
climdf <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate.csv")
climdf_summ <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate_summary.csv")
```

Water availability. In western, snowmelt-dominated basins, annual (water year) total yield is strongly related to summer total yield. But in eastern, rain-dominated basins, the relationship is much weaker, suggesting "faster" response to climate forcing.
```{r}
wateravail <- read_csv("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_wateravailability_annual.csv") %>%
  filter(!is.na(totalyield), !is.na(totalyield_sum)) %>%
  group_by(site_name) %>%
  mutate(tyz_perc = percentile(totalyield_z),
         tyz_sum_perc = percentile(totalyield_sum_z)) %>%
  mutate(tyz_perc = ifelse(is.na(tyz_perc), 0, tyz_perc),
         tyz_sum_perc = ifelse(is.na(tyz_sum_perc), 0, tyz_sum_perc))

wateravail %>% 
  ggplot(aes(x = tyz_perc, y = tyz_sum_perc)) + 
  geom_point() + 
  geom_smooth(method = "lm") +
  xlab("Total annual yield (percentile)") + ylab("Total summer yield (percentile)") + 
  facet_wrap(~basin) + theme_bw()
```


Watersheds
```{r results='hide'}
sheds_list <- list()
myfiles <- list.files(path = "C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/", pattern = ".shp")
for (i in 1:length(myfiles)) {
  sheds_list[[i]] <- st_read(paste("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/", myfiles[i], sep = ""))
}
sheds <- do.call(rbind, sheds_list) %>% 
  mutate(site_id = ifelse(site_id == "SP01", "SP07", ifelse(site_id == "SP07", "SP01", site_id))) %>%
  left_join(siteinfo)
#mapview(sheds %>% arrange(desc(area_sqmi)), alpha.regions = 0.2)
```

## Order sites

For colors, order sites from downstream to upstream (roughly) and by subbasin (if appropriate)
```{r}
wborder <- c("West Brook NWIS", "West Brook Lower", "Mitchell Brook", "Jimmy Brook", "Obear Brook Lower", "West Brook Upper", "West Brook Reservoir", "Sanderson Brook", "Avery Brook", "West Whately Brook")
paineorder <- c("Paine Run 10", "Paine Run 08", "Paine Run 07", "Paine Run 06", "Paine Run 02", "Paine Run 01")
stauntorder <- c("Staunton River 10", "Staunton River 09", "Staunton River 07", "Staunton River 06", "Staunton River 03", "Staunton River 02")
flatorder <- c("BigCreekLower", "LangfordCreekLower", "LangfordCreekUpper", "Big Creek NWIS", "BigCreekUpper", "HallowattCreekLower", "NicolaCreek", "WernerCreek", "Hallowat Creek NWIS", "CoalCreekLower", "CycloneCreekLower", "CycloneCreekMiddle", "CycloneCreekUpper", "CoalCreekMiddle", "CoalCreekNorth", "CoalCreekHeadwaters", "McGeeCreekLower", "McGeeCreekTrib", "McGeeCreekUpper")
yellorder <- c("Shields River Valley Ranch", "Deep Creek", "Crandall Creek", "Buck Creek", "Dugout Creek", "Shields River ab Dugout", "Lodgepole Creek", "EF Duck Creek be HF", "EF Duck Creek ab HF", "Henrys Fork")
snakeorder <- c("Spread Creek Dam", "Rock Creek", "NF Spread Creek Lower", "NF Spread Creek Upper", "Grizzly Creek", "SF Spread Creek Lower", "Grouse Creek", "SF Spread Creek Upper", "Leidy Creek Mouth")
donnerorder <- c("Fish Creek NWIS", "Donner Blitzen ab Fish NWIS", "Donner Blitzen nr Burnt Car NWIS", "Donner Blitzen ab Indian NWIS")
```


## Map objects

Currently not being used...
```{r WEST BROOK, eval=FALSE, include=FALSE}
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Mass_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "WBR",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Mass_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/WestBrook_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# get lakes
lakes <- get_waterbodies(AOI = siteinfo_sp %>% filter(site_name == "West Brook NWIS"), buffer = 10000)
lakes <- lakes %>% filter(gnis_name %in% c("Northampton Reservoir Upper", "Northampton Reservoir"))

# little g points
mylittleg <- siteinfo_sp %>% filter(site_name %in% wborder) %>% mutate(site_name = factor(site_name, levels = wborder))

# create map
map_WB <- ggplot() +
  geom_raster(data = hilldf, aes(x = x, y = y, fill = hillshade), show.legend = FALSE) +
  scale_fill_distiller(palette = "Greys") +
  geom_sf(data = st_as_sf(mysheds), color = "black", fill = NA, linewidth = 0.4) + 
  geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 1) +
  geom_sf(data = lakes, color = "royalblue4", fill = "lightskyblue1", linewidth = 0.5) +
  geom_sf(data = mylittleg) +
  labs(color = "") + annotation_scale() +
  coord_sf(xlim = range(st_coordinates(mylittleg)[,1]), ylim = range(st_coordinates(mylittleg)[,2])) +
  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none")
map_WB
rm("mysheds", "mynet", "myrast", "slo", "asp", "hill", "hilldf", "lakes", "mylittleg")
```

```{r STAUNTON RIVER, eval=FALSE, include=FALSE}
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shen_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "SR_10FL",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shen_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/Shenandoah_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# little g points
mylittleg <- siteinfo_sp %>% filter(site_name %in% stauntorder) %>% mutate(site_name = factor(site_name, levels = stauntorder))

# create map
map_ST <- ggplot() +
  geom_raster(data = hilldf, aes(x = x, y = y, fill = hillshade), show.legend = FALSE) +
  scale_fill_distiller(palette = "Greys") +
  geom_sf(data = st_as_sf(mysheds), color = "black", fill = NA, linewidth = 0.4) + 
  geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 1) +
  geom_sf(data = mylittleg) +
  labs(color = "") + annotation_scale() +
  coord_sf(xlim = range(st_coordinates(mylittleg)[,1]), ylim = range(st_coordinates(mylittleg)[,2])) +
  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none")
map_ST
rm("mysheds", "mynet", "myrast", "slo", "asp", "hill", "hilldf", "lakes", "mylittleg")
```

```{r PAINE RUN, eval=FALSE, include=FALSE}
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shen_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "PA_10FL",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shen_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/Shenandoah_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# little g points
mylittleg <- siteinfo_sp %>% filter(site_name %in% paineorder) %>% mutate(site_name = factor(site_name, levels = paineorder))

# create map
map_PA <- ggplot() +
  geom_raster(data = hilldf, aes(x = x, y = y, fill = hillshade), show.legend = FALSE) +
  scale_fill_distiller(palette = "Greys") +
  geom_sf(data = st_as_sf(mysheds), color = "black", fill = NA, linewidth = 0.4) + 
  geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 1) +
  geom_sf(data = mylittleg) +
  labs(color = "") + annotation_scale(location = "tl") +
  coord_sf(xlim = range(st_coordinates(mylittleg)[,1]), ylim = range(st_coordinates(mylittleg)[,2])) +
  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none")
map_PA
rm("mysheds", "mynet", "myrast", "slo", "asp", "hill", "hilldf", "lakes", "mylittleg")
```

```{r FLATHEAD, eval=FALSE, include=FALSE}
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Flat_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "NFF",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Flat_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/NorthForkFlathead_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# get lakes
lakes <- get_waterbodies(AOI = siteinfo_sp %>% filter(site_name == "North Fork Flathead River NWIS"), buffer = 100000)
lakes <- st_transform(lakes, crs(mysheds))
lakes <- st_intersection(lakes, st_as_sf(mysheds))
lakes <- lakes %>% filter(gnis_name %in% c("Moose Lake", "Mud Lake"))

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% flatorder) %>% mutate(site_name = factor(site_name, levels = flatorder))
st_geometry(mylittleg)[mylittleg$site_name == "BigCreekUpper"] <- st_point(c(-114.31506, 48.57672))
st_geometry(mylittleg)[mylittleg$site_name == "HallowattCreekLower"] <- st_point(c(-114.31914, 48.57256))

# create map
# mapview(mynet$UT_flowlines) + mapview((lakes)) + mapview(siteinfo_sp %>% filter(basin == "West Brook"))
map_FLBC <- ggplot() +
  geom_raster(data = hilldf, aes(x = x, y = y, fill = hillshade), show.legend = FALSE) +
  scale_fill_distiller(palette = "Greys") +
  geom_sf(data = st_as_sf(mysheds), color = "black", fill = NA, linewidth = 0.4) + 
  geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 1) +
  geom_sf(data = lakes, color = "royalblue4", fill = "lightskyblue1", linewidth = 0.5) +
  geom_sf(data = mylittleg) +
  labs(color = "") + annotation_scale(location = "br") +
  coord_sf(xlim = range(st_coordinates(mylittleg)[,1]), ylim = range(st_coordinates(mylittleg)[,2])) +
  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none")
map_FLBC
rm("mysheds", "mynet", "myrast", "slo", "asp", "hill", "hilldf", "lakes", "mylittleg")
```

```{r SPREAD CREEK SNAKE, eval=FALSE, include=FALSE}
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Snake_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "SP11",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Snake_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/SpreadCreek_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# get lakes
lakes <- get_waterbodies(AOI = siteinfo_sp %>% filter(site_name == "Spread Creek Dam"), buffer = 100000)
lakes <- st_transform(lakes, crs(mysheds))
lakes <- st_intersection(lakes, st_as_sf(mysheds))
lakes <- lakes %>% filter(gnis_name %in% c("Leidy Lake"))

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% snakeorder) %>% mutate(site_name = factor(site_name, levels = snakeorder))
# edit geometry to reduce overlap
st_geometry(mylittleg)[mylittleg$site_name == "SF Spread Creek Lower NWIS"] <- st_point(c(-110.32226, 43.76118))
st_geometry(mylittleg)[mylittleg$site_name == "NF Spread Creek Lower"] <- st_point(c(-110.3199, 43.766533))
st_geometry(mylittleg)[mylittleg$site_name == "Grizzly Creek"] <- st_point(c(-110.23289, 43.77433))
st_geometry(mylittleg)[mylittleg$site_name == "NF Spread Creek Upper"] <- st_point(c(-110.23405, 43.77227))
st_geometry(mylittleg)[mylittleg$site_name == "SF Spread Creek Upper"] <- st_point(c(-110.31475, 43.73661))

# create map
# mapview(mynet$UT_flowlines) + mapview((lakes)) + mapview(siteinfo_sp %>% filter(basin == "West Brook"))
map_SN <- ggplot() +
  geom_raster(data = hilldf, aes(x = x, y = y, fill = hillshade), show.legend = FALSE) +
  scale_fill_distiller(palette = "Greys") +
  geom_sf(data = st_as_sf(mysheds), color = "black", fill = NA, linewidth = 0.4) + 
  geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 1) +
  geom_sf(data = lakes, color = "royalblue4", fill = "lightskyblue1", linewidth = 0.5) +
  geom_sf(data = mylittleg) +
  labs(color = "") + annotation_scale() +
  coord_sf(xlim = range(st_coordinates(mylittleg)[,1]), ylim = range(st_coordinates(mylittleg)[,2])) +
  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none")
map_SN
rm("mysheds", "mynet", "myrast", "slo", "asp", "hill", "hilldf", "lakes", "mylittleg")
```

```{r DONNER BLITZEN, eval=FALSE, include=FALSE}
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Oreg_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "DBF",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Oreg_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/DonnerBlitzen_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% donnerorder) %>% mutate(site_name = factor(site_name, levels = donnerorder))
# edit geometry to reduce overlap
st_geometry(mylittleg)[mylittleg$site_name == "Donner Blitzen ab Fish NWIS"] <- st_point(c(-118.84315, 42.75476))
st_geometry(mylittleg)[mylittleg$site_name == "Fish Creek"] <- st_point(c(-118.83173, 42.75911))

# create map
# mapview(mynet$UT_flowlines) + mapview((lakes)) + mapview(siteinfo_sp %>% filter(basin == "West Brook"))
map_DB <- ggplot() +
  geom_raster(data = hilldf, aes(x = x, y = y, fill = hillshade), show.legend = FALSE) +
  scale_fill_distiller(palette = "Greys") +
  geom_sf(data = st_as_sf(mysheds), color = "black", fill = NA, linewidth = 0.4) + 
  geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 1) +
  geom_sf(data = mylittleg) +
  labs(color = "") + annotation_scale() +
  coord_sf(xlim = range(st_coordinates(mylittleg)[,1]), ylim = range(st_coordinates(mylittleg)[,2])) +
  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none")
map_DB
rm("mysheds", "mynet", "myrast", "slo", "asp", "hill", "hilldf", "lakes", "mylittleg")
```

```{r SHIELDS RIVER, eval=FALSE, include=FALSE}
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shields_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "SRS",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shields_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/Shields_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% yellorder) %>% mutate(site_name = factor(site_name, levels = yellorder)) %>% filter(subbasin != "Duck Creek")

# create map
# mapview(mynet$UT_flowlines) + mapview((lakes)) + mapview(siteinfo_sp %>% filter(basin == "West Brook"))
map_YE <- ggplot() +
  geom_raster(data = hilldf, aes(x = x, y = y, fill = hillshade), show.legend = FALSE) +
  scale_fill_distiller(palette = "Greys") +
  geom_sf(data = st_as_sf(mysheds), color = "black", fill = NA, linewidth = 0.4) + 
  geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 1) +
  geom_sf(data = mylittleg) +
  labs(color = "") + annotation_scale() +
  coord_sf(xlim = range(st_coordinates(mylittleg)[,1]), ylim = range(st_coordinates(mylittleg)[,2])) +
  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none")
map_YE
rm("mysheds", "mynet", "myrast", "slo", "asp", "hill", "hilldf", "lakes", "mylittleg")
```


## Spaghetti plots

View daily time series data by sub-basin. Note that we are using the "Super G" NWIS data for the reference gage (black line). Per Robert comment, entirely nested design is cute, but doesn't reflect how the data is actually used. 

Big G NWIS sites/reference gages for each basin/subbasin:
```{r}
dat_clean_big %>% group_by(region, basin, subbasin) %>% summarize(site_name = unique(site_name)) %>% ungroup() %>% filter(!is.na(region)) %>% kable()

dat_clean %>% group_by(region, basin) %>% summarize(subbasin = unique(subbasin)) %>% ungroup() #%>% filter(!is.na(region)) %>% kable()
```


### Interactive

::: panel-tabset
##### West Brook
```{r, echo=FALSE}
dat_clean %>% 
  filter(subbasin == "West Brook") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "West Brook", year(date) >= 2020, date <= date("2025-01-03"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("South River Conway NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% 
  #dyOptions(colors = c(brewer.pal(8, "Dark2"), "dodgerblue", "darkorchid", "black")) %>% 
  dySeries("South River Conway NWIS", strokeBorderWidth = 1, strokeWidth = 1.5, color = "black")
```
##### Paine Run
```{r, echo=FALSE}
dat_clean %>% 
  filter(subbasin == "Paine Run") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Paine Run", date >= as_date("2018-11-07"), date <= as_date("2023-05-15"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("South River Harriston NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% 
  # dyOptions(colors = c(brewer.pal(6, "Dark2"), "black")) %>% 
  dySeries("South River Harriston NWIS", strokeBorderWidth = 1, strokeWidth = 1.5, color = "black")
```
##### Staunton River
```{r, echo=FALSE}
dat_clean %>% 
  filter(subbasin == "Staunton River") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Staunton River",date >= as_date("2018-11-07"), date <= as_date("2022-10-19"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("Rapidan River NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% 
  # dyOptions(colors = c(brewer.pal(6, "Dark2"), "black")) %>% 
  dySeries("Rapidan River NWIS", strokeBorderWidth = 1, strokeWidth = 1.5, color = "black")
```
##### Flathead
```{r}
dat_clean %>% 
  filter(basin == "Flathead") %>% 
  bind_rows(dat_clean_big %>% filter(basin == "Flathead", date >= date("2017-07-29"), date <= date("2023-12-11"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("North Fork Flathead River NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% 
  #dyOptions(colors = c(brewer.pal(7, "Dark2"), "black")) %>% 
  dySeries("North Fork Flathead River NWIS", strokeBorderWidth = 1, strokeWidth = 1.5, color = "black")
```
##### Yellowstone
```{r}
dat_clean %>% 
  filter(basin == "Shields River") %>% 
  bind_rows(dat_clean_big %>% filter(basin == "Shields River", date >= date("2015-04-01"), date <= date("2023-12-31"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("Yellowstone River Livingston NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% 
  #dyOptions(colors = c(brewer.pal(7, "Dark2"), "black")) %>% 
  dySeries("Yellowstone River Livingston NWIS", strokeBorderWidth = 1, strokeWidth = 1.5, color = "black")
```
##### Snake River
```{r, echo=FALSE}
dat_clean %>% 
  filter(subbasin == "Snake River") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Snake River", date >= date("2016-04-01"), date <= date("2023-10-03"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("Pacific Creek at Moran NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% 
  # dyOptions(colors = c(brewer.pal(8, "Dark2"), "dodgerblue", "black")) %>% 
  dySeries("Pacific Creek at Moran NWIS", strokeBorderWidth = 1, strokeWidth = 1.5, color = "black")
```
##### Donner Blitzen
```{r, echo=FALSE}
dat_clean %>% 
  filter(subbasin == "Donner Blitzen") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Donner Blitzen", date >= date("2019-06-01"), date <= as_date("2022-12-31"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("Donner Blitzen River nr Frenchglen NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% 
  # dyOptions(colors = c(brewer.pal(5, "Dark2"), "black")) %>% 
  dySeries("Donner Blitzen River nr Frenchglen NWIS", strokeBorderWidth = 1, strokeWidth = 1.5, color = "black")
```
:::

### Static

Create time series data plots objects
```{r}
### WEST BROOK
tempdat <- dat_clean %>% 
  filter(basin == "West Brook") %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "West Brook", date >= date("2020-01-01"), date <= date("2025-01-03"))
# color
pwb1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  ylim(-3,2) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "The West Brook", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# greyscale
pwb2 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = "grey") +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black", size = 1) +
  ylim(-3,2) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "The West Brook", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### PAINE RUN
tempdat <- dat_clean %>% 
  filter(basin == "Paine Run") %>%
  mutate(site_name = factor(site_name, levels = paineorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Paine Run", date >= as_date("2018-11-07"), date <= as_date("2023-05-15"))
# color
ppa1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = paineorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Paine Run", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# greyscale
ppa2 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = "grey") +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black", size = 1) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Paine Run", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### STAUNTON RIVER
tempdat <- dat_clean %>% 
  filter(basin == "Staunton River") %>%
  mutate(site_name = factor(site_name, levels = stauntorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Staunton River", date >= as_date("2018-11-07"), date <= as_date("2022-10-19"))
# color
pst1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = stauntorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Staunton River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# greyscale
pst2 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = "grey") +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black", size = 1) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Staunton River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### FLATHEAD
tempdat <- dat_clean %>% 
  filter(basin == "Flathead", date >= date("2017-07-29"), date <= date("2023-12-11")) %>%
  mutate(site_name = factor(site_name, levels = flatorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Flathead", date >= date("2017-07-29"), date <= date("2023-12-11"))
# color
pfl1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Flathead River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# greyscale
pfl2 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = "grey") +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black", size = 1) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Flathead River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### YELLOWSTONE
tempdat <- dat_clean %>% 
  filter(basin == "Shields River") %>%
  mutate(site_name = factor(site_name, levels = yellorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Shields River", date >= date("2015-04-01"), date <= date("2023-12-31"))
# color
pye1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = yellorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Yellowstone River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# greyscale
pye2 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = "grey") +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black", size = 1) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Yellowstone River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### SNAKE
tempdat <- dat_clean %>% 
  filter(basin == "Snake River") %>%
  mutate(site_name = factor(site_name, levels = snakeorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Snake River", date >= date("2016-04-01"), date <= date("2023-10-03"))
# color
psn1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = snakeorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Snake River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# greyscale
psn2 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = "grey") +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black", size = 1) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Snake River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### DONNER BLITZEN
tempdat <- dat_clean %>% 
  filter(basin == "Donner Blitzen") %>%
  mutate(site_name = factor(site_name, levels = donnerorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Donner Blitzen", date >= date("2019-06-01"), date <= as_date("2022-12-31"))
# color
pdb1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = donnerorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Donner und Blitzen River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# greyscale
pdb2 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = "grey") +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black", size = 1) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Donner und Blitzen River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
```

Generate plot
```{r fig.width=7, fig.height=11}
annotate_figure(egg::ggarrange(pwb1, ppa1, pst1, pfl1, pye1, psn1, pdb1, ncol = 1), left = "log(Yield, mm/day)")
```

Write to file
```{r}
jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/EcoD_timeseries_new.jpg", width = 6, height = 11, units = "in", res = 1000)
annotate_figure(egg::ggarrange(pwb1, ppa1, pst1, pfl1, pye1, psn1, pdb1, ncol = 1), left = "log(Yield, mm/day)")
dev.off()
```


## Exceedance curves

Summer exceedance curves and spatial variability in flow relative to (bootstrapped) temporal variability
```{r}
### WEST BROOK
tempdat <- dat_clean %>% 
  filter(basin == "West Brook", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "West Brook", date >= date("2020-01-01"), date <= date("2025-01-03"))
# exceedance
exceed_little <- tempdat %>%
  group_by(site_name) %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
  ungroup()
exceed_big <- tempdat_big %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield))
# plot
ewb1 <- ggplot() +
  geom_line(data = exceed_little, aes(x = exceedance, y = logYield, color = factor(site_name, levels = wborder))) +
  geom_line(data = exceed_big, aes(x = exceedance, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  #annotate("text", x = max(c(exceed_big$exceedance, exceed_little$exceedance), na.rm = TRUE), y = max(c(exceed_big$logYield, exceed_little$logYield), na.rm = TRUE), label = "The West Brook", hjust = 1, vjust = 1) +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# summarize
exceed_little_sd <- exceed_little %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(site_name, exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  group_by(exceedance) %>% 
  summarize(sdyield = sd(logYield)) %>%
  ungroup()
exceed_big_sum <- exceed_big %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  filter(!is.na(logYield))
# bootstrap
nreps <- 1000
randsampsd <- c()
for (i in 1:nreps) { randsampsd[i] <- sd(sample(exceed_big_sum$logYield, size = nsites, replace = FALSE)) }
exceed_little_sd_exp <- do.call("rbind", replicate(nreps, exceed_little_sd, simplify = FALSE))
exceed_little_sd_exp <- exceed_little_sd_exp %>% 
  mutate(sdbigtemp = rep(randsampsd, each = nrow(exceed_little_sd)),
         replicate = rep(c(1:nreps), each = nrow(exceed_little_sd)),
         reldiff = ((sdyield-sdbigtemp)/sdbigtemp)*100)
exceed_little_sd_exp_sum <- exceed_little_sd_exp %>%
  group_by(exceedance) %>%
  summarize(q025 = quantile(reldiff, probs = 0.025),
            q10 = quantile(reldiff, probs = 0.10),
            q50 = quantile(reldiff, probs = 0.5),
            q90 = quantile(reldiff, probs = 0.90),
            q975 = quantile(reldiff, probs = 0.975))
# plot
vwb1 <- exceed_little_sd_exp_sum %>% 
  ggplot() + 
  geom_ribbon(aes(x = exceedance, ymin = q025, ymax = q975), fill = "grey85") +
  geom_ribbon(aes(x = exceedance, ymin = q10, ymax = q90), fill = "grey70") +
  geom_line(aes(x = exceedance, y = q50), color = "black", size = 1) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### PAINE RUN
tempdat <- dat_clean %>% 
  filter(basin == "Paine Run", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = paineorder))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Paine Run", date >= as_date("2018-11-07"), date <= as_date("2023-05-15"))
# exceedance
exceed_little <- tempdat %>%
  group_by(site_name) %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
  ungroup()
exceed_big <- tempdat_big %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield))
# plot
epa1 <- ggplot() +
  geom_line(data = exceed_little, aes(x = exceedance, y = logYield, color = factor(site_name, levels = paineorder))) +
  geom_line(data = exceed_big, aes(x = exceedance, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  #annotate("text", x = max(c(exceed_big$exceedance, exceed_little$exceedance), na.rm = TRUE), y = max(c(exceed_big$logYield, exceed_little$logYield), na.rm = TRUE), label = "Paine Run", hjust = 1, vjust = 1) +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# summarize
exceed_little_sd <- exceed_little %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(site_name, exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  group_by(exceedance) %>% 
  summarize(sdyield = sd(logYield)) %>%
  ungroup()
exceed_big_sum <- exceed_big %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  filter(!is.na(logYield))
# bootstrap
nreps <- 1000
randsampsd <- c()
for (i in 1:nreps) { randsampsd[i] <- sd(sample(exceed_big_sum$logYield, size = nsites, replace = FALSE)) }
exceed_little_sd_exp <- do.call("rbind", replicate(nreps, exceed_little_sd, simplify = FALSE))
exceed_little_sd_exp <- exceed_little_sd_exp %>% 
  mutate(sdbigtemp = rep(randsampsd, each = nrow(exceed_little_sd)),
         replicate = rep(c(1:nreps), each = nrow(exceed_little_sd)),
         reldiff = ((sdyield-sdbigtemp)/sdbigtemp)*100)
exceed_little_sd_exp_sum <- exceed_little_sd_exp %>%
  group_by(exceedance) %>%
  summarize(q025 = quantile(reldiff, probs = 0.025),
            q10 = quantile(reldiff, probs = 0.10),
            q50 = quantile(reldiff, probs = 0.5),
            q90 = quantile(reldiff, probs = 0.90),
            q975 = quantile(reldiff, probs = 0.975))
# plot
vpa1 <- exceed_little_sd_exp_sum %>% 
  ggplot() + 
  geom_ribbon(aes(x = exceedance, ymin = q025, ymax = q975), fill = "grey85") +
  geom_ribbon(aes(x = exceedance, ymin = q10, ymax = q90), fill = "grey70") +
  geom_line(aes(x = exceedance, y = q50), color = "black", size = 1) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### STAUNTON RIVER
tempdat <- dat_clean %>% 
  filter(basin == "Staunton River", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = stauntorder))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Staunton River", date >= as_date("2018-11-07"), date <= as_date("2022-10-19"))
# exceedance
exceed_little <- tempdat %>%
  group_by(site_name) %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
  ungroup()
exceed_big <- tempdat_big %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield))
# plot
est1 <- ggplot() +
  geom_line(data = exceed_little, aes(x = exceedance, y = logYield, color = factor(site_name, levels = stauntorder))) +
  geom_line(data = exceed_big, aes(x = exceedance, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  #annotate("text", x = max(c(exceed_big$exceedance, exceed_little$exceedance), na.rm = TRUE), y = max(c(exceed_big$logYield, exceed_little$logYield), na.rm = TRUE), label = "Staunton River", hjust = 1, vjust = 1) +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# summarize
exceed_little_sd <- exceed_little %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(site_name, exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  group_by(exceedance) %>% 
  summarize(sdyield = sd(logYield)) %>%
  ungroup()
exceed_big_sum <- exceed_big %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  filter(!is.na(logYield))
# bootstrap
nreps <- 1000
randsampsd <- c()
for (i in 1:nreps) { randsampsd[i] <- sd(sample(exceed_big_sum$logYield, size = nsites, replace = FALSE)) }
exceed_little_sd_exp <- do.call("rbind", replicate(nreps, exceed_little_sd, simplify = FALSE))
exceed_little_sd_exp <- exceed_little_sd_exp %>% 
  mutate(sdbigtemp = rep(randsampsd, each = nrow(exceed_little_sd)),
         replicate = rep(c(1:nreps), each = nrow(exceed_little_sd)),
         reldiff = ((sdyield-sdbigtemp)/sdbigtemp)*100)
exceed_little_sd_exp_sum <- exceed_little_sd_exp %>%
  group_by(exceedance) %>%
  summarize(q025 = quantile(reldiff, probs = 0.025),
            q10 = quantile(reldiff, probs = 0.10),
            q50 = quantile(reldiff, probs = 0.5),
            q90 = quantile(reldiff, probs = 0.90),
            q975 = quantile(reldiff, probs = 0.975))
# plot
vst1 <- exceed_little_sd_exp_sum %>% 
  ggplot() + 
  geom_ribbon(aes(x = exceedance, ymin = q025, ymax = q975), fill = "grey85") +
  geom_ribbon(aes(x = exceedance, ymin = q10, ymax = q90), fill = "grey70") +
  geom_line(aes(x = exceedance, y = q50), color = "black", size = 1) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### FLATHEAD
tempdat <- dat_clean %>% 
  filter(basin == "Flathead", date >= date("2017-07-29"), date <= date("2023-12-11"), !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = flatorder))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Flathead", date >= date("2017-07-29"), date <= date("2023-12-11"))
# exceedance
exceed_little <- tempdat %>%
  group_by(site_name) %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
  ungroup()
exceed_big <- tempdat_big %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield))
# plot
efl1 <- ggplot() +
  geom_line(data = exceed_little, aes(x = exceedance, y = logYield, color = factor(site_name, levels = flatorder))) +
  geom_line(data = exceed_big, aes(x = exceedance, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  #annotate("text", x = max(c(exceed_big$exceedance, exceed_little$exceedance), na.rm = TRUE), y = max(c(exceed_big$logYield, exceed_little$logYield), na.rm = TRUE), label = "Flathead River", hjust = 1, vjust = 1) +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# summarize
exceed_little_sd <- exceed_little %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(site_name, exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  group_by(exceedance) %>% 
  summarize(sdyield = sd(logYield)) %>%
  ungroup()
exceed_big_sum <- exceed_big %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  filter(!is.na(logYield))
# bootstrap
nreps <- 1000
randsampsd <- c()
for (i in 1:nreps) { randsampsd[i] <- sd(sample(exceed_big_sum$logYield, size = nsites, replace = FALSE)) }
exceed_little_sd_exp <- do.call("rbind", replicate(nreps, exceed_little_sd, simplify = FALSE))
exceed_little_sd_exp <- exceed_little_sd_exp %>% 
  mutate(sdbigtemp = rep(randsampsd, each = nrow(exceed_little_sd)),
         replicate = rep(c(1:nreps), each = nrow(exceed_little_sd)),
         reldiff = ((sdyield-sdbigtemp)/sdbigtemp)*100)
exceed_little_sd_exp_sum <- exceed_little_sd_exp %>%
  group_by(exceedance) %>%
  summarize(q025 = quantile(reldiff, probs = 0.025),
            q10 = quantile(reldiff, probs = 0.10),
            q50 = quantile(reldiff, probs = 0.5),
            q90 = quantile(reldiff, probs = 0.90),
            q975 = quantile(reldiff, probs = 0.975))
# plot
vfl1 <- exceed_little_sd_exp_sum %>% 
  ggplot() + 
  geom_ribbon(aes(x = exceedance, ymin = q025, ymax = q975), fill = "grey85") +
  geom_ribbon(aes(x = exceedance, ymin = q10, ymax = q90), fill = "grey70") +
  geom_line(aes(x = exceedance, y = q50), color = "black", size = 1) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### YELLOWSTONE
tempdat <- dat_clean %>% 
  filter(basin == "Shields River", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = yellorder))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Shields River", date >= date("2015-04-01"), date <= date("2023-12-31"))
# exceedance
exceed_little <- tempdat %>%
  group_by(site_name) %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
  ungroup()
exceed_big <- tempdat_big %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield))
# plot
eye1 <- ggplot() +
  geom_line(data = exceed_little, aes(x = exceedance, y = logYield, color = factor(site_name, levels = yellorder))) +
  geom_line(data = exceed_big, aes(x = exceedance, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  #annotate("text", x = max(c(exceed_big$exceedance, exceed_little$exceedance), na.rm = TRUE), y = max(c(exceed_big$logYield, exceed_little$logYield), na.rm = TRUE), label = "Yellowstone River", hjust = 1, vjust = 1) +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# summarize
exceed_little_sd <- exceed_little %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(site_name, exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  group_by(exceedance) %>% 
  summarize(sdyield = sd(logYield)) %>%
  ungroup()
exceed_big_sum <- exceed_big %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  filter(!is.na(logYield))
# bootstrap
nreps <- 1000
randsampsd <- c()
for (i in 1:nreps) { randsampsd[i] <- sd(sample(exceed_big_sum$logYield, size = nsites, replace = FALSE)) }
exceed_little_sd_exp <- do.call("rbind", replicate(nreps, exceed_little_sd, simplify = FALSE))
exceed_little_sd_exp <- exceed_little_sd_exp %>% 
  mutate(sdbigtemp = rep(randsampsd, each = nrow(exceed_little_sd)),
         replicate = rep(c(1:nreps), each = nrow(exceed_little_sd)),
         reldiff = ((sdyield-sdbigtemp)/sdbigtemp)*100)
exceed_little_sd_exp_sum <- exceed_little_sd_exp %>%
  group_by(exceedance) %>%
  summarize(q025 = quantile(reldiff, probs = 0.025),
            q10 = quantile(reldiff, probs = 0.10),
            q50 = quantile(reldiff, probs = 0.5),
            q90 = quantile(reldiff, probs = 0.90),
            q975 = quantile(reldiff, probs = 0.975))
# plot
vye1 <- exceed_little_sd_exp_sum %>% 
  ggplot() + 
  geom_ribbon(aes(x = exceedance, ymin = q025, ymax = q975), fill = "grey85") +
  geom_ribbon(aes(x = exceedance, ymin = q10, ymax = q90), fill = "grey70") +
  geom_line(aes(x = exceedance, y = q50), color = "black", size = 1) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### SNAKE
tempdat <- dat_clean %>% 
  filter(basin == "Snake River", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = snakeorder))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Snake River", date >= date("2016-04-01"), date <= date("2023-10-03"))
# exceedance
exceed_little <- tempdat %>%
  group_by(site_name) %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
  ungroup()
exceed_big <- tempdat_big %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield))
# plot
esn1 <- ggplot() +
  geom_line(data = exceed_little, aes(x = exceedance, y = logYield, color = factor(site_name, levels = snakeorder))) +
  geom_line(data = exceed_big, aes(x = exceedance, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  #annotate("text", x = max(c(exceed_big$exceedance, exceed_little$exceedance), na.rm = TRUE), y = max(c(exceed_big$logYield, exceed_little$logYield), na.rm = TRUE), label = "Snake River", hjust = 1, vjust = 1) +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# summarize
exceed_little_sd <- exceed_little %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(site_name, exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  group_by(exceedance) %>% 
  summarize(sdyield = sd(logYield)) %>%
  ungroup()
exceed_big_sum <- exceed_big %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  filter(!is.na(logYield))
# bootstrap
nreps <- 1000
randsampsd <- c()
for (i in 1:nreps) { randsampsd[i] <- sd(sample(exceed_big_sum$logYield, size = nsites, replace = FALSE)) }
exceed_little_sd_exp <- do.call("rbind", replicate(nreps, exceed_little_sd, simplify = FALSE))
exceed_little_sd_exp <- exceed_little_sd_exp %>% 
  mutate(sdbigtemp = rep(randsampsd, each = nrow(exceed_little_sd)),
         replicate = rep(c(1:nreps), each = nrow(exceed_little_sd)),
         reldiff = ((sdyield-sdbigtemp)/sdbigtemp)*100)
exceed_little_sd_exp_sum <- exceed_little_sd_exp %>%
  group_by(exceedance) %>%
  summarize(q025 = quantile(reldiff, probs = 0.025),
            q10 = quantile(reldiff, probs = 0.10),
            q50 = quantile(reldiff, probs = 0.5),
            q90 = quantile(reldiff, probs = 0.90),
            q975 = quantile(reldiff, probs = 0.975))
# plot
vsn1 <- exceed_little_sd_exp_sum %>% 
  ggplot() + 
  geom_ribbon(aes(x = exceedance, ymin = q025, ymax = q975), fill = "grey85") +
  geom_ribbon(aes(x = exceedance, ymin = q10, ymax = q90), fill = "grey70") +
  geom_line(aes(x = exceedance, y = q50), color = "black", size = 1) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))


### DONNER BLITZEN
tempdat <- dat_clean %>% 
  filter(basin == "Donner Blitzen", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = donnerorder))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Donner Blitzen", date >= date("2019-06-01"), date <= as_date("2022-12-31"))
# exceedance
exceed_little <- tempdat %>%
  group_by(site_name) %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
  ungroup()
exceed_big <- tempdat_big %>%
  arrange(desc(logYield), .by_group = TRUE) %>%
  mutate(exceedance = 100/length(logYield)*1:length(logYield))
# plot
edb1 <- ggplot() +
  geom_line(data = exceed_little, aes(x = exceedance, y = logYield, color = factor(site_name, levels = donnerorder))) +
  geom_line(data = exceed_big, aes(x = exceedance, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  #annotate("text", x = max(c(exceed_big$exceedance, exceed_little$exceedance), na.rm = TRUE), y = max(c(exceed_big$logYield, exceed_little$logYield), na.rm = TRUE), label = "Donner und Blitzen River", hjust = 1, vjust = 1) +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
# summarize
exceed_little_sd <- exceed_little %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(site_name, exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  group_by(exceedance) %>% 
  summarize(sdyield = sd(logYield)) %>%
  ungroup()
exceed_big_sum <- exceed_big %>%
  mutate(exceedance = round(exceedance, digits = 0)) %>%
  group_by(exceedance) %>% 
  summarize(logYield = mean(logYield)) %>%
  ungroup() %>%
  filter(!is.na(logYield))
# bootstrap
nreps <- 1000
randsampsd <- c()
for (i in 1:nreps) { randsampsd[i] <- sd(sample(exceed_big_sum$logYield, size = nsites, replace = FALSE)) }
exceed_little_sd_exp <- do.call("rbind", replicate(nreps, exceed_little_sd, simplify = FALSE))
exceed_little_sd_exp <- exceed_little_sd_exp %>% 
  mutate(sdbigtemp = rep(randsampsd, each = nrow(exceed_little_sd)),
         replicate = rep(c(1:nreps), each = nrow(exceed_little_sd)),
         reldiff = ((sdyield-sdbigtemp)/sdbigtemp)*100)
exceed_little_sd_exp_sum <- exceed_little_sd_exp %>%
  group_by(exceedance) %>%
  summarize(q025 = quantile(reldiff, probs = 0.025),
            q10 = quantile(reldiff, probs = 0.10),
            q50 = quantile(reldiff, probs = 0.5),
            q90 = quantile(reldiff, probs = 0.90),
            q975 = quantile(reldiff, probs = 0.975))
# plot
vdb1 <- exceed_little_sd_exp_sum %>% 
  ggplot() + 
  geom_ribbon(aes(x = exceedance, ymin = q025, ymax = q975), fill = "grey85") +
  geom_ribbon(aes(x = exceedance, ymin = q10, ymax = q90), fill = "grey70") +
  geom_line(aes(x = exceedance, y = q50), color = "black", size = 1) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  scale_x_continuous(expand = c(0.02,0.02)) + scale_y_continuous(expand = c(0.02,0.02)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))
```

Generate plot
```{r fig.width=5.5, fig.height=11}
annotate_figure(ggarrange(annotate_figure(egg::ggarrange(ewb1, epa1, est1, efl1, eye1, esn1, edb1, ncol = 1), left = "log(Yield, mm/day)"),
          annotate_figure(egg::ggarrange(vwb1, vpa1, vst1, vfl1, vye1, vsn1, vdb1, ncol = 1), left = "Relative spatial variation in flow (%)"),
          ncol = 2), bottom = "Exceedance probability")
```

Write to file
```{r}
jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/EcoD_exceedance_new.jpg", width = 5.5, height = 11, units = "in", res = 1000)
annotate_figure(ggarrange(annotate_figure(egg::ggarrange(ewb1, epa1, est1, efl1, eye1, esn1, edb1, ncol = 1), left = "log(Yield, mm/day)"),
          annotate_figure(egg::ggarrange(vwb1, vpa1, vst1, vfl1, vye1, vsn1, vdb1, ncol = 1), left = "Relative spatial variation in flow (%)"),
          ncol = 2), bottom = "Exceedance probability")
dev.off()
```

### Combined plot

```{r fig.width=8, fig.height=11}
p <- ggarrange(annotate_figure(egg::ggarrange(pwb1, ppa1, pst1, pfl1, pye1, psn1, pdb1, ncol = 1), 
                               bottom = text_grob("Date\n ", size = 11),  left = text_grob("log(Yield, mm/day)", size = 11, rot = 90)),
               annotate_figure(egg::ggarrange(ewb1, epa1, est1, efl1, eye1, esn1, edb1, ncol = 1), 
                               bottom = text_grob("Exceedance probability \n(summer only)", size = 11)),
               ncol = 2, widths = c(1,0.4))
p
```

Write to file
```{r}
jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/EcoD_tsexed_new.jpg", width = 8, height = 11, units = "in", res = 1000)
p
dev.off()
```


## Flow Range

How does the range of (summer) flow change with water availability?

First, on daily values:
```{r, fig.width=7, fig.height=7}
tempdat <- dat_clean %>% 
  filter(basin == "West Brook", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- tempdat %>% left_join(dat_clean_big %>% filter(basin == "West Brook") %>% select(basin, date, logYield) %>% rename(logYield_big = logYield))
tempdat <- tempdat %>% group_by(date) %>% summarize(nsites = n(), lgrange = range(logYield)[2] - range(logYield)[1], logYield_big = unique(logYield_big))
p1 <- tempdat %>% filter(nsites == 10) %>% 
  ggplot(aes(x = logYield_big, y = log(lgrange), group = year(date))) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  ggtitle("West Brook") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text = element_text(color = "black"), legend.position = "none")


tempdat <- dat_clean %>% 
  filter(basin == "Paine Run", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- tempdat %>% left_join(dat_clean_big %>% filter(basin == "Paine Run") %>% select(basin, date, logYield) %>% rename(logYield_big = logYield))
tempdat <- tempdat %>% group_by(date) %>% summarize(nsites = n(), lgrange = range(logYield)[2] - range(logYield)[1], logYield_big = unique(logYield_big))
p2 <- tempdat %>% filter(nsites == 5) %>%
  ggplot(aes(x = logYield_big, y = log(lgrange), group = year(date))) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  ggtitle("Paine Run") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text = element_text(color = "black"), legend.position = "none")


tempdat <- dat_clean %>% 
  filter(basin == "Staunton River", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- tempdat %>% left_join(dat_clean_big %>% filter(basin == "Staunton River") %>% select(basin, date, logYield) %>% rename(logYield_big = logYield))
tempdat <- tempdat %>% group_by(date) %>% summarize(nsites = n(), lgrange = range(logYield)[2] - range(logYield)[1], logYield_big = unique(logYield_big))
p3 <- tempdat %>% filter(nsites == 6) %>% 
  ggplot(aes(x = logYield_big, y = log(lgrange), group = year(date))) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  ggtitle("Staunton River") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text = element_text(color = "black"), legend.position = "none")

tempdat <- dat_clean %>% 
  filter(basin == "Flathead", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- tempdat %>% left_join(dat_clean_big %>% filter(basin == "Flathead") %>% select(basin, date, logYield) %>% rename(logYield_big = logYield))
tempdat <- tempdat %>% group_by(date) %>% summarize(nsites = n(), lgrange = range(logYield)[2] - range(logYield)[1], logYield_big = unique(logYield_big))
p4 <- tempdat %>% filter(nsites >= 10) %>% 
  ggplot(aes(x = logYield_big, y = log(lgrange), group = year(date))) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  ggtitle("Flathead River") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text = element_text(color = "black"), legend.position = "none")

tempdat <- dat_clean %>% 
  filter(basin == "Shields River", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- tempdat %>% left_join(dat_clean_big %>% filter(basin == "Shields River") %>% select(basin, date, logYield) %>% rename(logYield_big = logYield))
tempdat <- tempdat %>% group_by(date) %>% summarize(nsites = n(), lgrange = range(logYield)[2] - range(logYield)[1], logYield_big = unique(logYield_big))
p5 <- tempdat %>% filter(nsites == 9) %>% 
  ggplot(aes(x = logYield_big, y = log(lgrange), group = year(date))) + 
  geom_point() + 
  geom_smooth() + 
  ggtitle("Yellowstone River") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text = element_text(color = "black"), legend.position = "none")

tempdat <- dat_clean %>% 
  filter(basin == "Snake River", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- tempdat %>% left_join(dat_clean_big %>% filter(basin == "Snake River") %>% select(basin, date, logYield) %>% rename(logYield_big = logYield))
tempdat <- tempdat %>% group_by(date) %>% summarize(nsites = n(), lgrange = range(logYield)[2] - range(logYield)[1], logYield_big = unique(logYield_big))
p6 <- tempdat %>% filter(nsites == 9) %>% 
  ggplot(aes(x = logYield_big, y = log(lgrange), group = year(date))) + 
  geom_point() +
  geom_smooth(method = "lm") + 
  ggtitle("Snake River") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text = element_text(color = "black"), legend.position = "none")

tempdat <- dat_clean %>% 
  filter(basin == "Donner Blitzen", !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- tempdat %>% left_join(dat_clean_big %>% filter(basin == "Donner Blitzen") %>% select(basin, date, logYield) %>% rename(logYield_big = logYield))
tempdat <- tempdat %>% group_by(date) %>% summarize(nsites = n(), lgrange = range(logYield)[2] - range(logYield)[1], logYield_big = unique(logYield_big))
p7 <- tempdat %>% filter(nsites == 4) %>% 
  ggplot(aes(x = logYield_big, y = log(lgrange), group = year(date))) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  ggtitle("Donner Blitzen") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text = element_text(color = "black"), legend.position = "none")


annotate_figure(egg::ggarrange(p1 + theme(axis.title.x = element_blank(), axis.title.y = element_blank()), 
                               p2 + theme(axis.title.x = element_blank(), axis.title.y = element_blank()), 
                               p3 + theme(axis.title.x = element_blank(), axis.title.y = element_blank()), 
                               p4 + theme(axis.title.x = element_blank(), axis.title.y = element_blank()), 
                               p5 + theme(axis.title.x = element_blank(), axis.title.y = element_blank()), 
                               p6 + theme(axis.title.x = element_blank(), axis.title.y = element_blank()), 
                               p7 + theme(axis.title.x = element_blank(), axis.title.y = element_blank())),
                bottom = "log(Yield at big G)", left = "Range of little g log(Yield) (logged)")

```


Now compare distributions
```{r}
portfolioplot <- function(bas, orderr, type = c("interann", "annual", "scatter"), wtryrs) {
  # filter data
  tempdat <- dat_clean %>% 
    filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% wtryrs) %>%
    mutate(site_name = factor(site_name, levels = orderr))
  nsites <- length(unique(tempdat$site_name))
  tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
  varbig <- tempdat_big %>% 
    group_by(WaterYear) %>% 
    summarize(bigrange = range(logYield)[2]-range(logYield)[1],
              bigsd = sd(logYield),
              bigvar = var(logYield)) %>%
    ungroup()

  # calculate total summer water availability from reference gage
  #summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
  #wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)


  # calculate relative variation
  pedat <- tempdat %>% 
    group_by(basin, WaterYear) %>% 
    summarize(nsites = length(unique(site_name)),
              littlerange = range(logYield)[2]-range(logYield)[1],
              littlesd = sd(logYield),
              littlevar = var(logYield)) %>% 
    ungroup() %>% 
    left_join(varbig) %>%
    mutate(pe_range = ((littlerange-bigrange)/bigrange),
           pe_sd = ((littlesd-bigsd)/bigsd),
           pe_var = ((littlevar-bigvar)/bigvar)) %>%
    left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z)) %>% 
    filter(WaterYear %in% wtryrs) %>%
    mutate(wylab = substr(WaterYear, 3, 4))

  # interannual
  pint <- ggplot() + 
    geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +
    scale_color_manual(values = cet_pal(nsites, name = "i1")) +
    scale_fill_manual(values = alpha(cet_pal(nsites, name = "i1"), 0.1)) +
    geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = "grey40", fill = alpha("grey40", 0.2), size = 0.8) +
    xlab("Summer log(Yield)") + ylab("Scaled density") +
    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                       axis.text = element_text(color = "black"), legend.position = "none")

  # annual
  pann <- ggplot() +
    geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +
    scale_color_manual(values = cet_pal(nsites, name = "i1")) +
    scale_fill_manual(values = alpha(cet_pal(nsites, name = "i1"), 0.1)) +
    geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = "grey40", fill = alpha("grey40", 0.2), size = 0.8) +
    xlab("Summer log(Yield)") + ylab("Scaled density") +
    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                       axis.text = element_text(color = "black"), legend.position = "none") +
    facet_wrap(~factor(WaterYear, levels = as.numeric(unlist(pedat %>% arrange(totalyield_sum_z) %>% select(WaterYear)))))

  # portfolio effect by water availability
  ppew <- pedat %>% 
    ggplot(aes(x = totalyield_sum_z, y = pe_range, label = wylab)) + 
    geom_smooth(method = "lm", color = "black") + 
    geom_point(shape = 21, fill = "skyblue1", size = 3) +
    geom_text(vjust = -0.7, color = "grey40") +
    xlab("Water availability") + ylab("Relative difference in range") +
    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(color = "black")) +     
    guides(color = guide_legend(title="Water year"))

  if(type == "interannual") { return(pint) }
  if(type == "annual") { return(pann) }
  if(type == "scatter") { return(ppew) }
  if(type == "table") { return(pedat) }
}
```

Generate plots
```{r, include=FALSE}
# West Brook
p1 <- egg::ggarrange(portfolioplot(bas = "West Brook", orderr = wborder, type = "interannual", wtryrs = c(2020:2024)),
               portfolioplot(bas = "West Brook", orderr = wborder, type = "scatter", wtryrs = c(2020:2024)),
               nrow = 2)
p2 <- portfolioplot(bas = "West Brook", orderr = wborder, type = "annual", wtryrs = c(2020:2024))
denwb <- ggarrange(p1, p2, ncol = 2, widths = c(0.7,1))

# Paine
p1 <- egg::ggarrange(portfolioplot(bas = "Paine Run", orderr = paineorder, type = "interannual", wtryrs = c(2019:2022)),
               portfolioplot(bas = "Paine Run", orderr = paineorder, type = "scatter", wtryrs = c(2019:2022)),
               nrow = 2)
p2 <- portfolioplot(bas = "Paine Run", orderr = paineorder, type = "annual", wtryrs = c(2019:2022))
denpa <- ggarrange(p1, p2, ncol = 2, widths = c(0.7,1))

# Staunton
p1 <- egg::ggarrange(portfolioplot(bas = "Staunton River", orderr = stauntorder, type = "interannual", wtryrs = c(2019:2022)),
               portfolioplot(bas = "Staunton River", orderr = stauntorder, type = "scatter", wtryrs = c(2019:2022)),
               nrow = 2)
p2 <- portfolioplot(bas = "Staunton River", orderr = stauntorder, type = "annual", wtryrs = c(2019:2022))
denst <- ggarrange(p1, p2, ncol = 2, widths = c(0.7,1))

# Flathead
p1 <- egg::ggarrange(portfolioplot(bas = "Flathead", orderr = flatorder, type = "interannual", wtryrs = c(2018:2024)),
               portfolioplot(bas = "Flathead", orderr = flatorder, type = "scatter", wtryrs = c(2018:2024)),
               nrow = 2)
p2 <- portfolioplot(bas = "Flathead", orderr = flatorder, type = "annual", wtryrs = c(2018:2024))
denfl <- ggarrange(p1, p2, ncol = 2, widths = c(0.7,1))

# Yellowstone
p1 <- egg::ggarrange(portfolioplot(bas = "Shields River", orderr = yellorder, type = "interannual", wtryrs = c(2016:2020,2022:2024)),
               portfolioplot(bas = "Shields River", orderr = yellorder, type = "scatter", wtryrs = c(2016:2020,2022:2024)),
               nrow = 2)
p2 <- portfolioplot(bas = "Shields River", orderr = yellorder, type = "annual", wtryrs = c(2016:2020,2022:2024))
denye <- ggarrange(p1, p2, ncol = 2, widths = c(0.7,1))

# Snake River
p1 <- egg::ggarrange(portfolioplot(bas = "Snake River", orderr = snakeorder, type = "interannual", wtryrs = c(2016:2024)),
               portfolioplot(bas = "Snake River", orderr = snakeorder, type = "scatter", wtryrs = c(2016:2024)),
               nrow = 2)
p2 <- portfolioplot(bas = "Snake River", orderr = snakeorder, type = "annual", wtryrs = c(2016:2024))
densn <- ggarrange(p1, p2, ncol = 2, widths = c(0.7,1))

# Donner Blitzen
p1 <- egg::ggarrange(portfolioplot(bas = "Donner Blitzen", orderr = donnerorder, type = "interannual", wtryrs = c(2016:2024)),
               portfolioplot(bas = "Donner Blitzen", orderr = donnerorder, type = "scatter", wtryrs = c(2016:2024)),
               nrow = 2)
p2 <- portfolioplot(bas = "Donner Blitzen", orderr = donnerorder, type = "annual", wtryrs = c(2016:2024))
dendb <- ggarrange(p1, p2, ncol = 2, widths = c(0.7,1))
```

::: panel-tabset
##### West Brook
```{r fig.width=9, fig.height=5}
denwb
```
##### Paine Run
```{r fig.width=9, fig.height=5}
denpa
```
##### Staunton River
```{r fig.width=9, fig.height=5}
denst
```
##### Flathead
```{r fig.width=9, fig.height=5}
denfl
```
##### Yellowstone
```{r fig.width=9, fig.height=5}
denye
```
##### Snake River
```{r fig.width=9, fig.height=5}
densn
```
##### Donner Blitzen
```{r fig.width=9, fig.height=5}
dendb
```
:::



## Median summer flow

::: panel-tabset
#### West Brook
```{r fig.width = 9, fig.height = 5}
bas <- "West Brook"
orderr <- wborder
wtryrs <- c(2020:2024)

# sheds and network
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Mass_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "WBR",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Mass_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# get lakes
lakes <- get_waterbodies(AOI = siteinfo_sp %>% filter(site_name == "West Brook NWIS"), buffer = 10000)
lakes <- lakes %>% filter(gnis_name %in% c("Northampton Reservoir Upper", "Northampton Reservoir"))

# little g points
mylittleg <- siteinfo_sp %>% filter(site_name %in% wborder) %>% mutate(site_name = factor(site_name, levels = wborder))


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_wb <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_wb[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = lakes, color = "white", fill = "lightskyblue1", linewidth = 0.7) +
      geom_sf(data = lakes, color = "royalblue4", fill = "lightskyblue1", linewidth = 0.5) +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      annotate("label", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = 1.15, hjust = 1.05, size = 5)})
}
ggarrange(plotlist = plotlist_wb, common.legend = TRUE, legend = "right")
```


#### Paine Run
```{r fig.width = 6, fig.height = 5}
bas <- "Paine Run"
orderr <- paineorder
wtryrs <- c(2019:2022)

mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shen_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "PA_10FL",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shen_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# hillshade
myrast <- rast("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/Shenandoah_DEM_10m_nc.tif")
myrast <- mask(crop(myrast, mysheds), mysheds)
slo <- terrain(myrast, "slope", unit = "radians") 
asp <- terrain(myrast, "aspect", unit = "radians")
hill <- shade(slope = slo, aspect = asp, angle = 40, direction = 270)
hilldf <- as.data.frame(hill, xy = TRUE)

# little g points
mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr)


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_pa <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_pa[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      annotate("label", x = -Inf, y = Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = 1.15, hjust = -0.05, size = 5)})
}
ggarrange(plotlist = plotlist_pa, common.legend = TRUE, legend = "right")
```

#### Staunton River
```{r fig.width = 6, fig.height = 5}
bas <- "Staunton River"
orderr <- stauntorder
wtryrs <- c(2019:2022)

mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shen_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "SR_10FL",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shen_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# little g points
mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr)

# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_st <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_st[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      annotate("label", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = 1.15, hjust = 1.05, size = 5)})
}
ggarrange(plotlist = plotlist_st, common.legend = TRUE, legend = "right")
```


#### Flathead
```{r fig.height = 5, fig.width = 11}
bas <- "Flathead"
orderr <- flatorder
wtryrs <- c(2018:2024)

mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Flat_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "NFF",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Flat_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# get lakes
lakes <- get_waterbodies(AOI = siteinfo_sp %>% filter(site_name == "North Fork Flathead River NWIS"), buffer = 100000)
lakes <- st_transform(lakes, crs(mysheds))
lakes <- st_intersection(lakes, st_as_sf(mysheds))
lakes <- lakes %>% filter(gnis_name %in% c("Moose Lake", "Mud Lake"))

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% flatorder) %>% mutate(site_name = factor(site_name, levels = flatorder))
st_geometry(mylittleg)[mylittleg$site_name == "BigCreekUpper"] <- st_point(c(-114.31506, 48.57672))
st_geometry(mylittleg)[mylittleg$site_name == "HallowattCreekLower"] <- st_point(c(-114.31914, 48.57256))


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_fl <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_fl[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      annotate("label", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = 1.15, hjust = 1.05, size = 5)})
}
ggarrange(plotlist = plotlist_fl, common.legend = TRUE, legend = "right")
```


#### Yellowstone
```{r fig.height = 7, fig.width = 10}
bas <- "Shields River"
orderr <- yellorder
wtryrs <- c(2016:2020,2022:2024)

mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shields_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id %in% c("SRS", "DU01"),]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shields_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% mutate(site_name = factor(site_name, levels = orderr)) #%>% filter(subbasin != "Duck Creek")


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_ye <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_ye[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      annotate("label", x = -Inf, y = -Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = -0.15, hjust = -0.05, size = 5)})
}
ggarrange(plotlist = plotlist_ye, common.legend = TRUE, legend = "right", nrow = 2, ncol = 4)
```


#### Snake
```{r fig.height = 7, fig.width = 10}
bas <- "Snake River"
orderr <- snakeorder
wtryrs <- c(2016:2024)

mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Snake_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "SP11",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Snake_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# get lakes
lakes <- get_waterbodies(AOI = siteinfo_sp %>% filter(site_name == "Spread Creek Dam"), buffer = 100000)
lakes <- st_transform(lakes, crs(mysheds))
lakes <- st_intersection(lakes, st_as_sf(mysheds))
lakes <- lakes %>% filter(gnis_name %in% c("Leidy Lake"))

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% snakeorder) %>% mutate(site_name = factor(site_name, levels = snakeorder))
# edit geometry to reduce overlap
st_geometry(mylittleg)[mylittleg$site_name == "SF Spread Creek Lower NWIS"] <- st_point(c(-110.32226, 43.76118))
st_geometry(mylittleg)[mylittleg$site_name == "NF Spread Creek Lower"] <- st_point(c(-110.3199, 43.766533))
st_geometry(mylittleg)[mylittleg$site_name == "Grizzly Creek"] <- st_point(c(-110.23289, 43.77433))
st_geometry(mylittleg)[mylittleg$site_name == "NF Spread Creek Upper"] <- st_point(c(-110.23405, 43.77227))
st_geometry(mylittleg)[mylittleg$site_name == "SF Spread Creek Upper"] <- st_point(c(-110.31475, 43.73661))


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_sn <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_sn[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      annotate("label", x = -Inf, y = -Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = -0.15, hjust = -0.05, size = 5)})
}
ggarrange(plotlist = plotlist_sn, common.legend = TRUE, legend = "right")
```


#### Donner Blitzen
```{r fig.height = 5.5, fig.width = 5.5}
bas <- "Donner Blitzen"
orderr <- c(donnerorder, "Donner Blitzen River nr Frenchglen NWIS")
wtryrs <- c(2016:2024)

mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Oreg_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "DBF",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Oreg_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)


# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% mutate(site_name = factor(site_name, levels = donnerorder))
# edit geometry to reduce overlap
st_geometry(mylittleg)[mylittleg$site_name == "Donner Blitzen ab Fish NWIS"] <- st_point(c(-118.84315, 42.75476))
st_geometry(mylittleg)[mylittleg$site_name == "Fish Creek"] <- st_point(c(-118.83173, 42.75911))


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)


# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup() %>%
  bind_rows(tempdat_big %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup())

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_db <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_db[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      annotate("label", x = -Inf, y = -Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = -0.15, hjust = -0.05, size = 5)})
}
ggarrange(plotlist = plotlist_db, common.legend = TRUE, legend = "right")
```
:::


## Big plot

Combine interannual distributions of summer flow, scatterplots showing relationship between water availability and relative range among little g's, and maps of median summer flow in a low and high water year

Redraw Yellowstone to move upper Shields and Duck Creek closer together
```{r }
bas <- "Shields River"
orderr <- yellorder
wtryrs <- c(2016:2020,2022:2024)

mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shields_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id %in% c("SRS", "DU01"),]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shields_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# points
mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% mutate(site_name = factor(site_name, levels = orderr)) #%>% filter(subbasin != "Duck Creek")


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))



# 2020
mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == 2020))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == 2020)) %>% arrange(desc(area_sqmi))
  mainmap <- ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = c(-110.555,-110.30), ylim = c(46.07,46.23)) +
      theme_bw() + theme_void() + 
    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text = element_blank()) +
      scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) +
      annotate("label", x = -Inf, y = Inf, label = "2020 (47%)", vjust = 1.15, hjust = -0.05, size = 5)
dbp1 <- local({
    i <- i
    ggdraw(mainmap + theme(legend.position = "none")) + 
      draw_plot(
        {
          ggplot() +
            geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
            geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
            scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
            geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
            geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
            geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
            labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
            coord_sf(xlim = c(-110.31,-110.23), ylim = c(45.865,45.96)) +
            theme_bw() + theme_void() + theme(legend.position = "none") +
            scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002))
          },
        x = 0.05, y = 0, width = 0.3, height = 0.5)
      })

# 2017
mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == 2017))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == 2017)) %>% arrange(desc(area_sqmi))
  mainmap <- ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = c(-110.555,-110.30), ylim = c(46.07,46.23)) +
      theme_bw() + theme_void() + 
    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text = element_blank()) +
      scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) +
      annotate("label", x = -Inf, y = Inf, label = "2017 (67%)", vjust = 1.15, hjust = -0.05, size = 5)
dbp2 <- local({
    i <- i
    ggdraw(mainmap + theme(legend.position = "none")) + 
      draw_plot(
        {
          ggplot() +
            geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
            geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
            scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
            geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
            geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
            geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
            labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
            coord_sf(xlim = c(-110.31,-110.23), ylim = c(45.865,45.96)) +
            theme_bw() + theme_void() + theme(legend.position = "none") +
            scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002))
          },
        x = 0.05, y = 0, width = 0.3, height = 0.5)
      })
#ggarrange(dbp1, dbp2, as_ggplot(ggpubr::get_legend(mainmap)), nrow = 1, widths = c(1,1,0.2))
```

Get pieces
```{r fig.width=12, fig.height=20}
# West Brook
p1 <- ggarrange(portfolioplot(bas = "West Brook", orderr = wborder, type = "interannual", wtryrs = c(2020:2024)) + theme(axis.title.x = element_blank()),
          portfolioplot(bas = "West Brook", orderr = wborder, type = "scatter", wtryrs = c(2020:2024)) + theme(axis.title.x = element_blank()),
          ggarrange(plotlist_wb[[2]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none"),
                    plotlist_wb[[4]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none")),
          widths = c(1,1,2), align = "h", nrow = 1)


# Paine
p2 <- ggarrange(portfolioplot(bas = "Paine Run", orderr = paineorder, type = "interannual", wtryrs = c(2019:2022)) + theme(axis.title.x = element_blank()),
          portfolioplot(bas = "Paine Run", orderr = paineorder, type = "scatter", wtryrs = c(2019:2022)) + theme(axis.title.x = element_blank()),
          ggarrange(plotlist_pa[[1]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none"), 
                    plotlist_pa[[4]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none")),
          widths = c(1,1,2), align = "h", nrow = 1)


# Staunton
p3 <- ggarrange(portfolioplot(bas = "Staunton River", orderr = stauntorder, type = "interannual", wtryrs = c(2019:2022)) + theme(axis.title.x = element_blank()),
          portfolioplot(bas = "Staunton River", orderr = stauntorder, type = "scatter", wtryrs = c(2019:2022)) + theme(axis.title.x = element_blank()),
          ggarrange(plotlist_st[[1]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none"), 
                    plotlist_st[[4]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none")),
          widths = c(1,1,2), align = "h", nrow = 1)


# Flathead
p4 <- ggarrange(portfolioplot(bas = "Flathead", orderr = flatorder, type = "interannual", wtryrs = c(2018:2024)) + theme(axis.title.x = element_blank()),
          portfolioplot(bas = "Flathead", orderr = flatorder, type = "scatter", wtryrs = c(2018:2024)) + theme(axis.title.x = element_blank()),
          ggarrange(plotlist_fl[[2]] + theme_void() + scale_x_continuous(expand = c(0.003, 0.003)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none"), 
                    plotlist_fl[[6]] + theme_void() + scale_x_continuous(expand = c(0.003, 0.003)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none")),
          widths = c(1,1,2), align = "h", nrow = 1)


# Yellowstone
p5 <- ggarrange(portfolioplot(bas = "Shields River", orderr = yellorder, type = "interannual", wtryrs = c(2016:2020,2022:2024)) + theme(axis.title.x = element_blank()),
          portfolioplot(bas = "Shields River", orderr = yellorder, type = "scatter", wtryrs = c(2016:2020,2022:2024)) + theme(axis.title.x = element_blank()),
          ggarrange(dbp1, dbp2, nrow = 1),
          widths = c(1,1,2), align = "h", nrow = 1)


# Snake River
p6 <- ggarrange(portfolioplot(bas = "Snake River", orderr = snakeorder, type = "interannual", wtryrs = c(2016:2024)) + theme(axis.title.x = element_blank()),
          portfolioplot(bas = "Snake River", orderr = snakeorder, type = "scatter", wtryrs = c(2016:2024)) + theme(axis.title.x = element_blank()),
          ggarrange(plotlist_sn[[2]] + theme_void() + scale_x_continuous(expand = c(0.003, 0.003)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none"), 
                    plotlist_sn[[5]] + theme_void() + scale_x_continuous(expand = c(0.003, 0.003)) + scale_y_continuous(expand = c(0.002, 0.002)) + theme(legend.position = "none")),
          widths = c(1,1,2), align = "h", nrow = 1)


# Donner Blitzen
p7 <- ggarrange(portfolioplot(bas = "Donner Blitzen", orderr = donnerorder, type = "interannual", wtryrs = c(2016:2024)),
          portfolioplot(bas = "Donner Blitzen", orderr = donnerorder, type = "scatter", wtryrs = c(2016:2024)),
          ggarrange(plotlist_db[[1]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.003, 0.003)) + theme(legend.position = "none"), 
                    plotlist_db[[4]] + theme_void() + scale_x_continuous(expand = c(0.002, 0.002)) + scale_y_continuous(expand = c(0.003, 0.003)) + theme(legend.position = "none")),
          widths = c(1,1,2), align = "h", nrow = 1)
egg::ggarrange(p1, p2, p3, p4, p5, p6, p7, nrow = 7)
```

```{r}
jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/EcoD_Obj1_bigplot.jpg", width = 12, height = 20, units = "in", res = 1000)
egg::ggarrange(p1, p2, p3, p4, p5, p6, p7, nrow = 7)
dev.off()
```

### Presentation figs

Time series plots, West Brook and Flathead
```{r fig.width=8, fig.height=5}
### FLATHEAD
tempdat <- dat_clean %>% 
  filter(basin == "Flathead", date >= date("2018-07-29"), date <= date("2023-08-11")) %>%
  mutate(site_name = factor(site_name, levels = flatorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Flathead", date >= date("2018-07-29"), date <= date("2023-08-11"))
# color
pfl1 <- ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  ylim(-3,2) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Flathead River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))

p <- annotate_figure(egg::ggarrange(pwb1, pfl1 + ylim(-2.4,1.72), ncol = 1), left = "log(Yield, mm/day)")
print(p)

jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_WBFlat.jpg", width = 8, height = 5, units = "in", res = 1000)
p
dev.off()


#### NO LITTLE Gs
### WEST BROOK
tempdat <- dat_clean %>% 
  filter(basin == "West Brook") %>%
  mutate(site_name = factor(site_name, levels = wborder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "West Brook", date >= date("2020-01-01"), date <= date("2025-01-03"))
# color
pwb1_nlg <- ggplot() +
  #geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  ylim(-3,2) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "The West Brook", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))

### FLATHEAD
tempdat <- dat_clean %>% 
  filter(basin == "Flathead", date >= date("2018-07-29"), date <= date("2023-08-11")) %>%
  mutate(site_name = factor(site_name, levels = flatorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Flathead", date >= date("2018-07-29"), date <= date("2023-08-11"))
# color
pfl1_nlg <- ggplot() +
  #geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "grey40") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  ylim(-2.4,1.72) +
  annotate("text", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = "Flathead River", hjust = 0, vjust = 1) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", 
                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = "black"))

p <- annotate_figure(egg::ggarrange(pwb1_nlg, pfl1_nlg, ncol = 1), left = "log(Yield, mm/day)")
print(p)

jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_WBFlat_nolittle.jpg", width = 8, height = 5, units = "in", res = 1000)
p
dev.off()
```


Summer log(yield) distributions for West Brook and Flathead
```{r fig.width = 2.75, fig.height = 5}
p <- egg::ggarrange(portfolioplot(bas = "West Brook", orderr = wborder, type = "interannual", wtryrs = c(2020:2024)) + theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), plot.margin = margin(t = 1, r = 1, b = 2, l = 1)),
               portfolioplot(bas = "Flathead", orderr = flatorder, type = "interannual", wtryrs = c(2018:2024)) + theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), plot.margin = margin(t = 1, r = 1, b = 2, l = 1)),
               nrow = 2)
print(p)

jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_WBFlat.jpg", width = 2.75, height = 5, units = "in", res = 1000)
p
dev.off()
```


Scatterplot: relative difference range vs. regional water availability
```{r fig.width = 5, fig.height = 4}
# define basin-years to keep
keepyears <- bind_rows(
  tibble(basin = "West Brook", WaterYear = c(2020:2024)),
  tibble(basin = "Paine Run", WaterYear = c(2019:2022)),
  tibble(basin = "Staunton River", WaterYear = c(2019:2022)),
  tibble(basin = "Flathead", WaterYear = c(2018:2024)),
  tibble(basin = "Shields River", WaterYear = c(2016:2020,2022:2024)),
  tibble(basin = "Snake River", WaterYear = c(2016:2024)),
  tibble(basin = "Donner Blitzen", WaterYear = c(2016:2024)),
) %>% mutate(keep = "yes")

# standard deviation of median summer flow
# dat_clean %>%
#   filter(Month %in% c(7:9)) %>%
#   group_by(basin, site_name, WaterYear) %>%
#   summarize(medyield = median(logYield, na.rm = TRUE)) %>%
#   ungroup() %>%
#   group_by(basin, WaterYear) %>%
#   summarize(sdyield = sd(medyield), nsites = n()) %>%
#   ungroup() %>%
#   left_join(wateravail %>% select(basin, WaterYear, totalyield:tyz_sum_perc)) %>%
#   left_join(keepyears) %>% filter(keep == "yes") %>%
#   mutate(basin = ifelse(basin == "Shields River", "Yellowstone River",
#                         ifelse(basin == "Flathead", "Flathead River", basin))) %>%
#   mutate(basin = factor(basin, levels = c("West Brook", "Piney River", "Staunton River", "Paine Run", "Flathead River", "Yellowstone River", "Snake River", "Donner Blitzen"))) %>%
#   ggplot(aes(x = tyz_sum_perc, y = sdyield)) +
#   geom_smooth(method = "lm", color = "black", aes(weight = nsites)) +
#   geom_point(aes(fill = basin, size = nsites), shape = 21) +
#   scale_fill_brewer(palette = "Set2") +
#   #facet_wrap(~basin) +
#   theme_bw() + theme(panel.grid = element_blank())


# calculate relative difference in range as above
mydat <- dat_clean %>% 
  filter(Month %in% c(7:9)) %>%
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1]) %>% 
  ungroup() %>% 
  left_join(dat_clean_big %>% 
              filter(Month %in% c(7:9)) %>% 
              group_by(basin, WaterYear) %>% 
              summarize(bigrange = range(logYield)[2]-range(logYield)[1]) %>%
              ungroup()) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield:tyz_sum_perc)) %>%
  left_join(keepyears) %>% filter(keep == "yes") %>%
  mutate(basin = ifelse(basin == "Shields River", "Yellowstone River",
                        ifelse(basin == "Flathead", "Flathead River", basin))) %>%
  mutate(basin = factor(basin, levels = c("West Brook", "Piney River", "Staunton River", "Paine Run", 
                                          "Flathead River", "Yellowstone River", "Snake River", "Donner Blitzen"))) 

# show linear model summary, weighted by number of sites
summary(lm(pe_range ~ tyz_sum_perc, data = mydat, weights = nsites))

# plot
randiffplot <- mydat %>%
  ggplot(aes(x = tyz_sum_perc, y = pe_range)) +
  geom_smooth(method = "lm", mapping = aes(weight = nsites), color = "black") +
  geom_point(aes(fill = basin, size = nsites), shape = 21) +
  scale_fill_brewer(palette = "Set2") +
  #facet_wrap(~basin) +
  theme_bw() + theme(panel.grid = element_blank()) +
  ylab("Relative difference in range") + xlab("Regional water availability (percentile)") +
  guides(fill = guide_legend(title = "Basin", override.aes = list(size = 5)), size = guide_legend(title = "Number of sites")) +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed")
print(randiffplot)

jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_RangeDiff_allsites.jpg", width = 5, height = 4, units = "in", res = 1000)
randiffplot
dev.off()
```

2020/2021 summer flow distributions
```{r fig.width=2.75, fig.height=5}
bas <- "West Brook"
wtryrs <- c(2020,2021)
# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% wtryrs) %>%
  mutate(site_name = factor(site_name, levels = orderr))

nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

# annual
pann <- ggplot() +
  geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  scale_fill_manual(values = alpha(cet_pal(nsites, name = "i1"), 0.1)) +
  geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = "grey40", fill = alpha("grey40", 0.2), size = 0.8) +
  xlab("Summer log(Yield)") + ylab("Density") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                     axis.text.y = element_blank(), axis.ticks.y = element_blank(),
                     axis.text = element_text(color = "black"), legend.position = "none",
                     strip.background = element_blank(), strip.text = element_blank()) +
  facet_wrap(~factor(WaterYear, levels = as.numeric(unlist(pedat %>% arrange(totalyield_sum_z) %>% select(WaterYear)))), ncol = 1)

print(pann)


jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_WB_annual.jpg", width = 2.75, height = 5, units = "in", res = 1000)
pann
dev.off()
```

2020/2021 summer flow distributions
```{r fig.width=4, fig.height=6}
bas <- "West Brook"
orderr <- wborder
wtryrs <- c(2020,2021)

# sheds and network
mysheds <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Mass_Watersheds.shp")
mysheds <- mysheds[mysheds$site_id == "WBR",]
mynet <- vect("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Mass_Streams.shp")
crs(mynet) <- crs(mysheds)
mynet <- crop(mynet, mysheds)

# get lakes
lakes <- get_waterbodies(AOI = siteinfo_sp %>% filter(site_name == "West Brook NWIS"), buffer = 10000)
lakes <- lakes %>% filter(gnis_name %in% c("Northampton Reservoir Upper", "Northampton Reservoir"))

# little g points
mylittleg <- siteinfo_sp %>% filter(site_name %in% wborder) %>% mutate(site_name = factor(site_name, levels = wborder))


# filter data
tempdat <- dat_clean %>% 
  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %>%
  mutate(site_name = factor(site_name, levels = orderr))
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))

  # calculate variability for reference gage
varbig <- tempdat_big %>% 
  group_by(WaterYear) %>% 
  summarize(bigrange = range(logYield)[2]-range(logYield)[1],
            bigsd = sd(logYield),
            bigvar = var(logYield)) %>%
  ungroup()

# calculate total summer water availability from reference gage
#summerflow <- tempdat_big %>% group_by(WaterYear) %>% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %>% ungroup()
#wateravail2 <- wateravail %>% select(basin, WaterYear, totalyield, totalyield_z)

# calculate relative variation
pedat <- tempdat %>% 
  group_by(basin, WaterYear) %>% 
  summarize(nsites = length(unique(site_name)),
            littlerange = range(logYield)[2]-range(logYield)[1],
            littlesd = sd(logYield),
            littlevar = var(logYield)) %>% 
  ungroup() %>% 
  left_join(varbig) %>%
  mutate(pe_range = ((littlerange-bigrange)/bigrange),
         pe_sd = ((littlesd-bigsd)/bigsd),
         pe_var = ((littlevar-bigvar)/bigvar)) %>%
  left_join(wateravail %>% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %>% 
  filter(WaterYear %in% wtryrs) %>%
  mutate(wylab = substr(WaterYear, 3, 4)) %>%
  arrange(totalyield_sum_z)
  
# calculate annual median summer flow
annmed <- tempdat %>%
  #filter(WaterYear %in% c(lowyr, highyr)) %>%
  group_by(site_name, WaterYear) %>%
  summarize(medlogYield = median(logYield, na.rm = TRUE)) %>%
  ungroup()

# arrange years by total annual yield
wtryrs_arranged <- as.numeric(unlist(pedat %>% select(WaterYear)))

# plot it
plotlist_wb <- list()
for(i in 1:length(wtryrs_arranged)) {
  mylittleg <- siteinfo_sp %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i]))
  mylittleg_sheds <- sheds %>% filter(site_name %in% orderr) %>% left_join(annmed %>% filter(WaterYear == wtryrs_arranged[i])) %>% arrange(desc(area_sqmi))
  plotlist_wb[[i]] <- local({
    i <- i
    ggplot() +
      geom_sf(data = st_as_sf(mysheds), color = "black", fill = "white", linewidth = 0.4) + 
      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = "black") +
      scale_fill_viridis(option = "A", direction = 1, limits = range(annmed$medlogYield), na.value = "grey") +
      geom_sf(data = st_as_sf(mynet), color = "white", linewidth = 1, lineend = "round") +
      geom_sf(data = st_as_sf(mynet), color = "royalblue4", linewidth = 0.6, lineend = "round") +
      geom_sf(data = lakes, color = "white", fill = "lightskyblue1", linewidth = 0.7) +
      geom_sf(data = lakes, color = "royalblue4", fill = "lightskyblue1", linewidth = 0.5) +
      geom_sf(data = mylittleg, shape = 21, fill = "white", size = 2) +
      labs(fill = "Median\nsummer\nlog(Yield)") + #annotation_scale() +
      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +
      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = "none", axis.text = element_blank()) +
      theme_void() + scale_x_continuous(expand = c(0.003, 0.003)) + scale_y_continuous(expand = c(0.002, 0.002))
      #annotate("label", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], " (", pedat$tyz_sum_perc[i], "%)", sep = ""), vjust = 1.15, hjust = 1.05, size = 5)
      })
}
p <- ggarrange(plotlist = plotlist_wb, common.legend = TRUE, legend = "right", nrow = 2)
print(p)


jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summermedianmap_WB_annual.jpg", width = 4, height = 6, units = "in", res = 1000)
p
dev.off()
```

```{r include=FALSE, eval=FALSE}
### FLATHEAD
tempdat <- dat_clean %>% 
  filter(basin == "Flathead", date >= date("2021-07-01"), date <= date("2021-10-01")) %>%
  mutate(site_name = factor(site_name, levels = flatorder))
tempdat <- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  
nsites <- length(unique(tempdat$site_name))
tempdat_big <- dat_clean_big %>% filter(basin == "Flathead", date >= date("2021-07-01"), date <= date("2021-10-01"))
# color
ggplot() +
  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +
  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = "black") +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none")
```


## Monthly means

### Ridgeline plots

For each basin, use ridgeline plots to show distribution of daily flow values and monthly means by month, year, and site.
```{r}
myridgesfun <- function(bas, orderr) {
  nsites <- length(orderr)
  # daily data
  td <- dat_clean %>% filter(basin == bas) %>%
    mutate(MonthName = factor(MonthName, levels = rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))),
           CalendarYear = factor(CalendarYear)) 
  # summarize by month
  td2 <- td %>%
    group_by(subbasin, site_name, designation, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup() %>%
    mutate(MonthName = factor(MonthName, levels = rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))),
           CalendarYear = factor(CalendarYear)) 
  # big g data
  tempdat_big <- dat_clean_big %>% 
    filter(basin == bas, date >= min(td$date), date <= max(td$date)) %>%
    group_by(site_name, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup() %>%
    mutate(MonthName = factor(MonthName, levels = rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))), 
           CalendarYear = factor(CalendarYear))
    
  return(ggplot(data = td2) +
  geom_density_ridges(data = td, aes(x = logYield, y = MonthName), alpha = 0.5) +
  geom_line(data = td2, aes(x = logYield, y = MonthName, group = site_name, color = factor(site_name, levels = orderr)), orientation = "y", alpha = 0.4) +
  geom_point(data = td2, aes(x = logYield, y = MonthName, group = site_name, color = factor(site_name, levels = orderr)), alpha = 0.4) +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  geom_line(data = tempdat_big, aes(x = logYield, y = MonthName, group = site_name), orientation = "y", alpha = 0.5) +
  geom_point(data = tempdat_big, aes(x = logYield, y = MonthName, group = site_name), alpha = 0.5) +
  theme_bw() + theme(legend.position = "none", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  facet_wrap2(~CalendarYear, nrow = 3, ncol = 3, trim_blank = FALSE) +
  xlab("log(Yield, mm/day)") + ylab(""))
}
```


::: panel-tabset
#### West Brook
```{r fig.width=7, fig.height=7}
myridgesfun(bas = "West Brook", orderr = wborder)
```
#### Paine Run
```{r fig.width=7, fig.height=7}
myridgesfun(bas = "Paine Run", orderr = paineorder)
```
#### Staunton River
```{r fig.width=7, fig.height=7}
myridgesfun(bas = "Staunton River", orderr = stauntorder)
```
#### Flathead
```{r fig.width=7, fig.height=7}
myridgesfun(bas = "Flathead", orderr = flatorder)
```
#### Yellowstone
```{r fig.width=7, fig.height=7}
myridgesfun(bas = "Shields River", orderr = yellorder)
```
#### Snake River
```{r fig.width=7, fig.height=7}
myridgesfun(bas = "Snake River", orderr = snakeorder)
```
#### Donner Blitzen
```{r fig.width=7, fig.height=7}
myridgesfun(bas = "Donner Blitzen", orderr = donnerorder)
```
:::


### Repeatability 

How repeatable is monthly mean flow among sites within basins? I.e., sites with higher than average yield always higher than average, or do lines cross frequently?

Calculate reputability (R) using the *rptR* package (Stoffel *et al.* 2017). Also see related papers by Nakagawa and Schielzeth. Repeatibility is calculated on mean monthly flow z-scored by month and year, which removes the effect of monthly and interannual variation in water availability. Results are very similar to models fit using raw yield data with big G flow as a fixed effect. 
```{r include=FALSE}
basins <- c("West Brook", "Paine Run", "Staunton River", "Flathead", "Shields River", "Snake River", "Donner Blitzen")
rptlist <- list()
rptlist_cov <- list()
rptlist_summer <- list()
rptlist_summer_cov <- list()

# using all data
for (i in 1:length(basins)) {
  # daily data
  td <- dat_clean %>% filter(basin == basins[i])
  # summarize by month
  td2 <- td %>%
    group_by(subbasin, site_name, designation, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup()
  # big g data
  tempdat_big <- dat_clean_big %>% 
    filter(basin == basins[i], date >= min(td$date), date <= max(td$date)) %>%
    group_by(site_name, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup()
  # join data
  joined <- td2 %>% 
    left_join(tempdat_big %>% select(CalendarYear, MonthName, logYield) %>% rename(logYield_big = logYield)) %>%
    group_by(CalendarYear, Month) %>%
    mutate(logYield_z = scale(logYield)) %>%
    ungroup()
  # calculate repeatability
  rpt_znull <- rptGaussian(logYield_z ~ 1 + (1|site_name), data = joined, grname = "site_name")
  rpt_cov <- rptGaussian(logYield ~ logYield_big + (1|site_name), data = joined, grname = "site_name")
  # store in list
  rptlist[[i]] <- tibble(basin =  basins[i], rboot = rpt_znull$R_boot$site_name, type = "zscore")
  rptlist_cov[[i]] <- tibble(basin =  basins[i], rboot = rpt_cov$R_boot$site_name, type = "cov")
}
rpttib <- bind_rows(do.call(rbind, rptlist), do.call(rbind, rptlist_cov))

# summer only
for (i in 1:length(basins)) {
  # daily data
  td <- dat_clean %>% filter(basin == basins[i], Month %in% c(7:9))
  # summarize by month
  td2 <- td %>%
    group_by(subbasin, site_name, designation, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup()
  # big g data
  tempdat_big <- dat_clean_big %>% 
    filter(basin == basins[i], date >= min(td$date), date <= max(td$date)) %>%
    group_by(site_name, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup()
  # join data
  joined <- td2 %>% 
    left_join(tempdat_big %>% select(CalendarYear, MonthName, logYield) %>% rename(logYield_big = logYield)) %>%
    group_by(CalendarYear, Month) %>%
    mutate(logYield_z = scale(logYield)) %>%
    ungroup()
  # calculate repeatability
  rpt_znull <- rptGaussian(logYield_z ~ 1 + (1|site_name), data = joined, grname = "site_name")
  rpt_cov <- rptGaussian(logYield ~ logYield_big + (1|site_name), data = joined, grname = "site_name")
  # store in list
  rptlist_summer[[i]] <- tibble(basin =  basins[i], rboot = rpt_znull$R_boot$site_name, type = "zscore")
  rptlist_summer_cov[[i]] <- tibble(basin =  basins[i], rboot = rpt_cov$R_boot$site_name, type = "cov")
}
rpttib_summer <- bind_rows(do.call(rbind, rptlist_summer), do.call(rbind, rptlist_summer_cov))
```

Generally, repeatibility appears to be greater for snowmelt-dominated basins, particularly in the summer. The "all data" plot is more difficult to interpret as we mostly have seasonal data in the snowmelt basins, particularly the Yellowstone and Snake. In actuality, I would expect the opposite pattern if we had complete time series data for all basins: low reputability for snowmelt basins and high repeatability for rainfall basins (for the same reasons as bow tie vs. wedge).
```{r}
rp1 <- rpttib %>% 
  filter(basin != "Donner Blitzen", type == "zscore") %>%
  mutate(basin = ifelse(basin == "Paine Run", "Paine",
                        ifelse(basin == "Staunton River", "Staunton", 
                               ifelse(basin == "Snake River", "Snake", 
                                      ifelse(basin == "Shields River", "Yellowstone", basin))))) %>%
  ggplot(aes(x = rboot, y = factor(basin, levels = rev(c("West Brook", "Paine", "Staunton", "Flathead", "Yellowstone", "Snake"))))) +
  geom_density_ridges(quantile_lines = TRUE, quantiles = 2) + 
  xlim(0,1) +
  theme_bw() + theme(legend.position = "none", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  xlab("Bootstrapped repeatability (R)") + ylab("Basin") + ggtitle("All data") +
  geom_text(data = rpttib %>% filter(basin != "Donner Blitzen", type == "zscore") %>%
  mutate(basin = ifelse(basin == "Paine Run", "Paine",
                        ifelse(basin == "Staunton River", "Staunton", 
                               ifelse(basin == "Snake River", "Snake", 
                                      ifelse(basin == "Shields River", "Yellowstone", basin)))))%>% group_by(basin) %>% summarise(rboot = median(rboot)),
            aes(label = round(rboot, digits = 2)), position = position_nudge(y = -0.1), colour = "red", size=3.5)

rp2 <- rpttib_summer %>% 
  filter(basin != "Donner Blitzen", type == "zscore") %>%
  mutate(basin = ifelse(basin == "Paine Run", "Paine",
                        ifelse(basin == "Staunton River", "Staunton", 
                               ifelse(basin == "Snake River", "Snake", 
                                      ifelse(basin == "Shields River", "Yellowstone", basin))))) %>%
  ggplot(aes(x = rboot, y = factor(basin, levels = rev(c("West Brook", "Paine", "Staunton", "Flathead", "Yellowstone", "Snake"))))) +
  geom_density_ridges(quantile_lines = TRUE, quantiles = 2) + 
  xlim(0,1) +
  theme_bw() + theme(legend.position = "none", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  xlab("Bootstrapped repeatability (R)") + ylab("Basin") + ggtitle("Summer only (JJS)") +
  geom_text(data = rpttib_summer %>% filter(basin != "Donner Blitzen", type == "zscore") %>%
  mutate(basin = ifelse(basin == "Paine Run", "Paine",
                        ifelse(basin == "Staunton River", "Staunton", 
                               ifelse(basin == "Snake River", "Snake", 
                                      ifelse(basin == "Shields River", "Yellowstone", basin)))))%>% group_by(basin) %>% summarise(rboot = median(rboot)),
            aes(label = round(rboot, digits = 2)), position = position_nudge(y = -0.1), colour = "red", size=3.5) 

# rp1
# rp2
```


### Combined figure


```{r}
myridgesfun2 <- function(bas, orderr, calyr) {
  nsites <- length(orderr)
  # daily data
  td <- dat_clean %>% filter(basin == bas, CalendarYear == calyr) %>%
    mutate(MonthName = factor(MonthName, levels = rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))),
           CalendarYear = factor(CalendarYear)) 
  # summarize by month
  td2 <- td %>%
    group_by(subbasin, site_name, designation, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup() %>%
    mutate(MonthName = factor(MonthName, levels = rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))),
           CalendarYear = factor(CalendarYear)) 
  # big g data
  tempdat_big <- dat_clean_big %>% 
    filter(basin == bas, date >= min(td$date), date <= max(td$date)) %>%
    group_by(site_name, CalendarYear, Month, MonthName) %>%
    summarize(logYield = mean(logYield)) %>%
    ungroup() %>%
    mutate(MonthName = factor(MonthName, levels = rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))), 
           CalendarYear = factor(CalendarYear))
    
  return(ggplot(data = td2) +
  geom_density_ridges(data = td, aes(x = logYield, y = MonthName), alpha = 0.5) +
  geom_line(data = td2, aes(x = logYield, y = MonthName, group = site_name, color = factor(site_name, levels = orderr)), orientation = "y", alpha = 0.8) +
  geom_point(data = td2, aes(x = logYield, y = MonthName, group = site_name, color = factor(site_name, levels = orderr)), alpha = 0.8) +
  scale_color_manual(values = cet_pal(nsites, name = "i1")) +
  geom_line(data = tempdat_big, aes(x = logYield, y = MonthName, group = site_name), orientation = "y", alpha = 0.5) +
  geom_point(data = tempdat_big, aes(x = logYield, y = MonthName, group = site_name), alpha = 0.5) +
  theme_bw() + theme(legend.position = "none", panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                     axis.title = element_blank(), axis.text = element_blank(), plot.title = element_text(size = 11)) +
  xlim(-2.5,2)
  #facet_wrap2(~CalendarYear, nrow = 3, ncol = 3, trim_blank = FALSE) +
  #xlab("log(Yield, mm/day)") + ylab("")
  ) 
}
```


```{r include=FALSE}
# monthly flow with ridgelines
p1 <- annotate_figure(egg::ggarrange(myridgesfun2(bas = "West Brook", orderr = wborder, calyr = 2020) + ggtitle("West Brook 2020") + theme(axis.text.y = element_text(size = 10)),
               myridgesfun2(bas = "Paine Run", orderr = paineorder, calyr = 2022) + ggtitle("Paine Run 2022"),
               myridgesfun2(bas = "Staunton River", orderr = stauntorder, calyr = 2020) + ggtitle("Staunton River 2020") + theme(axis.text.y = element_text(size = 10)),
               myridgesfun2(bas = "Flathead", orderr = flatorder, calyr = 2019) + ggtitle("Flathead River 2019"),
               myridgesfun2(bas = "Shields River", orderr = yellorder, calyr = 2022) + ggtitle("Yellowstone River 2022") + theme(axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 10)),
               myridgesfun2(bas = "Snake River", orderr = snakeorder, calyr = 2021) + ggtitle("Snake River 2021") + theme(axis.text.x = element_text(size = 10)),
               nrow = 3, ncol = 2),
               bottom = text_grob(expression(paste("log(Yield, mm day"^"-1",")", sep = ""))), left = "Month")
# repeatability
p2 <- egg::ggarrange(rp1 + theme(axis.title.y = element_blank(), axis.title.x = element_blank(), axis.text.x = element_blank(), plot.title = element_text(size = 11)), 
                     rp2 + theme(axis.title.y = element_blank(), axis.title.x = element_text(size = 12), axis.text.y = element_text(size = 10, color = "black"), axis.text.x = element_text(size = 10, color = "black"), plot.title = element_text(size = 11)), ncol = 1)
```


```{r, fig.width=9, fig.height=7}
# arranged
ggarrange(p1, p2, ncol = 2, widths = c(1,0.7))
```


## Radial

Use rose/radial plots to show differences in key flow metrics among sites within the West Brook. While these metrics/plots provide helpful summaries of flow regimes and variation among sites, extending to other regions/basins is not possible given the extent of seasonal/missing data. 

Calculate flow metrics for each site: 
```{r}
# filter data to WB and days with complete data availability across all sites
dat_wb2 <- dat_clean %>%
  filter(basin == "West Brook") %>%
  select(date, site_name, Yield_mm) %>%
  spread(key = site_name, value = Yield_mm) %>% 
  drop_na() %>%
  gather(key = site_name, value = Yield_mm, 2:ncol(.)) %>%
  mutate(logYield = log(Yield_mm))

# histograms of flow values by site
# dat_wb2 %>% ggplot() + geom_histogram(aes(x = Yield_mm)) + facet_wrap(~site_name)
# dat_wb2 %>% ggplot() + geom_histogram(aes(x = logYield)) + facet_wrap(~site_name)

# Caclculate metrics, loosely based on the seven fundamental daily streamflow statistics (Archfield et al. 2014)
dat_wb_clean_sum <- dat_wb2 %>% 
  group_by(site_name) %>%
  summarize(yield_mean = mean(logYield),
            yield_min = min(logYield),
            yield_relmax = max(logYield)/mean(logYield),
            yield_cv = sd(Yield_mm)/mean(Yield_mm),
            yield_skew = skewness(Yield_mm),
            #yield_kurt = kurtosis(Yield_mm),
            yield_ar1c = cor(logYield, lag(logYield), method = "pearson", use = "complete.obs")) %>%
  ungroup() %>%
  mutate(site_name = factor(site_name, levels = wborder)) %>%
  arrange(desc(site_name))
nsites <- nrow(dat_wb_clean_sum)

# pairs plots to show correlation among metrics
ggpairs(dat_wb_clean_sum[,c(2:7)])
```

Generate plot
```{r fig.width=9}
# summarize min/max
sumdat <- data.frame(dat_wb_clean_sum %>% select(c(2:7)))
rownames(sumdat) <- dat_wb_clean_sum$site_name
minmax <- data.frame(rbind(dat_wb_clean_sum %>% select(c(2:7)) %>% summarize_all(min),
                dat_wb_clean_sum %>% select(c(2:7)) %>% summarize_all(max)))
rownames(minmax) <- c("Min", "Max")
df <- rbind(minmax, sumdat)

# bind min/max and site-specific data for radial plot
sum_minmax <- rbind(dat_wb_clean_sum %>% select(c(2:7)) %>% summarize_all(min),
                      dat_wb_clean_sum %>% select(c(2:7)) %>% summarize_all(max),
                      dat_wb_clean_sum[i, c(2:7)])

# plotting function
create_beautiful_radarchart <- function(data, color = "#00AFBB", 
                                        vlabels = colnames(data), vlcex = 0.7,
                                        caxislabels = NULL, title = NULL, ...){
  radarchart(
    data, axistype = 1,
    # Customize the polygon
    pcol = color, pfcol = scales::alpha(color, 0.1), plwd = 2, plty = 1,
    # Customize the grid
    cglcol = "grey", cglty = 1, cglwd = 0.8,
    # Customize the axis
    axislabcol = "grey", 
    # Variable labels
    vlcex = vlcex, vlabels = vlabels,
    caxislabels = caxislabels, title = title, ...
  )
}

par(mar = c(1,1,1,1))
# generate plot
create_beautiful_radarchart(
  data = df,
  color = cet_pal(nsites, name = "i1"),
)
# legend
legend(
  x = "right", legend = rownames(df[-c(1,2),]), horiz = FALSE,
  bty = "n", pch = 20 , col = cet_pal(nsites, name = "i1"),
  text.col = "black", cex = 1, pt.cex = 1.5
  )
```


## CVPE

Use CVPE (mean-variance Portfolio Effect, Anderson et al. 2013) to explore the effect site-level heterogeneity in flow regimes on network 

```{r}
# filter to basin
dat_sub <- dat_clean %>% filter(basin == "West Brook")

# meta-system (network)
dat_sub_meta <- dat_sub %>% group_by(date) %>% summarize(sumYield = sum(flow_mean)) %>% ungroup() %>% mutate(meta = "meta")
metacv_tib <- dat_sub_meta %>% group_by(meta) %>% summarize(mean = mean(sumYield, na.rm = TRUE), var = var(sumYield, na.rm = TRUE)) %>% ungroup()
metacv <- sd(dat_sub_meta$sumYield) / mean(dat_sub_meta$sumYield)

# by site
mycvs <- dat_sub %>% group_by(site_name) %>% summarize(mean = mean(flow_mean, na.rm = TRUE), var = var(flow_mean, na.rm = TRUE), cv = sd(flow_mean, na.rm = TRUE) / mean(flow_mean, na.rm = TRUE)) %>% ungroup()
ggplot() + 
  geom_abline(intercept = 0, slope = 2, linetype = "dashed") +
  geom_smooth(data = mycvs, aes(x = log(mean), y = log(var)), method = "lm", color = "black") + 
  geom_point(data = mycvs, aes(x = log(mean), y = log(var), color = site_name)) + 
  geom_point(data = metacv_tib, aes(x = log(mean), y = log(var))) +
  xlab("log(mean flow, cfs)") + ylab("log(variance)")

# Average-CV PE
mean(mycvs$cv) / metacv

```


```{r}
# filter to basin
dat_sub <- dat_clean %>% filter(basin == "West Brook")

# meta-system (network)
dat_sub_meta <- dat_sub %>% group_by(date) %>% summarize(sumYield = sum(Yield_mm)) %>% ungroup() %>% mutate(meta = "meta")
metacv_tib <- dat_sub_meta %>% group_by(meta) %>% summarize(mean = mean(sumYield, na.rm = TRUE), var = var(sumYield, na.rm = TRUE)) %>% ungroup()
metacv <- sd(dat_sub_meta$sumYield) / mean(dat_sub_meta$sumYield)

# by site
mycvs <- dat_sub %>% group_by(site_name) %>% summarize(mean = mean(Yield_mm, na.rm = TRUE), var = var(Yield_mm, na.rm = TRUE), cv = sd(Yield_mm, na.rm = TRUE) / mean(Yield_mm, na.rm = TRUE)) %>% ungroup()
ggplot() + 
  geom_abline(intercept = 0, slope = 2, linetype = "dashed") +
  geom_smooth(data = mycvs, aes(x = log(mean), y = log(var)), method = "lm", color = "black") + 
  geom_point(data = mycvs, aes(x = log(mean), y = log(var), color = site_name)) + 
  geom_point(data = metacv_tib, aes(x = log(mean), y = log(var))) +
  xlab("log(mean yield, mm/day)") + ylab("log(variance)")

# Average-CV PE
mean(mycvs$cv) / metacv

```




## OLD


##### Big Creek
```{r, echo=FALSE, eval=FALSE}
dat_clean %>% 
  filter(subbasin == "Big Creek") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Flathead", date >= date("2018-08-08"), date <= date("2023-08-03"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("North Fork Flathead River NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% dyOptions(colors = c(brewer.pal(9, "Dark2"), "dodgerblue", "black")) %>% dySeries("North Fork Flathead River NWIS", strokeBorderWidth = 1, strokeWidth = 1.5)
```
##### Coal Creek
```{r, echo=FALSE, eval=FALSE}
dat_clean %>% 
  filter(subbasin == "Coal Creek") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Flathead", date >= date("2018-07-29"), date <= date("2023-08-03"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("North Fork Flathead River NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% dyOptions(colors = c(brewer.pal(7, "Dark2"), "black")) %>% dySeries("North Fork Flathead River NWIS", strokeBorderWidth = 1, strokeWidth = 1.5)
```
##### McGee Creek
```{r, echo=FALSE, eval=FALSE}
dat_clean %>% 
  filter(subbasin == "McGee Creek") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Flathead", date >= date("2017-07-30"), date <= date("2023-12-11"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("North Fork Flathead River NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% dyOptions(colors = c(brewer.pal(3, "Dark2"), "black")) %>% dySeries("North Fork Flathead River NWIS", strokeBorderWidth = 1, strokeWidth = 1.5)
```
##### Shields River
```{r, echo=FALSE, eval=FALSE}
dat_clean %>% 
  filter(subbasin == "Shields River") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Shields River", date >= date("2016-04-01"), date <= date("2023-12-31"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("Yellowstone River Livingston NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% dyOptions(colors = c(brewer.pal(7, "Dark2"), "black")) %>% dySeries("Yellowstone River Livingston NWIS", strokeBorderWidth = 1, strokeWidth = 1.5)
```
##### Duck Creek
```{r, echo=FALSE, eval=FALSE}
dat_clean %>% 
  filter(subbasin == "Duck Creek") %>% 
  bind_rows(dat_clean_big %>% filter(subbasin == "Shields River", date >= date("2015-04-01"), date <= date("2023-12-31"))) %>% 
  select(date, site_name, logYield) %>% 
  spread(key = site_name, value = logYield) %>% 
  relocate("Yellowstone River Livingston NWIS", .after = last_col()) %>% 
  dygraph() %>% dyRangeSelector() %>% dyAxis("y", label = "ln(Yield, mm)") %>% dyOptions(colors = c(brewer.pal(3, "Dark2"), "black")) %>% dySeries("Yellowstone River Livingston NWIS", strokeBorderWidth = 1, strokeWidth = 1.5)
```



Plotting function
```{r eval=FALSE}
# set up color palette
mycols <- c(brewer.pal(8, "Dark2"), "dodgerblue", "darkorchid")

# create plotting function
myplotfun <- function(subbas, lab, bigG) {
  data_sub <- dat_clean %>% filter(subbasin == subbas)
  par(mar = c(1.7,1.7,0.1,0.1), mgp = c(2.5,0.6,0))
  plot(logYield ~ date, data_sub, type = "n", xlab = "", ylab = "")
  #tempdat_little <- data_sub %>% filter(designation == "little")
  tempdat_little <- fill_missing_dates(data_sub, dates = date, groups = site_name, pad_ends = FALSE)
  tempdat_big <- dat_clean_big %>% filter(site_name == bigG, date >= min(tempdat_little$date), date <= max(tempdat_little$date))
  #tempdat_big <- data_sub %>% filter(designation == "big")
  tempdat_big <- fill_missing_dates(tempdat_big, dates = date, groups = site_name, pad_ends = FALSE)
  mysites <- sort(unique(tempdat_little$site_name))
  for (i in 1:length(mysites)) {
    lines(logYield ~ date, tempdat_little %>% filter(site_name == mysites[i]), col = mycols[i], lwd = 0.7)
    }
  lines(logYield ~ date, tempdat_big, col = "white", lwd = 1.7)
  lines(logYield ~ date, tempdat_big, col = "black", lwd = 1)
  usr <- par("usr")
  par(usr = c(0,1,0,1))
  text(0.02, 0.9, labels = lab, cex = 1.2)
  par(usr = usr)
}
```

Generate plot
```{r fig.width=8, fig.height=12, eval=FALSE}
jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/EcoD_timeseries.jpg", width = 8, height = 12, units = "in", res = 1000)

par(mfrow = c(10,1), oma = c(0.5,2,0.5,0.5))

# West Brook
myplotfun(subbas = "West Brook", lab = "(a)", bigG = "South River Conway NWIS")

# Paine
myplotfun(subbas = "Paine Run", lab = "(b)", bigG = "South River Harriston NWIS")

# Staunton River
myplotfun(subbas = "Staunton River", lab = "(c)", bigG = "Rapidan River NWIS")

# Big Creek
myplotfun(subbas = "Big Creek", lab = "(d)", bigG = "North Fork Flathead River NWIS")

# Coal Creek
myplotfun(subbas = "Coal Creek", lab = "(e)", bigG = "North Fork Flathead River NWIS")

# McGee Creek
myplotfun(subbas = "McGee Creek", lab = "(f)", bigG = "North Fork Flathead River NWIS")

# Snake River
myplotfun(subbas = "Snake River", lab = "(g)", bigG = "Pacific Creek at Moran NWIS")

# Shields River
myplotfun(subbas = "Shields River", lab = "(h)", bigG = "Yellowstone River Livingston NWIS")

# Duck Creek
myplotfun(subbas = "Duck Creek", lab = "(i)", bigG = "Yellowstone River Livingston NWIS")

# Donner Blitzen
myplotfun(subbas = "Donner Blitzen", lab = "(j)", bigG = "Donner Blitzen River nr Frenchglen NWIS")

# common axis label
mtext("log(Daily yield, mm)", outer = TRUE, side = 2, line = 0.5)

dev.off()
```




Plotting functions
```{r eval=FALSE}
# create plotting function
myplotfun_ex <- function(subbas, lab) {
  # filter to subbasin and get site designation
  
}  


# CV of little g Yield by exceedance probability
myplotfun_cv <- function(subbas, lab) {
  # filter to subbasin and get site designation
  data_sub <- dat_clean %>% filter(subbasin == subbas)
  sitesdesig <- data_sub %>% group_by(site_name) %>% summarize(designation = unique(designation)) %>% ungroup()
  # calculate exceedance probability by site
  exeeddat <- data_sub %>% 
    select(date, site_name, logYield) %>%
    spread(key = site_name, value = logYield) %>% 
    drop_na() %>%
    gather(key = site_name, value = logYield, 2:ncol(.)) %>%
    group_by(site_name) %>%
    arrange(desc(logYield), .by_group = TRUE) %>%
    mutate(exceedance = 100/length(logYield)*1:length(logYield)) %>%
    ungroup() %>%
    left_join(sitesdesig)
  exeeddat_little <- exeeddat %>% filter(designation == "little")
  exeeddat_big <- exeeddat %>% filter(designation == "big")
  # set up plot
  par(mar = c(1.7,1.7,0.1,0.1), mgp = c(2.5,0.6,0))
  mysites <- sort(unique(exeeddat_little$site_name))
  tiblist <- list()
  for (i in 1:length(mysites)) {
    tt <- exeeddat %>% filter(site_name == mysites[i])
    mylinint <- approx(x = tt$exceedance, y = tt$logYield, xout = seq(from = 0, to = 100, by = 1))
    tiblist[[i]] <- tibble(site_name = mysites[i], exceedance = mylinint$x, logYield = mylinint$y)
  }
  cvtib <- do.call(bind_rows, tiblist) %>%
    group_by(exceedance) %>%
    summarize(sdf = sd(logYield)) %>%
    ungroup()
  plot(sdf ~ exceedance, cvtib, type = "l", col = "grey40", lwd = 2, ylim = c(0,0.8))
  # panel label
  usr <- par("usr")
  par(usr = c(0,1,0,1))
  text(0.92, 0.9, labels = lab, cex = 1.2)
  par(usr = usr)
}  
```

Plot exceedance
```{r fig.width=8, fig.height=12, eval=FALSE}
jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/EcoD_exceedance_JAS.jpg", width = 4, height = 8, units = "in", res = 1000)
par(mfrow = c(5,2), oma = c(2,2,0.5,0.5))
myplotfun_ex(subbas = "West Brook", lab = "(a)")
myplotfun_ex(subbas = "Paine Run", lab = "(b)")
myplotfun_ex(subbas = "Staunton River", lab = "(c)")
myplotfun_ex(subbas = "Big Creek", lab = "(d)")
myplotfun_ex(subbas = "Coal Creek", lab = "(e)")
myplotfun_ex(subbas = "McGee Creek", lab = "(f)")
myplotfun_ex(subbas = "Snake River", lab = "(g)")
myplotfun_ex(subbas = "Shields River", lab = "(h)")
myplotfun_ex(subbas = "Duck Creek", lab = "(i)")
myplotfun_ex(subbas = "Donner Blitzen", lab = "(j)")
mtext("log(Daily yield, mm)", outer = TRUE, side = 2, line = 0.5)
mtext("Exceedance probability", outer = TRUE, side = 1, line = 0.5)
dev.off()

#![July-September flow exceedance curves for sites in 10 headwater stream networks.](EcoD_exceedance_JAS.jpg)
```

Plot CV by exceedance
```{r fig.width=8, fig.height=12, eval=FALSE}
jpeg("C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/EcoD_exceedance_cv.jpg", width = 4, height = 8, units = "in", res = 1000)
par(mfrow = c(5,2), oma = c(2,2,0.5,0.5))
myplotfun_cv(subbas = "West Brook", lab = "(a)")
myplotfun_cv(subbas = "Paine Run", lab = "(b)")
myplotfun_cv(subbas = "Staunton River", lab = "(c)")
myplotfun_cv(subbas = "Big Creek", lab = "(d)")
myplotfun_cv(subbas = "Coal Creek", lab = "(e)")
myplotfun_cv(subbas = "McGee Creek", lab = "(f)")
myplotfun_cv(subbas = "Snake River", lab = "(g)")
myplotfun_cv(subbas = "Shields River", lab = "(h)")
myplotfun_cv(subbas = "Duck Creek", lab = "(i)")
myplotfun_cv(subbas = "Donner Blitzen", lab = "(j)")
mtext("SD of log(daily yield, mm) at little g's", outer = TRUE, side = 2, line = 0.5)
mtext("Exceedance probability", outer = TRUE, side = 1, line = 0.5)
dev.off()

#![July-September spatial variation in flow exceedance probabilities for 10 headwater stream networks.](EcoD_exceedance_cv_JAS.jpg)
```
